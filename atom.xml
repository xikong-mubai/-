<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汐白的学习档案</title>
  
  <subtitle>小萌新一枚QAQ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xibai.xyz/"/>
  <updated>2020-03-11T14:02:21.196Z</updated>
  <id>http://xibai.xyz/</id>
  
  <author>
    <name>Ximu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>流量分析（萌新开坑Ing-慢慢填）</title>
    <link href="http://xibai.xyz/2020/03/05/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90-%E5%85%88%E5%BC%80%E5%9D%91%E6%85%A2%E6%85%A2%E5%A1%AB/"/>
    <id>http://xibai.xyz/2020/03/05/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90-%E5%85%88%E5%BC%80%E5%9D%91%E6%85%A2%E6%85%A2%E5%A1%AB/</id>
    <published>2020-03-05T13:42:07.000Z</published>
    <updated>2020-03-11T14:02:21.196Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>最后更新于：2020-03-05 21：44</em></strong></p><h2 id="萌新已知的工具"><a href="#萌新已知的工具" class="headerlink" title="萌新已知的工具"></a>萌新已知的工具</h2><h3 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h3><h3 id="usbpacp"><a href="#usbpacp" class="headerlink" title="usbpacp"></a>usbpacp</h3><h3 id="npcap"><a href="#npcap" class="headerlink" title="npcap"></a>npcap</h3><h3 id="RouterPassView-能查看宽带数据"><a href="#RouterPassView-能查看宽带数据" class="headerlink" title="RouterPassView(能查看宽带数据)"></a>RouterPassView(能查看宽带数据)</h3><h2 id="目前见过的类型"><a href="#目前见过的类型" class="headerlink" title="目前见过的类型"></a>目前见过的类型</h2><h3 id="常规网络流量包分析"><a href="#常规网络流量包分析" class="headerlink" title="常规网络流量包分析"></a>常规网络流量包分析</h3><h3 id="USB流量包分析"><a href="#USB流量包分析" class="headerlink" title="USB流量包分析"></a>USB流量包分析</h3><p>这个文件里面第53页有usb键盘流量中和键盘按键对应的十六进制数据表：<a href="https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf" target="_blank" rel="noopener">https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf</a></p><h3 id="网络通信流量包（voip-rtp）"><a href="#网络通信流量包（voip-rtp）" class="headerlink" title="网络通信流量包（voip rtp）"></a>网络通信流量包（voip rtp）</h3>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Misc" scheme="http://xibai.xyz/categories/Misc/"/>
    
    
      <category term="CTF" scheme="http://xibai.xyz/tags/CTF/"/>
    
      <category term="Misc" scheme="http://xibai.xyz/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>2020V&amp;N招新赛Misc</title>
    <link href="http://xibai.xyz/2020/03/01/V&amp;N-find_new/"/>
    <id>http://xibai.xyz/2020/03/01/V&amp;N-find_new/</id>
    <published>2020-03-01T04:57:01.000Z</published>
    <updated>2020-03-05T16:21:47.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拉胯的三条命令"><a href="#拉胯的三条命令" class="headerlink" title="拉胯的三条命令"></a>拉胯的三条命令</h2><p>打开压缩包结合题目描述，可以猜测这是一个nmap扫描端口的流量包，然后让找到开放的端口从小到大排列。Wireshark中nmap扫描流量，如果端口开放，则必有ack回应。<br>而且wireshark对于正常通信的tcp流量貌似都是高亮显示，ok，直接查看高亮的流量，统计这些流量的端口，其中有个重要的小细节，对于80端口的流量，因为其默认类型被当作http端口，所以wireshark会直接将其高亮，要看一下他的ack值是否为零才能正确判断80端口是否开放。于是得到一下端口号：<br>21<br>22<br>631<br>801<br>3306<br>5939<br>32848<br>60206<br>其中5939、32848、60206三个端口存在大量的“流量”，这不应该是端口扫描的流量，端口扫描是探查端口状态的，不应该有大量的数据交换，所以不考虑这三个端口，剩下的端口从小到大排列试一下，正确</p><h2 id="ML第一步"><a href="#ML第一步" class="headerlink" title="ML第一步"></a>ML第一步</h2><p>创建实例后浏览器直接访问发现这不是网站服务，那应该是应用类服务，用nc连接。</p><p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/imagesVN-ML1.png" alt="link"></p><p>总之意思就是有一个未知函数y=f(x)，给出70组(x,y)。让我们求它的拟合方程。<br>然后他会给出10个x，让我们用拟合方程推测y的值，如果结果误差不超过0.06，就可以得到小旗子。<br>用python的matplotlib.pyplot画出散点图发现70组数据接近一条直线，直接脚本求解线性回归方程，然后去拿flag。求解脚本如下（ps：因为散点图的这条线有一点点弧度，所以我用了四次多项式，没有直接用一次的直线）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f_fit</span><span class="params">(x,y_fit)</span>:</span></span><br><span class="line">    a,b,c,d,e=y_fit.tolist()</span><br><span class="line">    <span class="keyword">return</span> a*x**<span class="number">4</span>+b*x**<span class="number">3</span>+c*x**<span class="number">2</span>+d*x+e</span><br><span class="line"></span><br><span class="line">data = <span class="string">"x=0.7587857855539164,y=-1.720845811051089\</span></span><br><span class="line"><span class="string">;x=0.13291321567620085,y=-0.44979144628012097\</span></span><br><span class="line"><span class="string">;x=0.989974986143239,y=-1.9690360825859337\</span></span><br><span class="line"><span class="string">;x=0.3576179200089157,y=-0.9003680552893811\</span></span><br><span class="line"><span class="string">;x=0.6031957139605361,y=-1.413869207317482\</span></span><br><span class="line"><span class="string">;x=0.8655969454196368,y=-1.8874775800952617\</span></span><br><span class="line"><span class="string">;x=0.48683649837550014,y=-1.2221034522056922\</span></span><br><span class="line"><span class="string">;x=0.1279800851084858,y=-0.3598626690513456\</span></span><br><span class="line"><span class="string">;x=0.01840117269743846,y=-0.0825695560842738\</span></span><br><span class="line"><span class="string">;x=0.49065439417804224,y=-1.2151317607134124\</span></span><br><span class="line"><span class="string">;x=0.745683162567403,y=-1.6542547149837732\</span></span><br><span class="line"><span class="string">;x=0.564686557840641,y=-1.4086742079578898\</span></span><br><span class="line"><span class="string">;x=0.5506578263400632,y=-1.328319038372737\</span></span><br><span class="line"><span class="string">;x=0.09890521425587329,y=-0.268867793932863\</span></span><br><span class="line"><span class="string">;x=0.9653080707668127,y=-1.9926065934683845\</span></span><br><span class="line"><span class="string">;x=0.49189934250857936,y=-1.2041799438406553\</span></span><br><span class="line"><span class="string">;x=0.47460948035678996,y=-1.1919570601329146\</span></span><br><span class="line"><span class="string">;x=0.7296637598789997,y=-1.626555486935713\</span></span><br><span class="line"><span class="string">;x=0.8772637406893159,y=-1.8444895108368027\</span></span><br><span class="line"><span class="string">;x=0.5262847068436897,y=-1.26898790243642\</span></span><br><span class="line"><span class="string">;x=0.18375224095950315,y=-0.49792227912640824\</span></span><br><span class="line"><span class="string">;x=0.5302276810137457,y=-1.3245875742508557\</span></span><br><span class="line"><span class="string">;x=0.44598041870724514,y=-1.1407183813974087\</span></span><br><span class="line"><span class="string">;x=0.9297802591112221,y=-1.9038682460892118\</span></span><br><span class="line"><span class="string">;x=0.31768338032416477,y=-0.8380436760373051\</span></span><br><span class="line"><span class="string">;x=0.31932181828715034,y=-0.885221801261295\</span></span><br><span class="line"><span class="string">;x=0.6520599635229203,y=-1.5648743849645852\</span></span><br><span class="line"><span class="string">;x=0.6318704181747703,y=-1.5361822819084332\</span></span><br><span class="line"><span class="string">;x=0.33596049748295764,y=-0.9018941515966336\</span></span><br><span class="line"><span class="string">;x=0.1582929490762487,y=-0.4621575450764881\</span></span><br><span class="line"><span class="string">;x=0.611161054351204,y=-1.4819230001079216\</span></span><br><span class="line"><span class="string">;x=0.2273505730886458,y=-0.6426008674876235\</span></span><br><span class="line"><span class="string">;x=0.3434775350774453,y=-0.9440612715950338\</span></span><br><span class="line"><span class="string">;x=0.3424015864156754,y=-0.8739934996421624\</span></span><br><span class="line"><span class="string">;x=0.8593474128108042,y=-1.8415838175212416\</span></span><br><span class="line"><span class="string">;x=0.9385785550053852,y=-1.9041364608079328\</span></span><br><span class="line"><span class="string">;x=0.4943478784921591,y=-1.2315495557049194\</span></span><br><span class="line"><span class="string">;x=0.45739416734634764,y=-1.1594371513265878\</span></span><br><span class="line"><span class="string">;x=0.8929294113779981,y=-1.8615545670417983\</span></span><br><span class="line"><span class="string">;x=0.19881908699665485,y=-0.5530975791426536\</span></span><br><span class="line"><span class="string">;x=0.06396527084952186,y=-0.2248085775384525\</span></span><br><span class="line"><span class="string">;x=0.2686482544684099,y=-0.75603686845716\</span></span><br><span class="line"><span class="string">;x=0.6084930406339851,y=-1.4717769288575426\</span></span><br><span class="line"><span class="string">;x=0.22216290869419308,y=-0.5906772203093745\</span></span><br><span class="line"><span class="string">;x=0.5914604953995254,y=-1.4177038761692764\</span></span><br><span class="line"><span class="string">;x=0.2036532638797327,y=-0.5788918140417649\</span></span><br><span class="line"><span class="string">;x=0.4558490044828919,y=-1.1682771304121138\</span></span><br><span class="line"><span class="string">;x=0.18324091786354268,y=-0.5788763881712895\</span></span><br><span class="line"><span class="string">;x=0.5421407829934451,y=-1.328797280920123\</span></span><br><span class="line"><span class="string">;x=0.4056810838054147,y=-1.0890377739166588\</span></span><br><span class="line"><span class="string">;x=0.39311134509953427,y=-1.037818315593108\</span></span><br><span class="line"><span class="string">;x=0.452612604644542,y=-1.2237566644854736\</span></span><br><span class="line"><span class="string">;x=0.2615352628059312,y=-0.70346972932896\</span></span><br><span class="line"><span class="string">;x=0.8901625763679877,y=-1.8806707950314019\</span></span><br><span class="line"><span class="string">;x=0.28280744763980337,y=-0.8231345793908345\</span></span><br><span class="line"><span class="string">;x=0.09628463850897795,y=-0.24971993270496043\</span></span><br><span class="line"><span class="string">;x=0.16481384396642307,y=-0.46946630708368303\</span></span><br><span class="line"><span class="string">;x=0.2847357540218156,y=-0.7947718784607872\</span></span><br><span class="line"><span class="string">;x=0.5319011449268986,y=-1.2668856188466802\</span></span><br><span class="line"><span class="string">;x=0.1081951088228772,y=-0.2536241872065086\</span></span><br><span class="line"><span class="string">;x=0.08836473591694316,y=-0.23153637261490673\</span></span><br><span class="line"><span class="string">;x=0.38840371594123335,y=-1.0336677376652563\</span></span><br><span class="line"><span class="string">;x=0.7720822530882997,y=-1.6953637803062263\</span></span><br><span class="line"><span class="string">;x=0.36229637982212415,y=-0.9854786906183374\</span></span><br><span class="line"><span class="string">;x=0.9519976240184558,y=-1.929418000224495\</span></span><br><span class="line"><span class="string">;x=0.5783183065134814,y=-1.3777929584428186\</span></span><br><span class="line"><span class="string">;x=0.5906565476132922,y=-1.4103866887242276\</span></span><br><span class="line"><span class="string">;x=0.8171334469097077,y=-1.748680676187232\</span></span><br><span class="line"><span class="string">;x=0.668796106230006,y=-1.5411754553626387\</span></span><br><span class="line"><span class="string">;x=0.581250276261842,y=-1.395451210048179"</span></span><br><span class="line"></span><br><span class="line">data_list = data.split(<span class="string">";"</span>)</span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data_list:</span><br><span class="line">    i_list = str(i).split(<span class="string">','</span>)</span><br><span class="line">    x.append(float(i_list[<span class="number">0</span>][<span class="number">2</span>:]))</span><br><span class="line">    y.append(float(i_list[<span class="number">1</span>][<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line"></span><br><span class="line">y_fit=np.polyfit(x,y,<span class="number">4</span>)<span class="comment">#二次多项式拟合</span></span><br><span class="line">y_show=np.poly1d(y_fit)<span class="comment">#函数优美的形式</span></span><br><span class="line">print(y_show)<span class="comment">#打印</span></span><br><span class="line">y1=f_fit(x,y_fit)</span><br><span class="line">plt.plot(x,f(x),<span class="string">'r'</span>,label=<span class="string">'original'</span>)</span><br><span class="line">plt.scatter(x,y,c=<span class="string">'g'</span>,label=<span class="string">'before_fitting'</span>)<span class="comment">#散点图</span></span><br><span class="line">plt.plot(x,y1,<span class="string">'b--'</span>,label=<span class="string">'fitting'</span>)</span><br><span class="line">plt.title(<span class="string">'polyfitting'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.legend()<span class="comment">#显示标签</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>然后去用得到的函数式推测十个y值，得到flag（如下图）：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-ML2.png" alt="VN-ML2.png"></p><h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><p>检查镜像信息，然后终端进程文件查看一条龙。<br>终端没有发现什么有用的，进程直接浏览器记事本画图磁盘加密四个emmm，文件查看什么都没有。<br>一开始想用notepad查看记事本内容，然后发现不支持。无奈-h查看帮助，看了半天找到一个editbox，可以查看编辑器的内容，于是成功获得百度云分享链接内容：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-%E5%86%85%E5%AD%981.png" alt="VN-内存1.png"><br>拿到一个VOL，很明显这应该就是加密的磁盘文件，将Truecrypt进程dump下来，用efdd工具破解密码挂载到本地，获取到key：uOjFdKu1jsbWI8N51jsbWI8N5。<br>至此四个进程用去三个，很明显最后的提示信息应该就在画图进程里。<br>将mspaint进程dump出来，用gimp分析，宽1728，偏移2kw时，得到：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-%E5%86%85%E5%AD%982.png" alt="VN-内存2.png"><br><del>好了，剩下的真不行了，图像信息只分析出来这一个，不知道这个字符串怎么和key用，推测是一种加密，但没找到别的提示信息，搞不定了emmmmm</del><br>套娃可耻！！！到网上下载一个TrueCrypt，用它挂载VOL，密码就是刚刚的key，然后拿到压缩包，密码是上面的画图的内容，开头那个是‘1’，一开始以为是I，然后不对就试了下‘l’和‘1’，出了flag</p><h2 id="Final-Game"><a href="#Final-Game" class="headerlink" title="Final Game"></a>Final Game</h2><h3 id="Malebolge-Online"><a href="#Malebolge-Online" class="headerlink" title="Malebolge Online"></a>Malebolge Online</h3><p>题目有一个压缩包和一个vmdk，先看看压缩包，里面有个文本，说是一些有用的东西，看来是解题提示，但是加密了，旁边还有注释。说要去要去地狱的第八层emmm<br>发现加密文本的文件名也是地狱的英文单词，谷歌一下看看是不是有猫腻。这里有一说一运气了一下。<br>直接搜索这个单词只能搜出来相关的宗教知识，不过因为我懒得手打，就<code>f2</code> 文件，然后 <code>ctrl a</code> <code>ctrl c</code> 了，于是我谷歌的是这个单词后面跟了 <code>.txt</code> 的后缀，直接就搜出来一个 Malebolge online ，打开发现也是一种类似 <code>brain fuck</code> 的语言，很明显，注释里面的内容拉进来运行，得到一串字符串，这应该就是解压密码了。<br>然后解压缩成功，打开文本查看提示：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG1.png" alt="VN-FG1.png"><br>很明显，这些就是解题相关的文件。接下来该去看vmdk了。</p><h3 id="vmdk-find-file"><a href="#vmdk-find-file" class="headerlink" title="vmdk find file"></a>vmdk find file</h3><p>7z打开vmdk，发现这真就把c盘弄下来小半emmm，听人说里面有lamber师傅的照片，本来准备直接拿相关文件的手控制不住的就一个个文件夹的点过去找照片了2333。<br>咳咳，说正经的说正经的。这里直接用修改时间排序查看最后修改的文件夹，一般和题目相关的文件都是最后修改或者访问的，毕竟出完题要先测试一下复现。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG2.png" alt="VN-FG2.png"><br>这里有个坑，只看修改时间和访问时间会发现只有它是放题的地方，但是如果进入到下面的 <code>user</code> 文件夹下的 <code>lenovo</code> 会发现外面看修改和访问都是11月1日，进去之后反而有6号和7号的，还好我为了找某人的照片专门跑过来看了2333<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG3.png" alt="VN-FG3.png"><br>所有放题目文件的位置都找到了，一一把题目文件提取出来。</p><h3 id="NTFS-ELF"><a href="#NTFS-ELF" class="headerlink" title="NTFS + ELF"></a>NTFS + ELF</h3><p>发现各个文件不是结构有问题就是有密码，这时想到提示说有ntfs，就用工具扫了一下，发现 <code>door.png</code> 后面藏了一个exe，运行一下他说要<strong>放在炼狱下运行</strong>。又提示 Mr.png才能上天堂，这里我一开始以为是有什么png图片需要拿过来，但是找了半天找不到别的啥图片555，然后干脆去逆向分析这个exe。<br>于是乎，一个下午没了，这程序保护全开上的强壳，吐了。后来突然想到是不是把别的题目文件和它放一起就行了，就把别的文件拉了过来。ok，拿到提示：需要修复elf。</p><p><del>这里又是几个小时各种查elf修复emmm。被自己蠢哭，这是misc不是re！！！</del></p><p>按照misc的文件修复思路走那坑定是个别固定的文件十六进制数据被修改了，于是直接搜索elf的文件格式，发现文件开头应该是 <code>7f</code> 的被改了，改回来。然后试了下用kali运行，发现报错，可能是改了别的地方，这里百度到可以用Linux下的 <code>readelf -h filename</code> 查看elf文件的结构信息，发现elf类型是none，猜测是这里错了。这里我用了 <code>010 Editor</code> 的模板功能，这玩意真好用，直接一键选择类型。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG4.png" alt="VN-FG4.png"><br>然后运行程序：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG5.png" alt="VN-FG5.png"><br>emmm，还是ida看一下吧。箭头指向的应该是main函数地址。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG6.png" alt="VN-FG6.png"><br>分析main函数，发现这里进行了一次判断，如果向程序传参的值大于1，则跳过该处。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG7.png" alt="VN-FG7.png"><br>传一个参数 2 运行试试：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG8.png" alt="VN-FG8.png"><br>得到提示，很明显是让我们解md5，在线网站跑一下，得到 <code>evoA</code><br>这里我没分析出来v4的值受什么影响，不过看到这个evoA，我猜测<code>v4[1]</code>是传入参数的字符长度，那么接下来把evoA作为参数传入。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG9.png" alt="VN-FG9.png"><br>得到一串字符，开头是pdf，应该是pdf的密码。去查看pdf内容。</p><h3 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h3><p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG10.png" alt="VN-FG10.png"><br>键盘密码，看着键盘转换一下，根据明文内容可知表情符号是空格。得到：</p><pre><code>The password of word is capital(PROVERBS OF GOD)</code></pre><h3 id="Word"><a href="#Word" class="headerlink" title="Word"></a>Word</h3><p>拿到word压缩包的密码，去查看word，打开发现是一个图片的十六进制，因为字符太多，这里我用脚本转了，python的python-docx库可以操作docx，先把docm格式另存为docx格式，提示有宏，先看一下宏的内容<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG11.png" alt="VN-FG11.png"><br>是一堆base64，写个脚本解一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑到base64隐写，先解一下base64，这里有个不算坑的坑，宏生成的文本换行只有一个\r，没有\n，所以python会把其当作一行</span></span><br><span class="line">b64chars = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'ba.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    bin_str = <span class="string">''</span></span><br><span class="line">    flag = <span class="string">''</span></span><br><span class="line">    lines = f.readline().split(<span class="string">'\r'</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        stegb64 = str(line).replace(<span class="string">"\r"</span>,<span class="string">"\n"</span>).strip(<span class="string">"\n"</span>)</span><br><span class="line">        rowb64 =  str(base64.b64encode(base64.b64decode(stegb64))).strip(<span class="string">"\n"</span>)</span><br><span class="line">        offset = abs(b64chars.index(stegb64.replace(<span class="string">'='</span>,<span class="string">''</span>)[<span class="number">-1</span>]) - b64chars.index(rowb64.replace(<span class="string">'='</span>,<span class="string">''</span>)[<span class="number">-1</span>]))</span><br><span class="line">        equalnum = stegb64.count(<span class="string">'='</span>) <span class="comment">#no equalnum no offset</span></span><br><span class="line">        <span class="keyword">if</span> equalnum:</span><br><span class="line">            bin_str += bin(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line">                <span class="comment">#flag += chr(int(bin(offset)[2:].zfill(equalnum * 2), 2))</span></span><br><span class="line">                <span class="comment">#print(flag) #这样写得不出正确结果</span></span><br><span class="line">    print(<span class="string">''</span>.join([chr(int(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(bin_str), <span class="number">8</span>)]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里是正常解文本base64</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'ba.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fi,open(<span class="string">'ba_de'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> io:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> fi.readlines():</span><br><span class="line">                <span class="comment">#print(type(i.strip()))</span></span><br><span class="line">                io.write(base64.b64decode(i.strip()))</span><br><span class="line">        shutil.copy(<span class="string">'ba_de'</span>,<span class="string">'ba_de.tmp'</span>)</span><br><span class="line">        os.remove(<span class="string">'ba.txt'</span>)</span><br><span class="line">        os.rename(<span class="string">'ba_de'</span>,<span class="string">'ba.txt'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'finish'</span>)</span><br></pre></td></tr></table></figure><p>运行发现base64藏了东西。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG12.png" alt="VN-FG12.png"></p><p>然后再去查看十六进制转换出来的文件，是一个被修改了文件头的png，改回来，stegslove发现存在lsb隐写，推测是带密码的lsb，用GitHub上的cloacked-pixel解，上面的base64隐写内容为密钥<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG13.png" alt="VN-FG13.png"><br>得到最后osz文件压缩包的密码。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG14.png" alt="VN-FG14.png"></p><h3 id="OSZ"><a href="#OSZ" class="headerlink" title="OSZ"></a>OSZ</h3><p>这里我以前没玩过osu，所以就按照正常流程走。<br><em>其实玩过的大佬直接还是要正常走下去23333</em><br>拖进kali里面发现直接变成了压缩包图标的文件，解压缩得到一个文件夹<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG15.png" alt="VN-FG15.png"></p><p>进去看看：   一堆音频和一个<code>Read.jpg</code>加一个<code>osu</code>后缀的疑似文本的文件.<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG16.png" alt="VN-FG16.png"></p><p>文本打开osu后缀的文件，顺便strings看一下<code>Readme.jpg</code>。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG17.png" alt="VN-FG17.png"></p><p>jpg结尾跟的有东西，osu后缀给了一个b站av号。先查看这个av号的视频。发现是一个叫<code>osu</code>的音频相关的编辑器，搜一下，知道是一种音游，比节奏大师要难很多emmm。下载<code>osu!</code>，将<code>paradise.osz</code>用<code>osu!</code>打开，然后没发现什么问题，不过大概了解一下玩法，推荐看到的各位入手嘿嘿嘿。再去看看jpg后面的内容：</p><pre><code>in,map.flag,is :0036112S0038362y0042112c0055162{011091201187120135512014211201581630200412020386202163120219762022531202313120251862030251203121120318412032962803424120352837035853704093370420137044346204471370450062045786205147370514737051586205165370525312052606205301870548562}Traversing.Time</code></pre><p>在map里，flag是xxxxxxx，结合它的玩法和群里师傅的说法，看来是让我画flag了emmmm，把字符<code>Syc{</code>前的数字当成时间，进入地图编辑器里查看相关时间的内容发现</p><p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG18.png" alt="VN-FG18.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG19.png" alt="VN-FG19.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG20.png" alt="VN-FG20.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG21.png" alt="VN-FG21.png"></p><p>果然是看图像拼flag，这里就跟着时间节点一个个记录flag数值即可。<br>在记录一下拼flag时遇到的小坑：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200303184416.png" alt="20200303184416.png"><br>这几个选择全部关掉！！！不然后面有几个字符显示的部分不全认不出来是什么emmm，还有下面这里，一开始我记录flag的时候有好几个都是这样给了一个点，给我整蒙了，后来意识到这点上有数字，这个数字就是flag的值emmm，剩下的就是看形状了，反正md5的字符是十六进制的字符，实在顶不准就标记一下手工爆破吧，这里实在不想再回去一个个复查了555<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200303184637.png" alt="20200303184637.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Misc" scheme="http://xibai.xyz/categories/Misc/"/>
    
    
      <category term="CTF" scheme="http://xibai.xyz/tags/CTF/"/>
    
      <category term="Misc" scheme="http://xibai.xyz/tags/Misc/"/>
    
      <category term="Writeup" scheme="http://xibai.xyz/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF-MISC(三)</title>
    <link href="http://xibai.xyz/2020/02/24/BUU-Misc-three/"/>
    <id>http://xibai.xyz/2020/02/24/BUU-Misc-three/</id>
    <published>2020-02-24T15:51:11.000Z</published>
    <updated>2020-03-12T09:15:46.761Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近更新：</strong> <em>2020-03-11 21:45</em></p><h2 id="GUET-CTF2019-zips"><a href="#GUET-CTF2019-zips" class="headerlink" title="[GUET-CTF2019]zips"></a>[GUET-CTF2019]zips</h2><p>第一层压缩包密码直接爆破，第二次是伪加密，第三层根据 <code>sh</code> 的命令可知密钥是压缩包创建时的时间戳，查看压缩包修改日期，在线工具看一下那一天的时间戳，时间戳其实就是一个距离那个一九几几年几月几日零时零分零秒的秒数，同一天的时间戳前几位肯定一样，又因为其所使用python的相关时间戳函数范围的值精确到了小数点后两位，所以这里使用掩码攻击爆破密钥<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages%E6%97%B6%E9%97%B4%E6%88%B31.png" alt="时间戳1.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages%E6%97%B6%E9%97%B4%E6%88%B32.png" alt="时间戳2.png"></p><h2 id="GUET-CTF2019-KO"><a href="#GUET-CTF2019-KO" class="headerlink" title="[GUET-CTF2019]KO"></a>[GUET-CTF2019]KO</h2><p>就是<code>ook</code>编码的签到，找个在线解码网站解一下码就行了</p><h2 id="从娃娃抓起"><a href="#从娃娃抓起" class="headerlink" title="从娃娃抓起"></a>从娃娃抓起</h2><p>题目说是和汉字里程碑的两种编码方式。首先就想到了可能和汉字输入法有关，肯定不是拼音输入，于是想到五笔输入，很明显纯四位数字和五笔没有关系，试试下面的字母，果然拿到了半句连贯的话。上面的四位数字找了好久才找到是上世纪的电报码，我天，太狗了。电报码翻译过来是人工智能。连起来求md5即为flag</p><h2 id="DDCTF2018-╯°□°）╯︵-┻━┻"><a href="#DDCTF2018-╯°□°）╯︵-┻━┻" class="headerlink" title="[DDCTF2018](╯°□°）╯︵ ┻━┻"></a>[DDCTF2018](╯°□°）╯︵ ┻━┻</h2><p>打开之后发现就是50分的签到类的题，觉得应该不会有什么太大的坑。然而这里是我蒙出来的我特喵，瞎猜真的很难猜的，希望以后能少一点瞎猜，多一丝对吹头发选手的关爱TAT<br>因为是50分的题，又发现这是一列十六进制的值，关键是都在<code>80</code>到<code>ff</code>之间，就盲猜是原字符的ASCII码值加了128，写个脚本就出来了</p><p>  That was fast! The flag is: DDCTF{922ab9974a47cd322cf43b50610faea5}</p><h2 id="GWCTF2019-huyao"><a href="#GWCTF2019-huyao" class="headerlink" title="[GWCTF2019]huyao"></a>[GWCTF2019]huyao</h2><p>两个一样的图片，不过大小差了大概十几kb，目测是盲水印，去GitHub找一下盲水印的脚本，跑一下即可，另外，GitHub上面有两种不兼容版本的盲水印，一般用这个版本写入的水印只能用这个版本提取。</p><h2 id="HBNIS2018-excel破解"><a href="#HBNIS2018-excel破解" class="headerlink" title="[HBNIS2018]excel破解"></a>[HBNIS2018]excel破解</h2><p>我尽力破解密码了，但着实爆不出来。不过这题有另外的不知道是不是非预期解，winhex搜索或者strings命令都能直接看到flag</p><h2 id="voip"><a href="#voip" class="headerlink" title="voip"></a>voip</h2><p>百度voip，学到这是网络电话用的协议，那这个流量包很明显就是捕获的一次在线通话，wireshark中有相关分析功能，如下：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesRTP2.png" alt="RTP2.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesRTP3.png" alt="RTP3.png"></p><p>经过本废喵十分钟的努力，终于记下了整个通话内容的全部单词。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi,this is your service.Please press one to listen flag.The flag is S E C C O N,hold on,please.9 0 0 1 I V R close race only capital letter for you.NO,thanks.</span><br></pre></td></tr></table></figure><p>后来百度知道这是secconctf，我一开始以为flag是flag{SECCON9001IVR}，丢，原来是SECCON{9001IVR}emmm</p><h2 id="GUET-CTF2019-虚假的压缩包"><a href="#GUET-CTF2019-虚假的压缩包" class="headerlink" title="[GUET-CTF2019]虚假的压缩包"></a>[GUET-CTF2019]虚假的压缩包</h2><p>题目给了两个压缩包，虚假的那个明显是伪加密的意思，遇压缩包不觉先上7z，伪加密的压缩包7z可以直接解压缩并告知压缩包数据头部信息有错，这个错误直接忽略就可。得到 <code>key.txt</code> ，里面的内容明显是让解一个简单的<code>rsa</code>计算，<code>n=33</code>，<code>e=3</code>，这和直接说 <code>d=7</code> 有啥区别，不如放一个稍微花里胡哨点的解密好玩2333。真实的压缩包的密码脑洞了一下下，不过只是一下下，还在正常范围之内。txt最后的那句话加上答案才是完整密码————<strong>答案是5</strong>.解密是一张图片和不知道是啥的文件，这里因为开了kali想用<code>file</code>命令查看那个未知文件是不是已知文件类型，结果发现图片在卡里下无法显示，故winhex修改高度看到提示 <code>^5</code> ，那就写个脚本和5异或咯。<br><del>这里犯了个小错，一开始直接把文件的十六进制数据和5异或了，然后发现得到的结果有问题，后来仔细看了看，出题人已经把文件的十六进制encode一次了，直接用读取用int转一下数据类型就可以了</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'cipher'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> io,open(<span class="string">'flag'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> fi:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        tmp = io.read(<span class="number">128</span>)</span><br><span class="line">        print(tmp)</span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        flag = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">            flag += str(hex(int(i,<span class="number">16</span>)^<span class="number">5</span>)[<span class="number">2</span>:])</span><br><span class="line">        print(len(flag))</span><br><span class="line">        fi.write(binascii.a2b_hex(flag.strip()))</span><br></pre></td></tr></table></figure><p>然后winhex打开生成的文件看到开头又PK和xml的字符，推测是office的文件，先试试word文档打开，发现显示正常，结尾有多余的空格和换行，估计是白色字体，全选之后改一下字体颜色看到flag。<br><img src="http://lychee.xibai.xyz/uploads/big/7503f8658073cff565bf143961da9179.png" alt="xml"></p><h2 id="RCTF2019-draw"><a href="#RCTF2019-draw" class="headerlink" title="[RCTF2019]draw"></a>[RCTF2019]draw</h2><p>这是少儿编程logo语言，在网上找了好几个版本的解释器都不能完全识别文本的所有命令，最后在google上的一个在线工具中完整执行。。。再次验证在线工具一般情况比离线工具强的莫名理论emmmm</p><h2 id="greatescape"><a href="#greatescape" class="headerlink" title="greatescape"></a>greatescape</h2><p>这个题让我深感只会基操就来硬刚wireshark的难受。以后有空了认真拿着wireshark的教学手册修炼一波，一条一条流量硬刚的日子再也不想过了555.<br>首先查看流量协议类型发现存在<code>ftp</code>和<code>smtp</code>两种关键流量，前者一般人都知道是访问服务器文件的，后者略微冷一点点，不过大家玩信安的也应该有了解过，大概就是是邮件通信服务的协议类型。<br>分析两种流量的内容，在<code>ftp</code>流量中发现一个文件<code>ssc.key</code>，查看<code>stmp</code>中的邮件内容，得到关键信息：<br><img src="http://lychee.xibai.xyz/uploads/small/20c1fb4142fa45e68c9ee89c4621a089.png" alt="stmp"><br>他会通过<code>https://ssc.teaser.insomnihack.ch</code>该域名的服务器传输东西，那么很明显了，前面的<code>ssc.key</code>是一个类似于RSA私钥的文件（我打开看了确实是RSA私钥），而这里访问这个<code>SSC</code>的服务器用了<code>SSL</code>的加密，在 <strong>得到了私钥的情况下就可以为wireshark指定对目标TLS加密流量进行解密</strong> 。通过 编辑-&gt;首选项-&gt;protocol（协议）-&gt;（<strong><em>老版wireshark选择SSL</em></strong>）TLS -&gt;RSA keys list:Edit..,直接添加指定IP、端口、协议、本地RSA私钥文件的信息，然后重新打开该流量包文件即可查看之前一些乱码的目标流量信息。在前面提到的那个<code>SSC</code>相关的所有解密了的流量信息中查找关键信息，一条一条的找着审啊（回头必须学一些进阶操作惹），在<code>tcp.stream eq 80</code>的http流量中发现小旗纸。<br><img src="http://lychee.xibai.xyz/uploads/big/b09d7fb35dd7eb319bea8af22cf86d93.png" alt="flag"></p><h2 id="HBNIS2018-来题中等的吧"><a href="#HBNIS2018-来题中等的吧" class="headerlink" title="[HBNIS2018]来题中等的吧"></a>[HBNIS2018]来题中等的吧</h2><p>一开始没认出来这是音频分析里的图像emmm，后来看着图片开头竖着一列点点，中间横着一条线，才发现这是音频分析的截图。那就好说了，转一手摩斯电码就可，注意莫斯电码结果都是小写</p><h2 id="HBNIS2018-caesar"><a href="#HBNIS2018-caesar" class="headerlink" title="[HBNIS2018]caesar"></a>[HBNIS2018]caesar</h2><p>入门凯撒，偏移一位</p><h2 id="HBNIS2018-低个头"><a href="#HBNIS2018-低个头" class="headerlink" title="[HBNIS2018]低个头"></a>[HBNIS2018]低个头</h2><p>简单键盘密码</p><h2 id="GUET-CTF2019-soul-sipse"><a href="#GUET-CTF2019-soul-sipse" class="headerlink" title="[GUET-CTF2019]soul sipse"></a>[GUET-CTF2019]soul sipse</h2><p>用 <strong>Audacity</strong> 分析，一开始没发现东西，后来想到频谱图里下面有一行红线，猜测内容是被缩小了<br><img src="http://lychee.xibai.xyz/uploads/big/76cb90d64cea4819a299ffb5e0d70c8c.png" alt="red line"><br><img src="http://lychee.xibai.xyz/uploads/small/80cb0e34c72b40f2bd02068dab02af21.png" alt="zoom"><br>啊啊啊，我的眼睛！！！出题人让我逮到了有他好果子吃！<br><img src="http://lychee.xibai.xyz/uploads/small/165b86a4b0504df0e89f50c871a8b9c4.png" alt="hint"><br>两个数字的和，看来这个wav里面藏了其他东西，用wav相关的隐写工具先试一试，发现steghide解出了一个url，是腾讯微云的文件分享，下载下来，png的头部数据还错了，手动修复。<br><img src="http://lychee.xibai.xyz/uploads/small/38a63fd2cd703ade5e0349d981cd8c14.png" alt="flag"><br>转Unicode得到两个数字，相加即为flag</p><h2 id="HDCTF2019-你能发现什么蛛丝马迹吗"><a href="#HDCTF2019-你能发现什么蛛丝马迹吗" class="headerlink" title="[HDCTF2019]你能发现什么蛛丝马迹吗"></a>[HDCTF2019]你能发现什么蛛丝马迹吗</h2><p>volatility分析，这里注意查看镜像信息后直接用第一个<code>Win2003SP0x86</code>来进行其它的分析会出现无法识别各种东西的问题，换后面的镜像即可。<br>查看文件发现存在flag.png，dump出来是一个二维码，扫码拿到一串字符串，base64尝试无果，再次分析该文件发现尾部还有第二个文件。分离后得到<code>key</code>和<code>iv</code>，那应该是对称加密算法的一种，尝试后在<code>aes</code>的<code>ecb</code>模式下解得flag</p><h2 id="CTF2019-otaku"><a href="#CTF2019-otaku" class="headerlink" title="[*CTF2019]otaku"></a>[*CTF2019]otaku</h2><p>u1s1，去年我是怎么被*ctf的签到劝退的，记得当时签到死活提交不对。以为是个神仙比赛，这看来也是有简单题的，tnl555。题目文件是伪加密，解压是一个zip和doc，zip里有一个<code>last words.txt</code>和一段压缩设置的注释，doc里面有一段隐藏文字，很明显隐藏文字就是<code>last words</code>的内容。那应该就是明文攻击了，给了winrar的压缩方式，直接提取lastwords内容压一个包。<br>这里有个点，就是明文攻击要求内部的已知加密文件必须是一模一样的内容，压出来一个一样的包，想看打出来的包符合不符合要求可以用winrar打开看它们的crc校验码是否一样，校验码一样就可以直接攻击，不一样的话要先调整文件，调整到crc码一样才可以。<br>这里一开始打了个包发现crc并不一样，就查找问题，发现题目中的<code>lastwords.txt</code>是432byte，我们提取出来的txt是433byte，说明压缩算法暂时没问题，问题出在我们创建的txt上面了。打开txt查看我们提取的内容，总共是431个字符，但是大小是433byte，说明里面有一个字符不在ASCII码范围，故utf-8用了3个字节表示这个字符，而源文件432byte，应该是这个字符仅用了2byte。那就知道是什么问题了，将txt另存为ANSI或者GBK编码，再看就是432byte了，然后按照给出的压缩方式压缩，crc码一样，明文攻击得到压缩包密码。<br>解压缩得到flag.png，直接常规png隐写一条路，发现lsb隐藏了flag</p><h2 id="日常未完待续嘤嘤嘤QAQ"><a href="#日常未完待续嘤嘤嘤QAQ" class="headerlink" title="日常未完待续嘤嘤嘤QAQ"></a>日常未完待续嘤嘤嘤QAQ</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">突然惊醒我早先是学bin的emmm，等我把三写完就去爆肝bin，丢</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Misc" scheme="http://xibai.xyz/categories/Misc/"/>
    
    
      <category term="CTF" scheme="http://xibai.xyz/tags/CTF/"/>
    
      <category term="Misc" scheme="http://xibai.xyz/tags/Misc/"/>
    
      <category term="Writeup" scheme="http://xibai.xyz/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xibai.xyz/2020/02/14/hello-world/"/>
    <id>http://xibai.xyz/2020/02/14/hello-world/</id>
    <published>2020-02-14T12:19:33.457Z</published>
    <updated>2020-03-05T16:21:47.857Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>BUUCTF-MISC(二)</title>
    <link href="http://xibai.xyz/2020/02/02/BUU-Misc-two/"/>
    <id>http://xibai.xyz/2020/02/02/BUU-Misc-two/</id>
    <published>2020-02-02T10:43:11.000Z</published>
    <updated>2020-03-05T16:21:47.853Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近更新：</strong> <em>2020-02-16 18:10</em></p><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>解压出来68个压缩包，还全是带真密码的，还没提示！！！我丢。不过查看压缩包发现每一个压缩包内部的文件数据都只有4byte，这情况，感觉是要爆破每一个文件的节奏。百度了一手，发现还真是爆破emmm，这个是 <strong>利用crc校验码进行加密文件内容爆破，因为即便是加密压缩包，猜测为了可以不查看加密数据而获知数据的准确性所以压缩包是保存有压缩前数据的哈希值</strong> 。遇到这种小数据加密压缩包，在计算力足够的情况下，就可以采取哈希碰撞的爆破方法来爆破加密数据（<strong>前提是数据长度在其所用的哈希算法中可以确保该长度每一个哈希值和其对应的数据都是双射的</strong>）。写个脚本咯：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackCrc</span><span class="params">(crc)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> h <span class="keyword">in</span> dic:</span><br><span class="line">                    s = i + j + k + h</span><br><span class="line">                    <span class="keyword">if</span> crc == (binascii.crc32(s.encode())):</span><br><span class="line">                        f.write(s)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackZip</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">68</span>):</span><br><span class="line">        file = <span class="string">'out'</span>+str(i)+<span class="string">'.zip'</span></span><br><span class="line">        crc = zipfile.ZipFile(file,<span class="string">'r'</span>).getinfo(<span class="string">'data.txt'</span>).CRC</span><br><span class="line">        CrackCrc(crc)</span><br><span class="line">        print(<span class="string">'\r'</span>+<span class="string">"进度：&#123;:%&#125;"</span>.format(float((i+<span class="number">1</span>)/<span class="number">68</span>)),end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">dic = string.ascii_letters + string.digits + <span class="string">'+/='</span></span><br><span class="line">f = open(<span class="string">'out.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">print(<span class="string">"\nCRC32碰撞开始"</span>)</span><br><span class="line">CrackZip()</span><br><span class="line">print(<span class="string">"CRC32碰撞完成"</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>然后发现base64解码又是文件，因为不注意造轮子，这种脚本遇见一次写一次，丢，我再写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">str123 = <span class="string">"z5BzAAANAAAAAAAAAKo+egCAIwBJAAAAVAAAAAKGNKv+a2MdSR0zAwABAAAAQ01UCRUUy91BT5UkSNPoj5hFEVFBRvefHSBCfG0ruGnKnygsMyj8SBaZHxsYHY84LEZ24cXtZ01y3k1K1YJ0vpK9HwqUzb6u9z8igEr3dCCQLQAdAAAAHQAAAAJi0efVT2MdSR0wCAAgAAAAZmxhZy50eHQAsDRpZmZpeCB0aGUgZmlsZSBhbmQgZ2V0IHRoZSBmbGFnxD17AEAHAA=="</span></span><br><span class="line"></span><br><span class="line">fi = open(<span class="string">'flag.zip'</span>,<span class="string">'wb'</span>)</span><br><span class="line">str123 = base64.b64decode(str123)</span><br><span class="line">fi.write(str123)</span><br><span class="line">fi.close()</span><br></pre></td></tr></table></figure><p>好了拿到最终压缩包，但是这个文件头emmm，没见过，百度。好吧，rar的文件头删了七个字节，手动加上，解压缩报错文件头错误，百度rar文件头部数据，行吧，文件头中第 <code>0x16</code> 字节应该是固定74，这里是7A，改了之后再次解压缩，报错文件CMT头损坏，回头再研究，这里已经解压出来了包中的 <code>flag.txt</code> 和 <code>CMT</code> ，记事本打开cmt看到flag</p><h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p>压缩包有密码，题目弱口令，懂了，是时候把我珍藏多年的<del>小黄书</del>小黄本掏出来了。我Ubuntu19都装好了，软件和内核都更新了一遍了，这emmm还没跑出来。。。<br>打开康康，有注释emmm，ctrl a了一下发现全是空白，<del>我还以为压缩包注释也能把字设成白色了呢</del>。仔细看发现，有 <code>space</code> 有 <code>\t</code>,而且每一行二者数量都不超过5个，懂了！摩斯电码，丢，手动转码后拿到压缩包密码，解压缩是一个 <code>女神.png</code> ，这套路我熟（滑稽脸），带加密算法的lsb，弱口令想必就是在这里。该lsb加密算法地址<a href="https://github.com/cyberinc/cloacked-pixel" target="_blank" rel="noopener">https://github.com/cyberinc/cloacked-pixel</a>。<br>盲猜密码123456，过了</p><h2 id="被偷走的文件"><a href="#被偷走的文件" class="headerlink" title="被偷走的文件"></a>被偷走的文件</h2><p>和秘密文件一样，ftp流量看到压缩包，提取压缩包，爆破密码</p><h2 id="秘密文件"><a href="#秘密文件" class="headerlink" title="秘密文件"></a>秘密文件</h2><p>分析数据包，发现ftp数据条目后面有ctf字眼，跟踪流量，发现完整过程，hacker下载了一个rar压缩包，跟踪TCP流量找到传输压缩包那一条，把压缩包保存出来，有密码emm，开个后台爆破，然后前台手工找。<br>我丢，我人眼扫了整个流量包没找密码，然后突然看到我挂在后台的爆破程序老早就停了，密码四位数字：1903，解压拿flag</p><h2 id="寂静之城"><a href="#寂静之城" class="headerlink" title="寂静之城"></a>寂静之城</h2><p>我丢内类目熬。16年初的社工题，我差点没把这个网页所有数据全人眼扫一遍，最后搜了wp才知道这是16年年初的社工题，能在收藏里面找到出题人信息，丢，回应转发点赞收藏四个条目，我差点没把眼睛审没了emmm，找到之后点开查看信息，有163邮箱，一串aes或者des加密的密文，还有密钥的提示，163被脱库了，邮箱密码就是密钥。。。<br>这emmmm，隔了四年的社工题，以前没接触过社工库类的社工题，被迫百度，得到密码，解出来一个微博链接，年代久远，网页已丢，得了，直接看wp看完吧。。。<br>    出题人姓名DJ，但是已经没有微博了。。。。。去找了原来题目的wp，看了下，原来是去查开房记录。。。。。现在好了，flag就在眼前了，现在已经有了密钥，还差身份证号码了，知道了出题人的名字，和开房时间，果断去查开房记录啊！为了出这道题我也是拼了啊！不过不是我的身份证号。同名的而已</p><h2 id="谁赢了比赛"><a href="#谁赢了比赛" class="headerlink" title="谁赢了比赛"></a>谁赢了比赛</h2><p>winhex在结尾发现rar压缩包，提取出来，先挂上后台爆破，然后密码就出来了，1020，拿到一张动态图和txt，txt没用，分离动态图，第310张是白图，点开发下右下角有小字让猜flag，<code>stegsolve</code>打开换色道，发现二维码，扫码得flag</p><h2 id="蜘蛛侠鸭"><a href="#蜘蛛侠鸭" class="headerlink" title="蜘蛛侠鸭"></a>蜘蛛侠鸭</h2><p>在流量包中发现大量ICMP流量，仔细查看发现每条数据后都跟有 <code>$$START$$xxxxx</code>的内容，且第一条含有 <strong>begin</strong> ，最后一条有 <strong>end</strong> ，把begin后的第一条流量中start后的字符解一下base64，发现是压缩包开头，ok，找到关键数据，写个脚本提取所有的base字符串（<strong>注意，有大量重复的数据，第一次写的脚本没考虑到结果提取出来的数据转回压缩包老是报错emmm</strong>），然后转回压缩包。解压得到一张奇怪的动态图。<br>这里看动态图感觉每一帧的时间怪怪的，在 <code>CTF Wiki</code> 里看到gif可以进行时间相关的隐写————利用每一帧的时间间隔。  kali下用 <code>identify</code> 的命令可以清晰提取出每一帧后的时间间隔<br> identify -format “%s %T\n” flag.gif<br>本题所提取的时间间隔只要 <strong>20</strong> 和 <strong>50</strong> ，推测是二进制，用 <code>0</code> 代替 <code>20</code> ，<code>1</code> 代替 <code>50</code>，然后二进制ASCII转字符串，得到关键信息 <code>mD5_1t</code> ,32位md5即为flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_FileSize</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    fsize = os.path.getsize(filePath)</span><br><span class="line">    <span class="keyword">return</span> round(fsize, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'out.pcap'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> fi:</span><br><span class="line">    fisize = get_FileSize(os.getcwd()+R<span class="string">'\out.pcap'</span>)</span><br><span class="line">    print(fisize)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'output'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> io:</span><br><span class="line">        flag = fi.readline()  ;  num = len(flag)  ;  str123 = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> flag != <span class="string">b''</span>:</span><br><span class="line">            ind = flag.find(<span class="string">b'$$START$$'</span>)</span><br><span class="line">            <span class="keyword">if</span> ind != <span class="number">-1</span>:</span><br><span class="line">                base_str = flag[ind:<span class="number">-1</span>].replace(<span class="string">b'$$START$$'</span>,<span class="string">b''</span>)</span><br><span class="line">                <span class="keyword">if</span> str123 != base_str:</span><br><span class="line">                    io.write(base_str)</span><br><span class="line">                str123 = str(base_str)</span><br><span class="line">                str123 = eval(str123)</span><br><span class="line"></span><br><span class="line">            flag = fi.readline()  ;  num += len(flag)</span><br><span class="line">            print(<span class="string">'\r任务进度：&#123;:.2%&#125;'</span>.format(num/fisize),end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n提取完毕'</span>)</span><br></pre></td></tr></table></figure><h2 id="间谍启示录"><a href="#间谍启示录" class="headerlink" title="间谍启示录"></a>间谍启示录</h2><p>发现文件 <code>systemzx</code> 右键竟然可以直接解压缩，解压，得到一个flag.exe，运行一下，发现会自动调用文件已销毁emmm，再来一次，这次只提取 <strong>flag.exe</strong> ，运行，得到一个 <code>机密文件.txt</code>，打开即是flag</p><h2 id="SWPU2019-神奇的二维码"><a href="#SWPU2019-神奇的二维码" class="headerlink" title="[SWPU2019]神奇的二维码"></a>[SWPU2019]神奇的二维码</h2><p>binwalk发现四个压缩包，提取出来，其中两个压缩包带有加密内容，另外两个没有密码，其中txt里面是一串base64，解码为 <code>asdfghjkl1234567890</code> ，猜测可能是压缩包密码，尝试后发现是其中带有图片的加密压缩包密码，不过图片没有发现东西。<br>查看另外两个压缩包内容，flag.doc里面也是 <strong>base64</strong> ，经尝试后，emmm，出题人过来，我要暴揍一顿，24byte的数据硬生生base64转码转到 <strong>8k2</strong> !???，在？当个人？ 解到最后的 <strong>24byte</strong> 内容即为 <strong>mp3</strong> 的解压密码，mp3是莫斯电码，转码得flag</p><h2 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h2><p>首先用 <code>winrar</code> 打开压缩包会提示文件头错误，<del>我就是个憨憨，电脑上有 <strong>winrar</strong> 不用非用 <strong>好压</strong> ，好压打开和解压缩全部没报错，然后我就没往文件格式上面想，以为多出去的一千多kb是有别的文件，用binwalk跑不出来，就各种查文件头搜索查文件尾搜索</del><br>修复rar压缩包文件头后，拿到png，stegsolve换色道拿到二维码，扫码拿到加密版flag：<br>    ci{v3erf_0tygidv2_fc0}<br>看着像是 <code>凯撒</code> 加 <code>栅栏</code> 加密，题目提示usb，旁边还有一个 <code>key.ftm</code> 没用，binwalk跑一下找到一个压缩包，里面有一个 <code>usb.pcap</code> ，就是这里，我去查usb流量分析的资料，刚好 <code>CTF Wiki</code> 里面有usb的相关资料，是大佬的usb实战分析，看懂之后，白嫖大佬的脚本回来提取关键信息。<br><del>然后。。。然后就是调试、查别的usb相关协议资料、调试、查别的相关协议资料、调。。。</del><br>大佬的脚本年代久远，一些情况已经沧海桑田，修改了一下新的脚本，其中涉及到判断键盘击键信息的相关部分也有不同，针对这道题一一做出调整，细微调整后的脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">DataFileName = <span class="string">"usb.dat"</span></span><br><span class="line"></span><br><span class="line">presses = []</span><br><span class="line"></span><br><span class="line">normalKeys = &#123;<span class="string">"04"</span>:<span class="string">"a"</span>, <span class="string">"05"</span>:<span class="string">"b"</span>, <span class="string">"06"</span>:<span class="string">"c"</span>, <span class="string">"07"</span>:<span class="string">"d"</span>, <span class="string">"08"</span>:<span class="string">"e"</span>, <span class="string">"09"</span>:<span class="string">"f"</span>, <span class="string">"0a"</span>:<span class="string">"g"</span>, <span class="string">"0b"</span>:<span class="string">"h"</span>, <span class="string">"0c"</span>:<span class="string">"i"</span>, <span class="string">"0d"</span>:<span class="string">"j"</span>, <span class="string">"0e"</span>:<span class="string">"k"</span>, <span class="string">"0f"</span>:<span class="string">"l"</span>, <span class="string">"10"</span>:<span class="string">"m"</span>, <span class="string">"11"</span>:<span class="string">"n"</span>, <span class="string">"12"</span>:<span class="string">"o"</span>, <span class="string">"13"</span>:<span class="string">"p"</span>, <span class="string">"14"</span>:<span class="string">"q"</span>, <span class="string">"15"</span>:<span class="string">"r"</span>, <span class="string">"16"</span>:<span class="string">"s"</span>, <span class="string">"17"</span>:<span class="string">"t"</span>, <span class="string">"18"</span>:<span class="string">"u"</span>, <span class="string">"19"</span>:<span class="string">"v"</span>, <span class="string">"1a"</span>:<span class="string">"w"</span>, <span class="string">"1b"</span>:<span class="string">"x"</span>, <span class="string">"1c"</span>:<span class="string">"y"</span>, <span class="string">"1d"</span>:<span class="string">"z"</span>,<span class="string">"1e"</span>:<span class="string">"1"</span>, <span class="string">"1f"</span>:<span class="string">"2"</span>, <span class="string">"20"</span>:<span class="string">"3"</span>, <span class="string">"21"</span>:<span class="string">"4"</span>, <span class="string">"22"</span>:<span class="string">"5"</span>, <span class="string">"23"</span>:<span class="string">"6"</span>,<span class="string">"24"</span>:<span class="string">"7"</span>,<span class="string">"25"</span>:<span class="string">"8"</span>,<span class="string">"26"</span>:<span class="string">"9"</span>,<span class="string">"27"</span>:<span class="string">"0"</span>,<span class="string">"28"</span>:<span class="string">"&lt;RET&gt;"</span>,<span class="string">"29"</span>:<span class="string">"&lt;ESC&gt;"</span>,<span class="string">"2a"</span>:<span class="string">"&lt;DEL&gt;"</span>, <span class="string">"2b"</span>:<span class="string">"\t"</span>,<span class="string">"2c"</span>:<span class="string">"&lt;SPACE&gt;"</span>,<span class="string">"2d"</span>:<span class="string">"-"</span>,<span class="string">"2e"</span>:<span class="string">"="</span>,<span class="string">"2f"</span>:<span class="string">"["</span>,<span class="string">"30"</span>:<span class="string">"]"</span>,<span class="string">"31"</span>:<span class="string">"\\"</span>,<span class="string">"32"</span>:<span class="string">"&lt;NON&gt;"</span>,<span class="string">"33"</span>:<span class="string">";"</span>,<span class="string">"34"</span>:<span class="string">"'"</span>,<span class="string">"35"</span>:<span class="string">"&lt;GA&gt;"</span>,<span class="string">"36"</span>:<span class="string">","</span>,<span class="string">"37"</span>:<span class="string">"."</span>,<span class="string">"38"</span>:<span class="string">"/"</span>,<span class="string">"39"</span>:<span class="string">"&lt;CAP&gt;"</span>,<span class="string">"3a"</span>:<span class="string">"&lt;F1&gt;"</span>,<span class="string">"3b"</span>:<span class="string">"&lt;F2&gt;"</span>, <span class="string">"3c"</span>:<span class="string">"&lt;F3&gt;"</span>,<span class="string">"3d"</span>:<span class="string">"&lt;F4&gt;"</span>,<span class="string">"3e"</span>:<span class="string">"&lt;F5&gt;"</span>,<span class="string">"3f"</span>:<span class="string">"&lt;F6&gt;"</span>,<span class="string">"40"</span>:<span class="string">"&lt;F7&gt;"</span>,<span class="string">"41"</span>:<span class="string">"&lt;F8&gt;"</span>,<span class="string">"42"</span>:<span class="string">"&lt;F9&gt;"</span>,<span class="string">"43"</span>:<span class="string">"&lt;F10&gt;"</span>,<span class="string">"44"</span>:<span class="string">"&lt;F11&gt;"</span>,<span class="string">"45"</span>:<span class="string">"&lt;F12&gt;"</span>&#125;</span><br><span class="line"></span><br><span class="line">shiftKeys = &#123;<span class="string">"04"</span>:<span class="string">"A"</span>, <span class="string">"05"</span>:<span class="string">"B"</span>, <span class="string">"06"</span>:<span class="string">"C"</span>, <span class="string">"07"</span>:<span class="string">"D"</span>, <span class="string">"08"</span>:<span class="string">"E"</span>, <span class="string">"09"</span>:<span class="string">"F"</span>, <span class="string">"0a"</span>:<span class="string">"G"</span>, <span class="string">"0b"</span>:<span class="string">"H"</span>, <span class="string">"0c"</span>:<span class="string">"I"</span>, <span class="string">"0d"</span>:<span class="string">"J"</span>, <span class="string">"0e"</span>:<span class="string">"K"</span>, <span class="string">"0f"</span>:<span class="string">"L"</span>, <span class="string">"10"</span>:<span class="string">"M"</span>, <span class="string">"11"</span>:<span class="string">"N"</span>, <span class="string">"12"</span>:<span class="string">"O"</span>, <span class="string">"13"</span>:<span class="string">"P"</span>, <span class="string">"14"</span>:<span class="string">"Q"</span>, <span class="string">"15"</span>:<span class="string">"R"</span>, <span class="string">"16"</span>:<span class="string">"S"</span>, <span class="string">"17"</span>:<span class="string">"T"</span>, <span class="string">"18"</span>:<span class="string">"U"</span>, <span class="string">"19"</span>:<span class="string">"V"</span>, <span class="string">"1a"</span>:<span class="string">"W"</span>, <span class="string">"1b"</span>:<span class="string">"X"</span>, <span class="string">"1c"</span>:<span class="string">"Y"</span>, <span class="string">"1d"</span>:<span class="string">"Z"</span>,<span class="string">"1e"</span>:<span class="string">"!"</span>, <span class="string">"1f"</span>:<span class="string">"@"</span>, <span class="string">"20"</span>:<span class="string">"#"</span>, <span class="string">"21"</span>:<span class="string">"$"</span>, <span class="string">"22"</span>:<span class="string">"%"</span>, <span class="string">"23"</span>:<span class="string">"^"</span>,<span class="string">"24"</span>:<span class="string">"&amp;"</span>,<span class="string">"25"</span>:<span class="string">"*"</span>,<span class="string">"26"</span>:<span class="string">"("</span>,<span class="string">"27"</span>:<span class="string">")"</span>,<span class="string">"28"</span>:<span class="string">"&lt;RET&gt;"</span>,<span class="string">"29"</span>:<span class="string">"&lt;ESC&gt;"</span>,<span class="string">"2a"</span>:<span class="string">"&lt;DEL&gt;"</span>, <span class="string">"2b"</span>:<span class="string">"\t"</span>,<span class="string">"2c"</span>:<span class="string">"&lt;SPACE&gt;"</span>,<span class="string">"2d"</span>:<span class="string">"_"</span>,<span class="string">"2e"</span>:<span class="string">"+"</span>,<span class="string">"2f"</span>:<span class="string">"&#123;"</span>,<span class="string">"30"</span>:<span class="string">"&#125;"</span>,<span class="string">"31"</span>:<span class="string">"|"</span>,<span class="string">"32"</span>:<span class="string">"&lt;NON&gt;"</span>,<span class="string">"33"</span>:<span class="string">"\""</span>,<span class="string">"34"</span>:<span class="string">":"</span>,<span class="string">"35"</span>:<span class="string">"&lt;GA&gt;"</span>,<span class="string">"36"</span>:<span class="string">"&lt;"</span>,<span class="string">"37"</span>:<span class="string">"&gt;"</span>,<span class="string">"38"</span>:<span class="string">"?"</span>,<span class="string">"39"</span>:<span class="string">"&lt;CAP&gt;"</span>,<span class="string">"3a"</span>:<span class="string">"&lt;F1&gt;"</span>,<span class="string">"3b"</span>:<span class="string">"&lt;F2&gt;"</span>, <span class="string">"3c"</span>:<span class="string">"&lt;F3&gt;"</span>,<span class="string">"3d"</span>:<span class="string">"&lt;F4&gt;"</span>,<span class="string">"3e"</span>:<span class="string">"&lt;F5&gt;"</span>,<span class="string">"3f"</span>:<span class="string">"&lt;F6&gt;"</span>,<span class="string">"40"</span>:<span class="string">"&lt;F7&gt;"</span>,<span class="string">"41"</span>:<span class="string">"&lt;F8&gt;"</span>,<span class="string">"42"</span>:<span class="string">"&lt;F9&gt;"</span>,<span class="string">"43"</span>:<span class="string">"&lt;F10&gt;"</span>,<span class="string">"44"</span>:<span class="string">"&lt;F11&gt;"</span>,<span class="string">"45"</span>:<span class="string">"&lt;F12&gt;"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># check argv</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Usage : "</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"        python UsbKeyboardHacker.py data.pcap"</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Tips : "</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"        To use this python script , you must install the tshark first."</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"        You can use `sudo apt-get install tshark` to install it"</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"        Thank you for using."</span></span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get argv</span></span><br><span class="line">    pcapFilePath = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get data of pcap</span></span><br><span class="line">    os.system(<span class="string">"tshark -r %s -T fields -e usb.capdata &gt; %s"</span> % (pcapFilePath, DataFileName))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># read data</span></span><br><span class="line">    <span class="keyword">with</span> open(DataFileName, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            presses.append(line[<span class="number">0</span>:<span class="number">-1</span>])</span><br><span class="line">    <span class="comment"># handle</span></span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> press <span class="keyword">in</span> presses:</span><br><span class="line">        <span class="keyword">if</span> press[<span class="number">6</span>:] == <span class="string">'0000000000'</span> <span class="keyword">and</span> press[<span class="number">2</span>:<span class="number">4</span>] == <span class="string">'00'</span>:</span><br><span class="line">            <span class="keyword">if</span> press[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">'00'</span>:</span><br><span class="line">                <span class="keyword">if</span> press[<span class="number">4</span>:<span class="number">6</span>] != <span class="string">'00'</span>:</span><br><span class="line">                    result += normalKeys[press[<span class="number">4</span>:<span class="number">6</span>]]</span><br><span class="line">            <span class="keyword">elif</span> press[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">'20'</span> <span class="keyword">or</span> press[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">'02'</span>: <span class="comment"># 20 or 02 all is shift+</span></span><br><span class="line">                <span class="keyword">if</span> press[<span class="number">4</span>:<span class="number">6</span>] != <span class="string">"00"</span>: <span class="comment"># shift key is pressed.</span></span><br><span class="line">                    result += shiftKeys[press[<span class="number">4</span>:<span class="number">6</span>]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"[-] Unknow Key : %s %s"</span> % (press[<span class="number">0</span>:<span class="number">2</span>],press[<span class="number">4</span>:<span class="number">6</span>])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+] Found : %s"</span> % (result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># clean the temp data</span></span><br><span class="line">    os.system(<span class="string">"rm ./%s"</span> % (DataFileName))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>使用脚本提取出关键信息：<br>    key{xinan}<br>有key，flag疑似被 <code>栅栏</code> 和 <code>凯撒</code> 加密，妥了，<strong>维吉尼亚</strong> 和 <strong>栅栏</strong> 两种加密了应该，掏出之前写过的 <strong>维吉尼亚</strong> 的加解密脚本跑一下：<br>    fa{i3eei_0llgvgn2_sc0}<br>22个字符猜测栅栏加密是两栏，在线解密跑一下得到最终flag（栅栏加密我记得国内外有两种加密算法，回头查一下资料自己造个轮子，感觉以后说不定忘了就会被坑）</p><h2 id="SWPU2019-我有一只马里奥"><a href="#SWPU2019-我有一只马里奥" class="headerlink" title="[SWPU2019]我有一只马里奥"></a>[SWPU2019]我有一只马里奥</h2><p>右键发现可以解压缩,拿到一个txt,打开发现提示，是ntfs隐写，然后 <code>ntfsstreamseditor</code> 查看拿到flag</p><h2 id="john-in-the-middle"><a href="#john-in-the-middle" class="headerlink" title="john-in-the-middle"></a>john-in-the-middle</h2><p>wireshark没看到什么有价值的东西，题目 <strong>john-in-the-middle</strong> 猜测和中间的流量有关系，看到有一些png，用foremost将其提取出来。其中有一个图片中间是一个小旗子，出于对（旗子）（flag）的敏感，分析这个图片，用stegsolve换色道后发现flag</p><h2 id="小易的U盘"><a href="#小易的U盘" class="headerlink" title="小易的U盘"></a>小易的U盘</h2><p>在u盘镜像里查看，发现有一个被生成的 <code>autoflag</code> 和其它的大小不一样，将其提取出来分析，winhex查看没有找到疑点，ida打开，查看main函数，发现有一个 <strong>_main</strong> 和 <strong>_main_0</strong> 查看 <strong>_main_0</strong> 发现flag</p><h2 id="二维码-一不小心把存放flag的二维码给撕破了"><a href="#二维码-一不小心把存放flag的二维码给撕破了" class="headerlink" title="二维码-一不小心把存放flag的二维码给撕破了"></a>二维码-一不小心把存放flag的二维码给撕破了</h2><p>没啥捷径，ps手工修吧，直接把9块碎图放一起扫不出来，因为这个纸形变略微严重，ps的变形功能可以修回去，不过要是有<strong>大佬学图片识别相关的 够强 用脚本提取关键像素信息，然后自己利用提取的颜色坐标重新生成二维码我觉得也行嘿嘿嘿</strong><br>这里放上我弄好的二维码叭。</p><p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages%E4%BA%8C%E7%BB%B4%E7%A0%81.png" alt="二维码.png"></p><h2 id="黑客帝国"><a href="#黑客帝国" class="headerlink" title="黑客帝国"></a>黑客帝国</h2><p>代码不规范，问题考虑不到位，ctfer两行泪T_T<br>解压文本中明显是文件的十六进制数据，第一次写的时候高估了电脑的力量，直接把整个数据全部在一次之内处理，然后。。。然后爆破密码爆破了一下午都爆不出来，又去查了一堆压缩包可能出现的花样。<br>之后突然想起来以前第一次写数据转文件脚本的时候有过数据太大导致文件有问题的例子，就赶紧改了一下脚本，然后一下爆出来密码3690。。。解压出图片，打开发现报错，winhex查看发现jpg的文件头被改成png了，改回来，打开图片看见flag</p><h2 id="黄金六年"><a href="#黄金六年" class="headerlink" title="黄金六年"></a>黄金六年</h2><p>文件结尾有一段base64，解码发现是rar加密压缩包，仔细看视频发现里面有三张二维码，pr启动，逐帧扫码，所得字符串拼起来即为密码，解压得flag</p><h2 id="GXYCTF2019-佛系青年"><a href="#GXYCTF2019-佛系青年" class="headerlink" title="[GXYCTF2019]佛系青年"></a>[GXYCTF2019]佛系青年</h2><p>压缩包伪加密，修改标志位，解压的文件中最后一句是编码，与佛伦禅，解码得flag</p><h2 id="SUCTF-2019-Game"><a href="#SUCTF-2019-Game" class="headerlink" title="[SUCTF 2019]Game"></a>[SUCTF 2019]Game</h2><p>png图片lsb分析发现藏有 <code>DES</code> 加密的密文，需要密钥。<br>密钥应该就在压缩包里了，有密码，尝试后是伪加密，是一个网页的文件，在 <code>index.html</code> 里发现flag字样，尝试后知是base32，解码后的内容即为密钥，解密时发现不是 <code>DES</code> ，是 <code>3DES</code> 加密</p><h2 id="SWPU2019-伟大的侦探"><a href="#SWPU2019-伟大的侦探" class="headerlink" title="[SWPU2019]伟大的侦探"></a>[SWPU2019]伟大的侦探</h2><p>密码.txt里面提示密码的编码格式，用 <code>010 Editor</code> 更换编码为 <code>EBCDIC</code> 时看到密码。然后解压压缩包，一堆小人，网上搜索关键词，<code>侦探 小人 密码</code> ，得知时福尔摩斯小说中出现的密码 <code>跳舞的小人</code> ，对照搜出来的密码表解密即可</p><h2 id="GXYCTF2019-SXMgdGhpcyBiYXNlPw"><a href="#GXYCTF2019-SXMgdGhpcyBiYXNlPw" class="headerlink" title="[GXYCTF2019]SXMgdGhpcyBiYXNlPw=="></a>[GXYCTF2019]SXMgdGhpcyBiYXNlPw==</h2><p>题目解base64后为： <strong>Is this base?</strong> 。flag.txt 中是大量的base64字符串，猜测是base64隐写，掏出自己之前造过的轮子，得到flag</p><h2 id="安洵杯-2019-吹着贝斯扫二维码"><a href="#安洵杯-2019-吹着贝斯扫二维码" class="headerlink" title="[安洵杯 2019]吹着贝斯扫二维码"></a>[安洵杯 2019]吹着贝斯扫二维码</h2><p>二维码切块文件尾部跟有序号，写个脚本按序号拼一下，扫码得到提示，压缩包打开可以看到注释，很明显提示给的是密钥的加密过程，反过来解密拿到密码，解压得flag</p><h2 id="派大星的烦恼"><a href="#派大星的烦恼" class="headerlink" title="派大星的烦恼"></a>派大星的烦恼</h2><p>这题老实说有点单纯脑洞了。两种细胞很明显就是说代表两种元素，总共256个字节，若转化成图像与二维码不沾边，故应当是二进制的ASCII码，但是没有任何其他提示，让人盲猜如何将其排列为原本的二进制ASCII码。。。吐了，简单试了下异或，不行，果断去搜了wp，不浪费这种时间，wp说是把每八位的二进制倒序一下就是对应字母和数字了</p><h2 id="GXYCTF2019-gakki"><a href="#GXYCTF2019-gakki" class="headerlink" title="[GXYCTF2019]gakki"></a>[GXYCTF2019]gakki</h2><p>解压缩是jpg，winhex分析有压缩包，提取出来有密码不是伪加密，爆破得到密码，四位数字。解压出来是一堆无规律字符，猜测是字频。写个脚本，得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">alphabet = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()_+- =&#123;&#125;[]"</span></span><br><span class="line">filename = input(<span class="string">'请输入目标文本:'</span>)</span><br><span class="line">f = open(filename, <span class="string">"r"</span>)</span><br><span class="line">data = f.read()</span><br><span class="line">result = &#123;d:<span class="number">0</span> <span class="keyword">for</span> d <span class="keyword">in</span> alphabet&#125;</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_by_value</span><span class="params">(d)</span>:</span></span><br><span class="line">    items = d.items()</span><br><span class="line">    backitems = [[v[<span class="number">1</span>],v[<span class="number">0</span>]] <span class="keyword">for</span> v <span class="keyword">in</span> items]</span><br><span class="line">    backitems.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> [ backitems[i][<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(backitems))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">for</span> alpha <span class="keyword">in</span> alphabet:</span><br><span class="line">        <span class="keyword">if</span> d == alpha:</span><br><span class="line">            result[alpha] = result[alpha] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(sort_by_value(result))</span><br><span class="line">print(<span class="string">''</span>.join(sort_by_value(result)))</span><br></pre></td></tr></table></figure><h2 id="真的很杂"><a href="#真的很杂" class="headerlink" title="真的很杂"></a>真的很杂</h2><p>winhex分析出有个压缩包，提取出来，解压缩发现是个安卓应用包，改后缀zip为apk，用安卓反编译软件反编译，搜索flag字符串找到flag</p><h2 id="SWPU2019-Network"><a href="#SWPU2019-Network" class="headerlink" title="[SWPU2019]Network"></a>[SWPU2019]Network</h2><p>题目叫network，文件内容是一堆63、127、191、255，查资料发现可能有关联的是一个被叫做 <code>TTL</code> 的东西，这个 <code>TTL</code> 简单来说就是计数用的。简单比方一下，当你向目标主机发送报文时，ttl的初始值就是所允许经过的最大节点数，经过一个节点转发，ttl 就减一，减到零还没到目标主机就会自动销毁报文。这里四个数字差距过大，差值也不像有什么关联性。这里由 LSB 隐写联想到，lsb是修改色素二进制值最低位来隐藏01字符串，把63、127、191、255 可能是将01字符串藏在了最高位。因为lsb最低位隐写是因为修改最低位时只看图像不容易发觉问题，同理ttl每次减一，修改最高位影响最小。将四个数转二进制发现刚好最高两位分别是00、01、10、11，其余位皆为1，写脚本将其提取并转ASCII码，发现是压缩包，尝试后发现是伪加密，拿到文本，base64套娃。。。异常处理脚本写一个查看最终结果，得到flag</p><h2 id="SWPU2019-你有没有好好看网课"><a href="#SWPU2019-你有没有好好看网课" class="headerlink" title="[SWPU2019]你有没有好好看网课"></a>[SWPU2019]你有没有好好看网课</h2><p>两个加密包，一个可以爆破出密码，一个应该是正常加密了。爆破的这个包里的word文字明显不连贯，应该是和解题有关，应该是指视频的 <code>5：20</code> 和 <code>7：11</code> ，找啊找，在白色吊灯里有两节白色小字符emmm 提取出来：<br>    ….. ../… ./… ./… ../<br>    dXBfdXBfdXA=<br>    经尝试第一节是敲击码，第二节base64<br>合在一起是另一个压缩包密码，解压出一个jpg，在文件结尾发现flag</p><h2 id="粽子的来历"><a href="#粽子的来历" class="headerlink" title="粽子的来历"></a>粽子的来历</h2><p>四个word文档，在这里容我先说一句，金山文档WPS就是个弟弟，文件格式不对竟然不报错强行打开解码，我差点以为是我哈皮了，看着一堆乱码总感觉是文件有问题，office365打开当场报错格式有问题。winhex查看，发现四个文件开头都加了一句Icomefromxxxxx，猜测将其改回ff即可，另，题目描述说藏在dbapp了，第三个文件正好说来自dbapp，应该就藏在这个文件里。<br>打开是屈原的一首诗，题目描述也说曹小明把地点藏在了诗中，又说flag是正确数值连在一起后的md5。。。脑洞太大着实想不到点，无奈搜了wp后。。。。。。。。。<br>狗贼受死！！！行间距不一样，1.5倍行间距设为数值1，1倍设为0，连在一起的01字符串md5即为flag？？？在？你咋不设该行有‘之’字的话对应1，没有对应0呢？？？玩不起？？？是我太菜不配打ctf了，告辞</p><h2 id="BJDCTF2020-你猜我是个啥"><a href="#BJDCTF2020-你猜我是个啥" class="headerlink" title="[BJDCTF2020]你猜我是个啥"></a>[BJDCTF2020]你猜我是个啥</h2><p>下载下来的压缩包打开是空的，winhex在尾部看到flag</p><h2 id="BJDCTF2020-藏藏藏"><a href="#BJDCTF2020-藏藏藏" class="headerlink" title="[BJDCTF2020]藏藏藏"></a>[BJDCTF2020]藏藏藏</h2><p>winhex查看发现尾部有压缩包，解压缩是word，打开是二维码，扫码得flag</p><h2 id="BJDCTF2020-认真你就输了"><a href="#BJDCTF2020-认真你就输了" class="headerlink" title="[BJDCTF2020]认真你就输了"></a>[BJDCTF2020]认真你就输了</h2><p>用excel直接打开表格发现内容有问题，winhex查看发现这是xlsx格式的表格，而且看到了flag.txt的路径，直接解压打开，拿到flag</p><h2 id="我爱Linux"><a href="#我爱Linux" class="headerlink" title="我爱Linux"></a>我爱Linux</h2><p>感觉这题和Linux没啥关系，不如直接叫我爱python。<br>谷歌识图得知这张图片的团体名字指向python，再用google搜索关键词 <code>python</code> <code>80 03</code> ，得知这是用python生成的序列化文件，可以用 python 的 <code>pickle</code> 模块读取其内容。发现似乎是坐标元组组成的列表，将其字符按照坐标值写入文本，打开文本看到排列为flag的内容。（注意： *<em>转出来的字符形状要仔细观察细节区分清楚，比如里面的 a 和 e *</em>）<br>附上搜到的python序列化相关文章地址：<a href="https://diego.assencio.com/?index=99d3134bb98fdcc9a7c2bd6071db737d" target="_blank" rel="noopener">https://diego.assencio.com/?index=99d3134bb98fdcc9a7c2bd6071db737d</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = pickle.load(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> data[i]:</span><br><span class="line">            f.write(<span class="string">' '</span>*(j[<span class="number">0</span>]-x<span class="number">-1</span>) + j[<span class="number">1</span>])</span><br><span class="line">            x = j[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            f.write(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><h2 id="BJDCTF2020-just-a-rar"><a href="#BJDCTF2020-just-a-rar" class="headerlink" title="[BJDCTF2020]just_a_rar"></a>[BJDCTF2020]just_a_rar</h2><p>名字四位数，爆破，解压是一张jpg，右键属性，详细信息里看到flag</p><h2 id="BJDCTF2020-一叶障目"><a href="#BJDCTF2020-一叶障目" class="headerlink" title="[BJDCTF2020]一叶障目"></a>[BJDCTF2020]一叶障目</h2><p>winhex修改png图片高度拿到flag</p><h2 id="BJDCTF2020-鸡你太美"><a href="#BJDCTF2020-鸡你太美" class="headerlink" title="[BJDCTF2020]鸡你太美"></a>[BJDCTF2020]鸡你太美</h2><p>打开是两个gif，第二个gif格式错误，winhex打开发现少了四个字节的文件头，添加后打开gif即可看到flag</p><h2 id="BJDCTF2020-纳尼"><a href="#BJDCTF2020-纳尼" class="headerlink" title="[BJDCTF2020]纳尼"></a>[BJDCTF2020]纳尼</h2><p>解压是一个格式损坏的gif，winhex修复文件头，发现是一段段字符，提取出来，拼在一起解base64即可，这里我解得结果中间错了一个字母不知道为什么，不过根据结果能猜出来错的这个字符应该是什么</p><h2 id="百里挑一"><a href="#百里挑一" class="headerlink" title="百里挑一"></a>百里挑一</h2><p>流量包分析，发现很多jpg文件，导出http对象，linxu下用exiftool工具加管道符快速搜索一下有没有提示，发现一半flag<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages%E7%99%BE%E9%87%8C%E6%8C%91%E4%B8%801.png" alt="百里挑一1.png"><br>后一半flag应该是还在流量包里，因为之前看到有大量ftp流量，回去查看ftp流量，果然通过ftp也下载了大量jpg，想到流量包中的数据一般也都是直接存储明文，尝试使用<code>strings</code>命令直接搜寻flag，这里需要用 <code>-el</code> 参数指定数据存储的大小端方式，不然会发现没有找到flag<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages%E7%99%BE%E9%87%8C%E6%8C%91%E4%B8%802.png" alt="百里挑一2.png"></p><p>flag{ae58d0408e26e8f26a3c0589d23edeec}</p><h2 id="安洵杯-2019-Attack"><a href="#安洵杯-2019-Attack" class="headerlink" title="[安洵杯 2019]Attack"></a>[安洵杯 2019]Attack</h2><p>这个比赛当时参加了，找不到自己的writeup放哪了，直接给<a href="https://xz.aliyun.com/t/6911#toc-24" target="_blank" rel="noopener">官方writeup链接</a></p><h2 id="静静听这么好听的歌"><a href="#静静听这么好听的歌" class="headerlink" title="静静听这么好听的歌"></a>静静听这么好听的歌</h2><p>电脑最近重置了，matlab装着太麻烦，直接附上<a href="https://blog.csdn.net/zrools/article/details/50630780?utm_source=blogxgwz2" target="_blank" rel="noopener">表哥的wp</a></p><h2 id="Business-Planning-Group"><a href="#Business-Planning-Group" class="headerlink" title="Business Planning Group"></a>Business Planning Group</h2><p>winhex打开发现结尾跟了一大段未知数据，数据开头是连续三个大写字母 <code>BPG</code> (这里再次吐槽谷歌还是你谷歌，<del>一开始我用百度搜关键词没搜出来，可能是我的关键词没加图像相关关键词的缘故</del>。嗯，就在我打出这句话的时候我又去试了下，百度搜出来了，有百科，而且第一条结果就是emmmm)这是一种新的图像文件格式，大概意思是既像png一样保证质量又像jpg一样保证空间。进入其官网，有在线查看器，直接查看图片内容<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesBPG.png" alt="BPG.png"><br>明显是一串base64，解base64得flag</p><h2 id="安洵杯-2019-easy-misc"><a href="#安洵杯-2019-easy-misc" class="headerlink" title="[安洵杯 2019]easy misc"></a>[安洵杯 2019]easy misc</h2><p>套娃，丢，<a href="https://xz.aliyun.com/t/6911#toc-30" target="_blank" rel="noopener">官方wp</a></p><h2 id="请移步篇章三嘤嘤嘤（虽然还没做2333）"><a href="#请移步篇章三嘤嘤嘤（虽然还没做2333）" class="headerlink" title="请移步篇章三嘤嘤嘤（虽然还没做2333）"></a>请移步篇章三嘤嘤嘤（虽然还没做2333）</h2>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Misc" scheme="http://xibai.xyz/categories/Misc/"/>
    
    
      <category term="CTF" scheme="http://xibai.xyz/tags/CTF/"/>
    
      <category term="Misc" scheme="http://xibai.xyz/tags/Misc/"/>
    
      <category term="Writeup" scheme="http://xibai.xyz/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF-MISC(一)</title>
    <link href="http://xibai.xyz/2020/01/11/BUU-Misc-one/"/>
    <id>http://xibai.xyz/2020/01/11/BUU-Misc-one/</id>
    <published>2020-01-11T09:03:11.000Z</published>
    <updated>2020-03-05T16:21:47.846Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近更新：</strong> <em>2020-01-31 22:43</em></p><h2 id="金三胖"><a href="#金三胖" class="headerlink" title="金三胖"></a>金三胖</h2><p>打开题目是一个动态图，分解动态图即得flag</p><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p>扫描得到提示秘密在这里，winhex查看发现末尾有压缩包，提取出来被加密，直接爆破密码可得flag</p><h2 id="N种方法解决"><a href="#N种方法解决" class="headerlink" title="N种方法解决"></a>N种方法解决</h2><p>winhex查看发现是base64编码的图片，在线工具转一下拿到一个二维码，扫一下即可</p><h2 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h2><p>根据提示打开发现图片疑似少了一截，winhex修改长宽，拿到flag</p><h2 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a>基础破解</h2><p>提示四位数字，直接爆破得到密码，解压得到一串base64字符串，解base64即可</p><h2 id="你竟然赶我走"><a href="#你竟然赶我走" class="headerlink" title="你竟然赶我走"></a>你竟然赶我走</h2><p>winhex查看十六进制发现末尾有flag</p><h2 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h2><p>StegSolve查看发现最低位隐藏了信息，是一个png文件的十六进制数据，保存出来，是个二维码，扫码得flag</p><h2 id="乌镇峰会种图"><a href="#乌镇峰会种图" class="headerlink" title="乌镇峰会种图"></a>乌镇峰会种图</h2><p>文件末尾是flag</p><h2 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h2><p>爆破密码</p><h2 id="qr"><a href="#qr" class="headerlink" title="qr"></a>qr</h2><p>扫码签到</p><h2 id="ningen"><a href="#ningen" class="headerlink" title="ningen"></a>ningen</h2><p>winhex发现压缩包，提取爆破密码</p><h2 id="文件中的秘密"><a href="#文件中的秘密" class="headerlink" title="文件中的秘密"></a>文件中的秘密</h2><p>查看文件属性发现flag</p><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>打开流量包查看http流量，发现有一条流量的传参有flag字样，flag后的password内容即<br>为flag</p><h2 id="镜子里面的世界"><a href="#镜子里面的世界" class="headerlink" title="镜子里面的世界"></a>镜子里面的世界</h2><p>StegSolve看lsb最低位隐写</p><h2 id="小明的保险箱"><a href="#小明的保险箱" class="headerlink" title="小明的保险箱"></a>小明的保险箱</h2><p>图片末尾有一个rar加密包，爆破即可</p><h2 id="爱因斯坦"><a href="#爱因斯坦" class="headerlink" title="爱因斯坦"></a>爱因斯坦</h2><p>这个题 脑洞了 一下，把图片备注里的this_is_not_password作为压缩包密码了，输入this_is_not_password解压即可</p><h2 id="被嗅探的流量"><a href="#被嗅探的流量" class="headerlink" title="被嗅探的流量"></a>被嗅探的流量</h2><p>查看流量包发现有一个post表单，跟进去搜索flag即可</p><h2 id="假如给我三天光明"><a href="#假如给我三天光明" class="headerlink" title="假如给我三天光明"></a>假如给我三天光明</h2><p>一个加密压缩包，一个图片，图片上是海伦凯勒，下面有一行盲文，盲文的明文即为压缩包密码，解压缩得到一个音频，是莫斯电码，用音频分析软件查看摩斯电码，转为明文为flag内容，另外，莫斯电码都是小写！</p><h2 id="easycap"><a href="#easycap" class="headerlink" title="easycap"></a>easycap</h2><p>入门的wireshark流量分析，wireshark打开后直接右键追踪TCP流即可看到flag</p><h2 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h2><p>在用stegsolve查看lsb的时候发现其用lsb写入了一个zip文件，save bin出来解压缩，用winhex查看发现是elf文件，ida打开搜索字符串发现flag</p><h2 id="另外一个世界"><a href="#另外一个世界" class="headerlink" title="另外一个世界"></a>另外一个世界</h2><p>题目是一个jpg文件，winhex发现尾部有一串ASCII码，写个脚本转码就是flag</p><h2 id="荷兰宽带数据泄露"><a href="#荷兰宽带数据泄露" class="headerlink" title="荷兰宽带数据泄露"></a>荷兰宽带数据泄露</h2><p>下载下来一个bin文件，实在不知道这个文件的正确打开方式，百度了下大佬的思路，大佬直接就说这是路由器数据，用 <strong>RouterPassView</strong> 可以查看该文件内容emmm，又get一个新工具，username的值即为flag</p><h2 id="隐藏的钥匙"><a href="#隐藏的钥匙" class="headerlink" title="隐藏的钥匙"></a>隐藏的钥匙</h2><p><del>下载下来一个路飞的图片，winhex查看发现有两张jpg，把第二张jpg拿出来</del><br>一开始一直以为flag会放在藏起来的大图片里，结果发现这里被惯性思维坑了，flag就在原图里，winhex搜素flag或者kali里用strings输出可见字符查看flag都能看到flag，flag后面跟了一串base64字符，解码即可</p><h2 id="来首歌吧"><a href="#来首歌吧" class="headerlink" title="来首歌吧"></a>来首歌吧</h2><p>音频分析软件拉进去，发现双声道，一个是莫斯码，一个是音频，直接解码莫斯码</p><h2 id="后门查杀"><a href="#后门查杀" class="headerlink" title="后门查杀"></a>后门查杀</h2><p>解压网站文件后，360自动扫描提示后门文件emmm，被360秀了2333，include.php就是后门脚本，打开即可看到 密码（md5）</p><h2 id="神秘龙卷风"><a href="#神秘龙卷风" class="headerlink" title="神秘龙卷风"></a>神秘龙卷风</h2><p>爆破工具破解压缩包，拿到文本，是brain fuck代码，用工具执行，输出flag</p><h2 id="梅花香自苦寒来"><a href="#梅花香自苦寒来" class="headerlink" title="梅花香自苦寒来"></a>梅花香自苦寒来</h2><p>解包是一个jpg，老规矩winhex看结尾，发现一大串十六进制数据，猜测是把文件的十六进制作为文本的形式写在后面了，提取出来写个脚本将其作为文件十六进制解码，拿到二维码，扫码出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">outfile_hex = open(<span class="string">'outfile_hex.txt'</span>,<span class="string">'r'</span>).read()</span><br><span class="line">file_out = open(<span class="string">'output'</span>,<span class="string">'w'</span>).write(outfile_hex.decode(<span class="string">'hex'</span>))</span><br><span class="line"></span><br><span class="line">pic = Image.new(<span class="string">'RGB'</span>,(<span class="number">271</span>,<span class="number">271</span>),<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'output'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fi:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fi.readlines():</span><br><span class="line">        flag = line.split(<span class="string">','</span>)</span><br><span class="line">        x = eval(flag[<span class="number">0</span>][<span class="number">1</span>:])</span><br><span class="line">        y = eval(flag[<span class="number">1</span>][<span class="number">0</span>:<span class="number">-2</span>])</span><br><span class="line">        <span class="comment">##print(x,y)</span></span><br><span class="line">        pic.putpixel([x<span class="number">-1</span>,y<span class="number">-1</span>],(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">pic.show()</span><br><span class="line">pic.save(<span class="string">'flag.png'</span>)</span><br><span class="line"><span class="comment">##file_out.close()</span></span><br></pre></td></tr></table></figure><h2 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h2><p>jpg文件结尾有压缩包，解包拿到两个文件，key中是base64编码，解码拿到提示<code>What is Nicki Minaj&#39;s favorite song that refers to snakes?</code>，百度歌手<code>Nicki Minaj</code>,从她的歌中找和蛇相关的，发现<code>anaconda</code>；之后再去找加密算法，因为除了密钥的提示之外没有其他提示，所以推测加密算法的名字有可能也和蛇相关，查找蛇的单词发现 <code>serpent</code>作为蛇的翻译刚好是一个加密算法的名字，找了一个在线解密网站，解出flag</p><h2 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h2><p>下载下来一个加密压缩包，没有别的提示，猜测是伪加密，试了一下，解压成功，第二个加密压缩包是真加密，觉得密码应该在解压拿到的图片里，jpg图片加密，把手里能使的全整了一遍，最后用<code>steghide</code>拿到隐藏的txt文件，<code>steghide</code>加密密钥为空。txt里即是flag的加密密码，解压得flag</p><h2 id="面具下的flag"><a href="#面具下的flag" class="headerlink" title="面具下的flag"></a>面具下的flag</h2><p>下载下来一个jpg,winhex查看发现一个压缩包，提取出来有加密，猜测是伪加密，尝试之后解压出来一个<strong>vmdk</strong>。这里查了好久的资料，没查到为什么 <code>vmdk</code> 可以用 <code>7z</code> 解压缩从而获取硬盘内的数据，暂放。<strong>7z</strong>解压出来两个文件夹，第一个里面是<code>brain fuck</code>代码，用<strong>brainfucktool</strong>运行拿到一半flag，第二个文件夹里面只有一句话：这里没有flag，用<code>7z</code>打开vmdk，发现第二个文件夹有交替数据流， 用<strong>ntfs文件系统</strong> 隐写工具 <code>ntfsstreamseditor</code> 查看发现隐藏的<code>Ook!</code>代码，用在线工具解出第二段flag</p><h2 id="webshell后门"><a href="#webshell后门" class="headerlink" title="webshell后门"></a>webshell后门</h2><p>杀毒软件先扫一遍，发现风险项，ok，进去找<strong>密码（md5）</strong></p><h2 id="数据包中的线索"><a href="#数据包中的线索" class="headerlink" title="数据包中的线索"></a>数据包中的线索</h2><p>wireshark打开，分析http流量，找到一个图片的base64码，复制出来，写个脚本解base64保存为文件,用图片查看器看图，看到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fi:</span><br><span class="line">    lines = fi.readlines()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'output'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> io:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            decode_str = base64.b64decode(line)</span><br><span class="line">            io.write(decode_str)</span><br></pre></td></tr></table></figure><h2 id="被劫持的神秘礼物"><a href="#被劫持的神秘礼物" class="headerlink" title="被劫持的神秘礼物"></a>被劫持的神秘礼物</h2><p>wireshark分析http流量，发现有一个login的http，追踪看到 <strong>name</strong> 和 <strong>word</strong> ，用在线网站转一下32位小写md5即可</p><h2 id="刷新过的图片"><a href="#刷新过的图片" class="headerlink" title="刷新过的图片"></a>刷新过的图片</h2><p>题目提示刷新键，刷新键是 <strong>f5</strong> ，由此知道是<code>f5</code>隐写，尝试后知道没有密码，输出的文本打开后发现是压缩包，修改文件后缀发现被加密了，猜测是伪加密，得到flag.txt</p><h2 id="菜刀666"><a href="#菜刀666" class="headerlink" title="菜刀666"></a>菜刀666</h2><p>wireshark分析，因为考虑和菜刀有关，所以只看http数据中传有base64字符串的数据流，发现用户用十六进制裸传了一张jpg图片，并下载了一个zip包。<br>将图片十六进制复制出来重新转为图片（这里我转的图片内容是色块没有任何其他信息，百度wp大佬们转出来的是一个带密码的屏幕截图）；<br>zip提取出来后发现有密码，<del>考虑到前面的图片没有有用信息怀疑又是伪加密</del>，发现不是，无奈去百度了wp发现前面的图片转出来应该是正常的图片，晕，这个没办法了，然后解包拿到flag</p><h2 id="Mysterious"><a href="#Mysterious" class="headerlink" title="Mysterious"></a>Mysterious</h2><p>是我的打开方式不对嘛，这题我当简单逆向做的。<br>ida打开搜索字符串看到 <code>well done</code> ，跟进找到main函数，反汇编查看伪C源码，flag几乎给全了，就是要自己手动补一截。盲猜补个123。百度一下函数<code>atoi</code>，发现这是c语言里用来把字符串转为对应整数的函数，if判断要求转化之后的十六进制为<code>0x7A</code>，后门跟三个字符分别为xyz，0x7a转为十进制是122，即输入应为<code>122xyz</code>，运行程序输入122xyz，发现flag和盲猜的一样emmm</p><h2 id="sqltest"><a href="#sqltest" class="headerlink" title="sqltest"></a>sqltest</h2><p>wireshark查看流量包发现是一个<code>bool盲注</code>的全过程，那就好办了，直接导出 <strong>http对象</strong> ，接下来可以人眼扫描注入过程分析flag，也可以写脚本判断诸如过程分析flag，身为 <strong>头铁萌新</strong> 代表，我果断选择人眼扫诸如过程，手工提取flag的ASCII码然后转换字符串嘿嘿嘿<br><del>好吧其实我就是懒得去写python脚本了</del> 2333</p><h2 id="喵喵喵"><a href="#喵喵喵" class="headerlink" title="喵喵喵"></a>喵喵喵</h2><p>解压拿到一个png图片，心累，终于让我遇到一个 <strong>lsb隐写</strong> 了嘛！！！果断 <code>zsteg -a</code> 我今天就把你lsb得骨灰给你扬了嘿嘿嘿。发现<code>BGR</code>模式下lsb藏了一张png，提取出来发现只有半张二维码，试试修改图片高度，获取完整二维码，是一个百度网盘链接。拿到一个flag压缩包，用WinRAR解压发现提示无法设置安全数据，猜测有可能是ntfs隐写，WinRAR可以对隐藏有ntfs数据流的文件进行压缩与解压缩并且不影响其所隐藏的数据，之前查ntfs隐写相关资料的时候记得是这么说的。用 <code>ntfsstreamseditor</code> 就可以拿到隐藏文件。然后拿到flag.pyc，用工具反编译成 <strong>py脚本</strong> 即可。附带<a href="https://www.ximu.xyz/2019/10/30/re-python/" target="_blank" rel="noopener">简单python逆向基础</a>。读加密脚本由结果反向推导flag。解密函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(ciphertext)</span>:</span></span><br><span class="line">    flag = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ciphertext)):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            s = int(ciphertext[-i<span class="number">-1</span>]) - <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = int(ciphertext[-i<span class="number">-1</span>]) + <span class="number">10</span></span><br><span class="line">        s = i ^ s</span><br><span class="line">        flag+=chr(s)</span><br><span class="line">    <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure><h2 id="穿越时空的思念"><a href="#穿越时空的思念" class="headerlink" title="穿越时空的思念"></a>穿越时空的思念</h2><p>音频分析，莫斯码，淦，想要个莫斯码提取工具QAQ，我只会手工，丢</p><h2 id="请看篇章二2333"><a href="#请看篇章二2333" class="headerlink" title="请看篇章二2333"></a>请看篇章二2333</h2>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Misc" scheme="http://xibai.xyz/categories/Misc/"/>
    
    
      <category term="CTF" scheme="http://xibai.xyz/tags/CTF/"/>
    
      <category term="Misc" scheme="http://xibai.xyz/tags/Misc/"/>
    
      <category term="Writeup" scheme="http://xibai.xyz/tags/Writeup/"/>
    
  </entry>
  
</feed>
